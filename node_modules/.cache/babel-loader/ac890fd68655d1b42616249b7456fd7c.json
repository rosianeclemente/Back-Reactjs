{"ast":null,"code":"const _debugQuery = require('debug')('knex:query');\n\nconst debugBindings = require('debug')('knex:bindings');\n\nconst debugQuery = (sql, txId) => _debugQuery(sql.replace(/%/g, '%%'), txId);\n\nconst {\n  isString\n} = require('../../util/is');\n\nfunction formatQuery(sql, bindings, timeZone, client) {\n  bindings = bindings == null ? [] : [].concat(bindings);\n  let index = 0;\n  return sql.replace(/\\\\?\\?/g, match => {\n    if (match === '\\\\?') {\n      return '?';\n    }\n\n    if (index === bindings.length) {\n      return match;\n    }\n\n    const value = bindings[index++];\n    return client._escapeBinding(value, {\n      timeZone\n    });\n  });\n}\n\nfunction enrichQueryObject(connection, queryParam, client) {\n  const queryObject = isString(queryParam) ? {\n    sql: queryParam\n  } : queryParam;\n  queryObject.bindings = client.prepBindings(queryObject.bindings);\n  queryObject.sql = client.positionBindings(queryObject.sql);\n  const {\n    __knexUid,\n    __knexTxId\n  } = connection;\n  client.emit('query', Object.assign({\n    __knexUid,\n    __knexTxId\n  }, queryObject));\n  debugQuery(queryObject.sql, __knexTxId);\n  debugBindings(queryObject.bindings, __knexTxId);\n  return queryObject;\n}\n\nfunction executeQuery(connection, queryObject, client) {\n  return client._query(connection, queryObject).catch(err => {\n    err.message = formatQuery(queryObject.sql, queryObject.bindings, undefined, client) + ' - ' + err.message;\n    client.emit('query-error', err, Object.assign({\n      __knexUid: connection.__knexUid,\n      __knexTxId: connection.__knexUid\n    }, queryObject));\n    throw err;\n  });\n}\n\nmodule.exports = {\n  enrichQueryObject,\n  executeQuery,\n  formatQuery\n};","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/execution/internal/query-executioner.js"],"names":["_debugQuery","require","debugBindings","debugQuery","sql","txId","replace","isString","formatQuery","bindings","timeZone","client","concat","index","match","length","value","_escapeBinding","enrichQueryObject","connection","queryParam","queryObject","prepBindings","positionBindings","__knexUid","__knexTxId","emit","Object","assign","executeQuery","_query","catch","err","message","undefined","module","exports"],"mappings":"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","sourcesContent":["const _debugQuery = require('debug')('knex:query');\nconst debugBindings = require('debug')('knex:bindings');\nconst debugQuery = (sql, txId) => _debugQuery(sql.replace(/%/g, '%%'), txId);\nconst { isString } = require('../../util/is');\n\nfunction formatQuery(sql, bindings, timeZone, client) {\n  bindings = bindings == null ? [] : [].concat(bindings);\n  let index = 0;\n  return sql.replace(/\\\\?\\?/g, (match) => {\n    if (match === '\\\\?') {\n      return '?';\n    }\n    if (index === bindings.length) {\n      return match;\n    }\n    const value = bindings[index++];\n    return client._escapeBinding(value, { timeZone });\n  });\n}\n\nfunction enrichQueryObject(connection, queryParam, client) {\n  const queryObject = isString(queryParam) ? { sql: queryParam } : queryParam;\n\n  queryObject.bindings = client.prepBindings(queryObject.bindings);\n  queryObject.sql = client.positionBindings(queryObject.sql);\n\n  const { __knexUid, __knexTxId } = connection;\n\n  client.emit('query', Object.assign({ __knexUid, __knexTxId }, queryObject));\n  debugQuery(queryObject.sql, __knexTxId);\n  debugBindings(queryObject.bindings, __knexTxId);\n\n  return queryObject;\n}\n\nfunction executeQuery(connection, queryObject, client) {\n  return client._query(connection, queryObject).catch((err) => {\n    err.message =\n      formatQuery(queryObject.sql, queryObject.bindings, undefined, client) +\n      ' - ' +\n      err.message;\n    client.emit(\n      'query-error',\n      err,\n      Object.assign(\n        { __knexUid: connection.__knexUid, __knexTxId: connection.__knexUid },\n        queryObject\n      )\n    );\n    throw err;\n  });\n}\n\nmodule.exports = {\n  enrichQueryObject,\n  executeQuery,\n  formatQuery,\n};\n"]},"metadata":{},"sourceType":"script"}