{"ast":null,"code":"// The client names we'll allow in the `{name: lib}` pairing.\nconst CLIENT_ALIASES = Object.freeze({\n  pg: 'postgres',\n  postgresql: 'postgres',\n  sqlite: 'sqlite3'\n});\nconst SUPPORTED_CLIENTS = Object.freeze(['mssql', 'mysql', 'mysql2', 'oracledb', 'postgres', 'redshift', 'sqlite3'].concat(Object.keys(CLIENT_ALIASES)));\nconst DRIVER_NAMES = Object.freeze({\n  MsSQL: 'mssql',\n  MySQL: 'mysql',\n  MySQL2: 'mysql2',\n  Oracle: 'oracledb',\n  PostgreSQL: 'pg',\n  Redshift: 'pg-redshift',\n  SQLite: 'sqlite3'\n});\nconst POOL_CONFIG_OPTIONS = Object.freeze(['maxWaitingClients', 'testOnBorrow', 'fifo', 'priorityRange', 'autostart', 'evictionRunIntervalMillis', 'numTestsPerRun', 'softIdleTimeoutMillis', 'Promise']);\n/**\n * Regex that only matches comma's in strings that aren't wrapped in parentheses. Can be used to\n * safely split strings like `id int, name string, body text, primary key (id, name)` into definition\n * rows\n */\n\nconst COMMA_NO_PAREN_REGEX = /,[\\s](?![^(]*\\))/g;\nmodule.exports = {\n  CLIENT_ALIASES,\n  SUPPORTED_CLIENTS,\n  POOL_CONFIG_OPTIONS,\n  COMMA_NO_PAREN_REGEX,\n  DRIVER_NAMES\n};","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/constants.js"],"names":["CLIENT_ALIASES","Object","freeze","pg","postgresql","sqlite","SUPPORTED_CLIENTS","concat","keys","DRIVER_NAMES","MsSQL","MySQL","MySQL2","Oracle","PostgreSQL","Redshift","SQLite","POOL_CONFIG_OPTIONS","COMMA_NO_PAREN_REGEX","module","exports"],"mappings":"AAAA;AACA,MAAMA,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAc;AACnCC,EAAAA,EAAE,EAAE,UAD+B;AAEnCC,EAAAA,UAAU,EAAE,UAFuB;AAGnCC,EAAAA,MAAM,EAAE;AAH2B,CAAd,CAAvB;AAMA,MAAMC,iBAAiB,GAAGL,MAAM,CAACC,MAAP,CACxB,CACE,OADF,EAEE,OAFF,EAGE,QAHF,EAIE,UAJF,EAKE,UALF,EAME,UANF,EAOE,SAPF,EAQEK,MARF,CAQSN,MAAM,CAACO,IAAP,CAAYR,cAAZ,CART,CADwB,CAA1B;AAYA,MAAMS,YAAY,GAAGR,MAAM,CAACC,MAAP,CAAc;AACjCQ,EAAAA,KAAK,EAAE,OAD0B;AAEjCC,EAAAA,KAAK,EAAE,OAF0B;AAGjCC,EAAAA,MAAM,EAAE,QAHyB;AAIjCC,EAAAA,MAAM,EAAE,UAJyB;AAKjCC,EAAAA,UAAU,EAAE,IALqB;AAMjCC,EAAAA,QAAQ,EAAE,aANuB;AAOjCC,EAAAA,MAAM,EAAE;AAPyB,CAAd,CAArB;AAUA,MAAMC,mBAAmB,GAAGhB,MAAM,CAACC,MAAP,CAAc,CACxC,mBADwC,EAExC,cAFwC,EAGxC,MAHwC,EAIxC,eAJwC,EAKxC,WALwC,EAMxC,2BANwC,EAOxC,gBAPwC,EAQxC,uBARwC,EASxC,SATwC,CAAd,CAA5B;AAYA;AACA;AACA;AACA;AACA;;AACA,MAAMgB,oBAAoB,GAAG,mBAA7B;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfpB,EAAAA,cADe;AAEfM,EAAAA,iBAFe;AAGfW,EAAAA,mBAHe;AAIfC,EAAAA,oBAJe;AAKfT,EAAAA;AALe,CAAjB","sourcesContent":["// The client names we'll allow in the `{name: lib}` pairing.\nconst CLIENT_ALIASES = Object.freeze({\n  pg: 'postgres',\n  postgresql: 'postgres',\n  sqlite: 'sqlite3',\n});\n\nconst SUPPORTED_CLIENTS = Object.freeze(\n  [\n    'mssql',\n    'mysql',\n    'mysql2',\n    'oracledb',\n    'postgres',\n    'redshift',\n    'sqlite3',\n  ].concat(Object.keys(CLIENT_ALIASES))\n);\n\nconst DRIVER_NAMES = Object.freeze({\n  MsSQL: 'mssql',\n  MySQL: 'mysql',\n  MySQL2: 'mysql2',\n  Oracle: 'oracledb',\n  PostgreSQL: 'pg',\n  Redshift: 'pg-redshift',\n  SQLite: 'sqlite3',\n});\n\nconst POOL_CONFIG_OPTIONS = Object.freeze([\n  'maxWaitingClients',\n  'testOnBorrow',\n  'fifo',\n  'priorityRange',\n  'autostart',\n  'evictionRunIntervalMillis',\n  'numTestsPerRun',\n  'softIdleTimeoutMillis',\n  'Promise',\n]);\n\n/**\n * Regex that only matches comma's in strings that aren't wrapped in parentheses. Can be used to\n * safely split strings like `id int, name string, body text, primary key (id, name)` into definition\n * rows\n */\nconst COMMA_NO_PAREN_REGEX = /,[\\s](?![^(]*\\))/g;\n\nmodule.exports = {\n  CLIENT_ALIASES,\n  SUPPORTED_CLIENTS,\n  POOL_CONFIG_OPTIONS,\n  COMMA_NO_PAREN_REGEX,\n  DRIVER_NAMES,\n};\n"]},"metadata":{},"sourceType":"script"}