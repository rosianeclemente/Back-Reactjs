{"ast":null,"code":"// Redshift\n// -------\nconst Client_PG = require('../postgres');\n\nconst map = require('lodash/map');\n\nconst Transaction = require('./transaction');\n\nconst QueryCompiler = require('./query/redshift-querycompiler');\n\nconst ColumnBuilder = require('./schema/redshift-columnbuilder');\n\nconst ColumnCompiler = require('./schema/redshift-columncompiler');\n\nconst TableCompiler = require('./schema/redshift-tablecompiler');\n\nconst SchemaCompiler = require('./schema/redshift-compiler');\n\nclass Client_Redshift extends Client_PG {\n  transaction() {\n    return new Transaction(this, ...arguments);\n  }\n\n  queryCompiler(builder, formatter) {\n    return new QueryCompiler(this, builder, formatter);\n  }\n\n  columnBuilder() {\n    return new ColumnBuilder(this, ...arguments);\n  }\n\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n\n  schemaCompiler() {\n    return new SchemaCompiler(this, ...arguments);\n  }\n\n  _driver() {\n    return require('pg');\n  } // Ensures the response is returned in the same format as other clients.\n\n\n  processResponse(obj, runner) {\n    const resp = obj.response;\n    if (obj.output) return obj.output.call(runner, resp);\n    if (obj.method === 'raw') return resp;\n\n    if (resp.command === 'SELECT') {\n      if (obj.method === 'first') return resp.rows[0];\n      if (obj.method === 'pluck') return map(resp.rows, obj.pluck);\n      return resp.rows;\n    }\n\n    if (resp.command === 'INSERT' || resp.command === 'UPDATE' || resp.command === 'DELETE') {\n      return resp.rowCount;\n    }\n\n    return resp;\n  }\n\n}\n\nObject.assign(Client_Redshift.prototype, {\n  dialect: 'redshift',\n  driverName: 'pg-redshift'\n});\nmodule.exports = Client_Redshift;","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/dialects/redshift/index.js"],"names":["Client_PG","require","map","Transaction","QueryCompiler","ColumnBuilder","ColumnCompiler","TableCompiler","SchemaCompiler","Client_Redshift","transaction","arguments","queryCompiler","builder","formatter","columnBuilder","columnCompiler","tableCompiler","schemaCompiler","_driver","processResponse","obj","runner","resp","response","output","call","method","command","rows","pluck","rowCount","Object","assign","prototype","dialect","driverName","module","exports"],"mappings":"AAAA;AACA;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,YAAD,CAAnB;;AAEA,MAAME,WAAW,GAAGF,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,gCAAD,CAA7B;;AACA,MAAMI,aAAa,GAAGJ,OAAO,CAAC,iCAAD,CAA7B;;AACA,MAAMK,cAAc,GAAGL,OAAO,CAAC,kCAAD,CAA9B;;AACA,MAAMM,aAAa,GAAGN,OAAO,CAAC,iCAAD,CAA7B;;AACA,MAAMO,cAAc,GAAGP,OAAO,CAAC,4BAAD,CAA9B;;AAEA,MAAMQ,eAAN,SAA8BT,SAA9B,CAAwC;AACtCU,EAAAA,WAAW,GAAG;AACZ,WAAO,IAAIP,WAAJ,CAAgB,IAAhB,EAAsB,GAAGQ,SAAzB,CAAP;AACD;;AAEDC,EAAAA,aAAa,CAACC,OAAD,EAAUC,SAAV,EAAqB;AAChC,WAAO,IAAIV,aAAJ,CAAkB,IAAlB,EAAwBS,OAAxB,EAAiCC,SAAjC,CAAP;AACD;;AAEDC,EAAAA,aAAa,GAAG;AACd,WAAO,IAAIV,aAAJ,CAAkB,IAAlB,EAAwB,GAAGM,SAA3B,CAAP;AACD;;AAEDK,EAAAA,cAAc,GAAG;AACf,WAAO,IAAIV,cAAJ,CAAmB,IAAnB,EAAyB,GAAGK,SAA5B,CAAP;AACD;;AAEDM,EAAAA,aAAa,GAAG;AACd,WAAO,IAAIV,aAAJ,CAAkB,IAAlB,EAAwB,GAAGI,SAA3B,CAAP;AACD;;AAEDO,EAAAA,cAAc,GAAG;AACf,WAAO,IAAIV,cAAJ,CAAmB,IAAnB,EAAyB,GAAGG,SAA5B,CAAP;AACD;;AAEDQ,EAAAA,OAAO,GAAG;AACR,WAAOlB,OAAO,CAAC,IAAD,CAAd;AACD,GA3BqC,CA6BtC;;;AACAmB,EAAAA,eAAe,CAACC,GAAD,EAAMC,MAAN,EAAc;AAC3B,UAAMC,IAAI,GAAGF,GAAG,CAACG,QAAjB;AACA,QAAIH,GAAG,CAACI,MAAR,EAAgB,OAAOJ,GAAG,CAACI,MAAJ,CAAWC,IAAX,CAAgBJ,MAAhB,EAAwBC,IAAxB,CAAP;AAChB,QAAIF,GAAG,CAACM,MAAJ,KAAe,KAAnB,EAA0B,OAAOJ,IAAP;;AAC1B,QAAIA,IAAI,CAACK,OAAL,KAAiB,QAArB,EAA+B;AAC7B,UAAIP,GAAG,CAACM,MAAJ,KAAe,OAAnB,EAA4B,OAAOJ,IAAI,CAACM,IAAL,CAAU,CAAV,CAAP;AAC5B,UAAIR,GAAG,CAACM,MAAJ,KAAe,OAAnB,EAA4B,OAAOzB,GAAG,CAACqB,IAAI,CAACM,IAAN,EAAYR,GAAG,CAACS,KAAhB,CAAV;AAC5B,aAAOP,IAAI,CAACM,IAAZ;AACD;;AACD,QACEN,IAAI,CAACK,OAAL,KAAiB,QAAjB,IACAL,IAAI,CAACK,OAAL,KAAiB,QADjB,IAEAL,IAAI,CAACK,OAAL,KAAiB,QAHnB,EAIE;AACA,aAAOL,IAAI,CAACQ,QAAZ;AACD;;AACD,WAAOR,IAAP;AACD;;AA/CqC;;AAkDxCS,MAAM,CAACC,MAAP,CAAcxB,eAAe,CAACyB,SAA9B,EAAyC;AACvCC,EAAAA,OAAO,EAAE,UAD8B;AAGvCC,EAAAA,UAAU,EAAE;AAH2B,CAAzC;AAMAC,MAAM,CAACC,OAAP,GAAiB7B,eAAjB","sourcesContent":["// Redshift\n// -------\nconst Client_PG = require('../postgres');\nconst map = require('lodash/map');\n\nconst Transaction = require('./transaction');\nconst QueryCompiler = require('./query/redshift-querycompiler');\nconst ColumnBuilder = require('./schema/redshift-columnbuilder');\nconst ColumnCompiler = require('./schema/redshift-columncompiler');\nconst TableCompiler = require('./schema/redshift-tablecompiler');\nconst SchemaCompiler = require('./schema/redshift-compiler');\n\nclass Client_Redshift extends Client_PG {\n  transaction() {\n    return new Transaction(this, ...arguments);\n  }\n\n  queryCompiler(builder, formatter) {\n    return new QueryCompiler(this, builder, formatter);\n  }\n\n  columnBuilder() {\n    return new ColumnBuilder(this, ...arguments);\n  }\n\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n\n  schemaCompiler() {\n    return new SchemaCompiler(this, ...arguments);\n  }\n\n  _driver() {\n    return require('pg');\n  }\n\n  // Ensures the response is returned in the same format as other clients.\n  processResponse(obj, runner) {\n    const resp = obj.response;\n    if (obj.output) return obj.output.call(runner, resp);\n    if (obj.method === 'raw') return resp;\n    if (resp.command === 'SELECT') {\n      if (obj.method === 'first') return resp.rows[0];\n      if (obj.method === 'pluck') return map(resp.rows, obj.pluck);\n      return resp.rows;\n    }\n    if (\n      resp.command === 'INSERT' ||\n      resp.command === 'UPDATE' ||\n      resp.command === 'DELETE'\n    ) {\n      return resp.rowCount;\n    }\n    return resp;\n  }\n}\n\nObject.assign(Client_Redshift.prototype, {\n  dialect: 'redshift',\n\n  driverName: 'pg-redshift',\n});\n\nmodule.exports = Client_Redshift;\n"]},"metadata":{},"sourceType":"script"}