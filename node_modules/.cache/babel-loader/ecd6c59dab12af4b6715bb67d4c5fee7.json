{"ast":null,"code":"// MySQL Schema Compiler\n// -------\nconst SchemaCompiler = require('../../../schema/compiler');\n\nclass SchemaCompiler_MySQL extends SchemaCompiler {\n  constructor(client, builder) {\n    super(client, builder);\n  } // Rename a table on the schema.\n\n\n  renameTable(tableName, to) {\n    this.pushQuery(`rename table ${this.formatter.wrap(tableName)} to ${this.formatter.wrap(to)}`);\n  } // Check whether a table exists on the query.\n\n\n  hasTable(tableName) {\n    let sql = 'select * from information_schema.tables where table_name = ?';\n    const bindings = [tableName];\n\n    if (this.schema) {\n      sql += ' and table_schema = ?';\n      bindings.push(this.schema);\n    } else {\n      sql += ' and table_schema = database()';\n    }\n\n    this.pushQuery({\n      sql,\n      bindings,\n      output: function output(resp) {\n        return resp.length > 0;\n      }\n    });\n  } // Check whether a column exists on the schema.\n\n\n  hasColumn(tableName, column) {\n    this.pushQuery({\n      sql: `show columns from ${this.formatter.wrap(tableName)}`,\n\n      output(resp) {\n        return resp.some(row => {\n          return this.client.wrapIdentifier(row.Field) === this.client.wrapIdentifier(column);\n        });\n      }\n\n    });\n  }\n\n}\n\nmodule.exports = SchemaCompiler_MySQL;","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/dialects/mysql/schema/mysql-compiler.js"],"names":["SchemaCompiler","require","SchemaCompiler_MySQL","constructor","client","builder","renameTable","tableName","to","pushQuery","formatter","wrap","hasTable","sql","bindings","schema","push","output","resp","length","hasColumn","column","some","row","wrapIdentifier","Field","module","exports"],"mappings":"AAAA;AACA;AACA,MAAMA,cAAc,GAAGC,OAAO,CAAC,0BAAD,CAA9B;;AAEA,MAAMC,oBAAN,SAAmCF,cAAnC,CAAkD;AAChDG,EAAAA,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkB;AAC3B,UAAMD,MAAN,EAAcC,OAAd;AACD,GAH+C,CAKhD;;;AACAC,EAAAA,WAAW,CAACC,SAAD,EAAYC,EAAZ,EAAgB;AACzB,SAAKC,SAAL,CACG,gBAAe,KAAKC,SAAL,CAAeC,IAAf,CAAoBJ,SAApB,CAA+B,OAAM,KAAKG,SAAL,CAAeC,IAAf,CACnDH,EADmD,CAEnD,EAHJ;AAKD,GAZ+C,CAchD;;;AACAI,EAAAA,QAAQ,CAACL,SAAD,EAAY;AAClB,QAAIM,GAAG,GAAG,8DAAV;AACA,UAAMC,QAAQ,GAAG,CAACP,SAAD,CAAjB;;AAEA,QAAI,KAAKQ,MAAT,EAAiB;AACfF,MAAAA,GAAG,IAAI,uBAAP;AACAC,MAAAA,QAAQ,CAACE,IAAT,CAAc,KAAKD,MAAnB;AACD,KAHD,MAGO;AACLF,MAAAA,GAAG,IAAI,gCAAP;AACD;;AAED,SAAKJ,SAAL,CAAe;AACbI,MAAAA,GADa;AAEbC,MAAAA,QAFa;AAGbG,MAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,IAAhB,EAAsB;AAC5B,eAAOA,IAAI,CAACC,MAAL,GAAc,CAArB;AACD;AALY,KAAf;AAOD,GAjC+C,CAmChD;;;AACAC,EAAAA,SAAS,CAACb,SAAD,EAAYc,MAAZ,EAAoB;AAC3B,SAAKZ,SAAL,CAAe;AACbI,MAAAA,GAAG,EAAG,qBAAoB,KAAKH,SAAL,CAAeC,IAAf,CAAoBJ,SAApB,CAA+B,EAD5C;;AAEbU,MAAAA,MAAM,CAACC,IAAD,EAAO;AACX,eAAOA,IAAI,CAACI,IAAL,CAAWC,GAAD,IAAS;AACxB,iBACE,KAAKnB,MAAL,CAAYoB,cAAZ,CAA2BD,GAAG,CAACE,KAA/B,MACA,KAAKrB,MAAL,CAAYoB,cAAZ,CAA2BH,MAA3B,CAFF;AAID,SALM,CAAP;AAMD;;AATY,KAAf;AAWD;;AAhD+C;;AAmDlDK,MAAM,CAACC,OAAP,GAAiBzB,oBAAjB","sourcesContent":["// MySQL Schema Compiler\n// -------\nconst SchemaCompiler = require('../../../schema/compiler');\n\nclass SchemaCompiler_MySQL extends SchemaCompiler {\n  constructor(client, builder) {\n    super(client, builder);\n  }\n\n  // Rename a table on the schema.\n  renameTable(tableName, to) {\n    this.pushQuery(\n      `rename table ${this.formatter.wrap(tableName)} to ${this.formatter.wrap(\n        to\n      )}`\n    );\n  }\n\n  // Check whether a table exists on the query.\n  hasTable(tableName) {\n    let sql = 'select * from information_schema.tables where table_name = ?';\n    const bindings = [tableName];\n\n    if (this.schema) {\n      sql += ' and table_schema = ?';\n      bindings.push(this.schema);\n    } else {\n      sql += ' and table_schema = database()';\n    }\n\n    this.pushQuery({\n      sql,\n      bindings,\n      output: function output(resp) {\n        return resp.length > 0;\n      },\n    });\n  }\n\n  // Check whether a column exists on the schema.\n  hasColumn(tableName, column) {\n    this.pushQuery({\n      sql: `show columns from ${this.formatter.wrap(tableName)}`,\n      output(resp) {\n        return resp.some((row) => {\n          return (\n            this.client.wrapIdentifier(row.Field) ===\n            this.client.wrapIdentifier(column)\n          );\n        });\n      },\n    });\n  }\n}\n\nmodule.exports = SchemaCompiler_MySQL;\n"]},"metadata":{},"sourceType":"script"}