{"ast":null,"code":"const {\n  getTableName\n} = require('./table-resolver');\n\nconst {\n  ensureTable\n} = require('./table-creator'); // Lists all available migration versions, as a sorted array.\n\n\nfunction listAll(migrationSource, loadExtensions) {\n  return migrationSource.getMigrations(loadExtensions);\n} // Lists all migrations that have been completed for the current db, as an\n// array.\n\n\nasync function listCompleted(tableName, schemaName, trxOrKnex) {\n  await ensureTable(tableName, schemaName, trxOrKnex);\n  const completedMigrations = await trxOrKnex.from(getTableName(tableName, schemaName)).orderBy('id').select('name');\n  return completedMigrations.map(migration => {\n    return migration.name;\n  });\n} // Gets the migration list from the migration directory specified in config, as well as\n// the list of completed migrations to check what should be run.\n\n\nfunction listAllAndCompleted(config, trxOrKnex) {\n  return Promise.all([listAll(config.migrationSource, config.loadExtensions), listCompleted(config.tableName, config.schemaName, trxOrKnex)]);\n}\n\nmodule.exports = {\n  listAll,\n  listAllAndCompleted,\n  listCompleted\n};","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/migrations/migrate/migration-list-resolver.js"],"names":["getTableName","require","ensureTable","listAll","migrationSource","loadExtensions","getMigrations","listCompleted","tableName","schemaName","trxOrKnex","completedMigrations","from","orderBy","select","map","migration","name","listAllAndCompleted","config","Promise","all","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,OAAO,CAAC,kBAAD,CAAhC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAkBD,OAAO,CAAC,iBAAD,CAA/B,C,CAEA;;;AACA,SAASE,OAAT,CAAiBC,eAAjB,EAAkCC,cAAlC,EAAkD;AAChD,SAAOD,eAAe,CAACE,aAAhB,CAA8BD,cAA9B,CAAP;AACD,C,CAED;AACA;;;AACA,eAAeE,aAAf,CAA6BC,SAA7B,EAAwCC,UAAxC,EAAoDC,SAApD,EAA+D;AAC7D,QAAMR,WAAW,CAACM,SAAD,EAAYC,UAAZ,EAAwBC,SAAxB,CAAjB;AACA,QAAMC,mBAAmB,GAAG,MAAMD,SAAS,CACxCE,IAD+B,CAC1BZ,YAAY,CAACQ,SAAD,EAAYC,UAAZ,CADc,EAE/BI,OAF+B,CAEvB,IAFuB,EAG/BC,MAH+B,CAGxB,MAHwB,CAAlC;AAKA,SAAOH,mBAAmB,CAACI,GAApB,CAAyBC,SAAD,IAAe;AAC5C,WAAOA,SAAS,CAACC,IAAjB;AACD,GAFM,CAAP;AAGD,C,CAED;AACA;;;AACA,SAASC,mBAAT,CAA6BC,MAA7B,EAAqCT,SAArC,EAAgD;AAC9C,SAAOU,OAAO,CAACC,GAAR,CAAY,CACjBlB,OAAO,CAACgB,MAAM,CAACf,eAAR,EAAyBe,MAAM,CAACd,cAAhC,CADU,EAEjBE,aAAa,CAACY,MAAM,CAACX,SAAR,EAAmBW,MAAM,CAACV,UAA1B,EAAsCC,SAAtC,CAFI,CAAZ,CAAP;AAID;;AAEDY,MAAM,CAACC,OAAP,GAAiB;AACfpB,EAAAA,OADe;AAEfe,EAAAA,mBAFe;AAGfX,EAAAA;AAHe,CAAjB","sourcesContent":["const { getTableName } = require('./table-resolver');\nconst { ensureTable } = require('./table-creator');\n\n// Lists all available migration versions, as a sorted array.\nfunction listAll(migrationSource, loadExtensions) {\n  return migrationSource.getMigrations(loadExtensions);\n}\n\n// Lists all migrations that have been completed for the current db, as an\n// array.\nasync function listCompleted(tableName, schemaName, trxOrKnex) {\n  await ensureTable(tableName, schemaName, trxOrKnex);\n  const completedMigrations = await trxOrKnex\n    .from(getTableName(tableName, schemaName))\n    .orderBy('id')\n    .select('name');\n\n  return completedMigrations.map((migration) => {\n    return migration.name;\n  });\n}\n\n// Gets the migration list from the migration directory specified in config, as well as\n// the list of completed migrations to check what should be run.\nfunction listAllAndCompleted(config, trxOrKnex) {\n  return Promise.all([\n    listAll(config.migrationSource, config.loadExtensions),\n    listCompleted(config.tableName, config.schemaName, trxOrKnex),\n  ]);\n}\n\nmodule.exports = {\n  listAll,\n  listAllAndCompleted,\n  listCompleted,\n};\n"]},"metadata":{},"sourceType":"script"}