{"ast":null,"code":"const {\n  getTable,\n  getLockTableName,\n  getLockTableNameWithSchema,\n  getTableName\n} = require('./table-resolver');\n\nfunction ensureTable(tableName, schemaName, trxOrKnex) {\n  const lockTable = getLockTableName(tableName);\n  const lockTableWithSchema = getLockTableNameWithSchema(tableName, schemaName);\n  return getSchemaBuilder(trxOrKnex, schemaName).hasTable(tableName).then(exists => {\n    return !exists && _createMigrationTable(tableName, schemaName, trxOrKnex);\n  }).then(() => {\n    return getSchemaBuilder(trxOrKnex, schemaName).hasTable(lockTable);\n  }).then(exists => {\n    return !exists && _createMigrationLockTable(lockTable, schemaName, trxOrKnex);\n  }).then(() => {\n    return getTable(trxOrKnex, lockTable, schemaName).select('*');\n  }).then(data => {\n    return !data.length && trxOrKnex.into(lockTableWithSchema).insert({\n      is_locked: 0\n    });\n  });\n}\n\nfunction _createMigrationTable(tableName, schemaName, trxOrKnex) {\n  return getSchemaBuilder(trxOrKnex, schemaName).createTable(getTableName(tableName), function (t) {\n    t.increments();\n    t.string('name');\n    t.integer('batch');\n    t.timestamp('migration_time');\n  });\n}\n\nfunction _createMigrationLockTable(tableName, schemaName, trxOrKnex) {\n  return getSchemaBuilder(trxOrKnex, schemaName).createTable(tableName, function (t) {\n    t.increments('index').primary();\n    t.integer('is_locked');\n  });\n} //Get schema-aware schema builder for a given schema nam\n\n\nfunction getSchemaBuilder(trxOrKnex, schemaName) {\n  return schemaName ? trxOrKnex.schema.withSchema(schemaName) : trxOrKnex.schema;\n}\n\nmodule.exports = {\n  ensureTable,\n  getSchemaBuilder\n};","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/migrations/migrate/table-creator.js"],"names":["getTable","getLockTableName","getLockTableNameWithSchema","getTableName","require","ensureTable","tableName","schemaName","trxOrKnex","lockTable","lockTableWithSchema","getSchemaBuilder","hasTable","then","exists","_createMigrationTable","_createMigrationLockTable","select","data","length","into","insert","is_locked","createTable","t","increments","string","integer","timestamp","primary","schema","withSchema","module","exports"],"mappings":"AAAA,MAAM;AACJA,EAAAA,QADI;AAEJC,EAAAA,gBAFI;AAGJC,EAAAA,0BAHI;AAIJC,EAAAA;AAJI,IAKFC,OAAO,CAAC,kBAAD,CALX;;AAOA,SAASC,WAAT,CAAqBC,SAArB,EAAgCC,UAAhC,EAA4CC,SAA5C,EAAuD;AACrD,QAAMC,SAAS,GAAGR,gBAAgB,CAACK,SAAD,CAAlC;AACA,QAAMI,mBAAmB,GAAGR,0BAA0B,CAACI,SAAD,EAAYC,UAAZ,CAAtD;AACA,SAAOI,gBAAgB,CAACH,SAAD,EAAYD,UAAZ,CAAhB,CACJK,QADI,CACKN,SADL,EAEJO,IAFI,CAEEC,MAAD,IAAY;AAChB,WAAO,CAACA,MAAD,IAAWC,qBAAqB,CAACT,SAAD,EAAYC,UAAZ,EAAwBC,SAAxB,CAAvC;AACD,GAJI,EAKJK,IALI,CAKC,MAAM;AACV,WAAOF,gBAAgB,CAACH,SAAD,EAAYD,UAAZ,CAAhB,CAAwCK,QAAxC,CAAiDH,SAAjD,CAAP;AACD,GAPI,EAQJI,IARI,CAQEC,MAAD,IAAY;AAChB,WACE,CAACA,MAAD,IAAWE,yBAAyB,CAACP,SAAD,EAAYF,UAAZ,EAAwBC,SAAxB,CADtC;AAGD,GAZI,EAaJK,IAbI,CAaC,MAAM;AACV,WAAOb,QAAQ,CAACQ,SAAD,EAAYC,SAAZ,EAAuBF,UAAvB,CAAR,CAA2CU,MAA3C,CAAkD,GAAlD,CAAP;AACD,GAfI,EAgBJJ,IAhBI,CAgBEK,IAAD,IAAU;AACd,WACE,CAACA,IAAI,CAACC,MAAN,IACAX,SAAS,CAACY,IAAV,CAAeV,mBAAf,EAAoCW,MAApC,CAA2C;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAA3C,CAFF;AAID,GArBI,CAAP;AAsBD;;AAED,SAASP,qBAAT,CAA+BT,SAA/B,EAA0CC,UAA1C,EAAsDC,SAAtD,EAAiE;AAC/D,SAAOG,gBAAgB,CAACH,SAAD,EAAYD,UAAZ,CAAhB,CAAwCgB,WAAxC,CACLpB,YAAY,CAACG,SAAD,CADP,EAEL,UAAUkB,CAAV,EAAa;AACXA,IAAAA,CAAC,CAACC,UAAF;AACAD,IAAAA,CAAC,CAACE,MAAF,CAAS,MAAT;AACAF,IAAAA,CAAC,CAACG,OAAF,CAAU,OAAV;AACAH,IAAAA,CAAC,CAACI,SAAF,CAAY,gBAAZ;AACD,GAPI,CAAP;AASD;;AAED,SAASZ,yBAAT,CAAmCV,SAAnC,EAA8CC,UAA9C,EAA0DC,SAA1D,EAAqE;AACnE,SAAOG,gBAAgB,CAACH,SAAD,EAAYD,UAAZ,CAAhB,CAAwCgB,WAAxC,CACLjB,SADK,EAEL,UAAUkB,CAAV,EAAa;AACXA,IAAAA,CAAC,CAACC,UAAF,CAAa,OAAb,EAAsBI,OAAtB;AACAL,IAAAA,CAAC,CAACG,OAAF,CAAU,WAAV;AACD,GALI,CAAP;AAOD,C,CAED;;;AACA,SAAShB,gBAAT,CAA0BH,SAA1B,EAAqCD,UAArC,EAAiD;AAC/C,SAAOA,UAAU,GACbC,SAAS,CAACsB,MAAV,CAAiBC,UAAjB,CAA4BxB,UAA5B,CADa,GAEbC,SAAS,CAACsB,MAFd;AAGD;;AAEDE,MAAM,CAACC,OAAP,GAAiB;AACf5B,EAAAA,WADe;AAEfM,EAAAA;AAFe,CAAjB","sourcesContent":["const {\n  getTable,\n  getLockTableName,\n  getLockTableNameWithSchema,\n  getTableName,\n} = require('./table-resolver');\n\nfunction ensureTable(tableName, schemaName, trxOrKnex) {\n  const lockTable = getLockTableName(tableName);\n  const lockTableWithSchema = getLockTableNameWithSchema(tableName, schemaName);\n  return getSchemaBuilder(trxOrKnex, schemaName)\n    .hasTable(tableName)\n    .then((exists) => {\n      return !exists && _createMigrationTable(tableName, schemaName, trxOrKnex);\n    })\n    .then(() => {\n      return getSchemaBuilder(trxOrKnex, schemaName).hasTable(lockTable);\n    })\n    .then((exists) => {\n      return (\n        !exists && _createMigrationLockTable(lockTable, schemaName, trxOrKnex)\n      );\n    })\n    .then(() => {\n      return getTable(trxOrKnex, lockTable, schemaName).select('*');\n    })\n    .then((data) => {\n      return (\n        !data.length &&\n        trxOrKnex.into(lockTableWithSchema).insert({ is_locked: 0 })\n      );\n    });\n}\n\nfunction _createMigrationTable(tableName, schemaName, trxOrKnex) {\n  return getSchemaBuilder(trxOrKnex, schemaName).createTable(\n    getTableName(tableName),\n    function (t) {\n      t.increments();\n      t.string('name');\n      t.integer('batch');\n      t.timestamp('migration_time');\n    }\n  );\n}\n\nfunction _createMigrationLockTable(tableName, schemaName, trxOrKnex) {\n  return getSchemaBuilder(trxOrKnex, schemaName).createTable(\n    tableName,\n    function (t) {\n      t.increments('index').primary();\n      t.integer('is_locked');\n    }\n  );\n}\n\n//Get schema-aware schema builder for a given schema nam\nfunction getSchemaBuilder(trxOrKnex, schemaName) {\n  return schemaName\n    ? trxOrKnex.schema.withSchema(schemaName)\n    : trxOrKnex.schema;\n}\n\nmodule.exports = {\n  ensureTable,\n  getSchemaBuilder,\n};\n"]},"metadata":{},"sourceType":"script"}