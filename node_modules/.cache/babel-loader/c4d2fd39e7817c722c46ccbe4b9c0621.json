{"ast":null,"code":"const tail = require('lodash/tail');\n\nconst {\n  isString\n} = require('../../util/is'); // Push a new query onto the compiled \"sequence\" stack,\n// creating a new formatter, returning the compiler.\n\n\nfunction pushQuery(query) {\n  if (!query) return;\n\n  if (isString(query)) {\n    query = {\n      sql: query\n    };\n  }\n\n  if (!query.bindings) {\n    query.bindings = this.bindingsHolder.bindings;\n  }\n\n  this.sequence.push(query);\n  this.formatter = this.client.formatter(this._commonBuilder);\n  this.bindings = [];\n  this.formatter.bindings = this.bindings;\n} // Used in cases where we need to push some additional column specific statements.\n\n\nfunction pushAdditional(fn) {\n  const child = new this.constructor(this.client, this.tableCompiler, this.columnBuilder);\n  fn.call(child, tail(arguments));\n  this.sequence.additional = (this.sequence.additional || []).concat(child.sequence);\n} // Unshift a new query onto the compiled \"sequence\" stack,\n// creating a new formatter, returning the compiler.\n\n\nfunction unshiftQuery(query) {\n  if (!query) return;\n\n  if (isString(query)) {\n    query = {\n      sql: query\n    };\n  }\n\n  if (!query.bindings) {\n    query.bindings = this.bindingsHolder.bindings;\n  }\n\n  this.sequence.unshift(query);\n  this.formatter = this.client.formatter(this._commonBuilder);\n  this.bindings = [];\n  this.formatter.bindings = this.bindings;\n}\n\nmodule.exports = {\n  pushAdditional,\n  pushQuery,\n  unshiftQuery\n};","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/schema/internal/helpers.js"],"names":["tail","require","isString","pushQuery","query","sql","bindings","bindingsHolder","sequence","push","formatter","client","_commonBuilder","pushAdditional","fn","child","constructor","tableCompiler","columnBuilder","call","arguments","additional","concat","unshiftQuery","unshift","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,aAAD,CAApB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeD,OAAO,CAAC,eAAD,CAA5B,C,CAEA;AACA;;;AACA,SAASE,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,MAAI,CAACA,KAAL,EAAY;;AACZ,MAAIF,QAAQ,CAACE,KAAD,CAAZ,EAAqB;AACnBA,IAAAA,KAAK,GAAG;AAAEC,MAAAA,GAAG,EAAED;AAAP,KAAR;AACD;;AACD,MAAI,CAACA,KAAK,CAACE,QAAX,EAAqB;AACnBF,IAAAA,KAAK,CAACE,QAAN,GAAiB,KAAKC,cAAL,CAAoBD,QAArC;AACD;;AACD,OAAKE,QAAL,CAAcC,IAAd,CAAmBL,KAAnB;AAEA,OAAKM,SAAL,GAAiB,KAAKC,MAAL,CAAYD,SAAZ,CAAsB,KAAKE,cAA3B,CAAjB;AACA,OAAKN,QAAL,GAAgB,EAAhB;AACA,OAAKI,SAAL,CAAeJ,QAAf,GAA0B,KAAKA,QAA/B;AACD,C,CAED;;;AACA,SAASO,cAAT,CAAwBC,EAAxB,EAA4B;AAC1B,QAAMC,KAAK,GAAG,IAAI,KAAKC,WAAT,CACZ,KAAKL,MADO,EAEZ,KAAKM,aAFO,EAGZ,KAAKC,aAHO,CAAd;AAKAJ,EAAAA,EAAE,CAACK,IAAH,CAAQJ,KAAR,EAAef,IAAI,CAACoB,SAAD,CAAnB;AACA,OAAKZ,QAAL,CAAca,UAAd,GAA2B,CAAC,KAAKb,QAAL,CAAca,UAAd,IAA4B,EAA7B,EAAiCC,MAAjC,CACzBP,KAAK,CAACP,QADmB,CAA3B;AAGD,C,CAED;AACA;;;AACA,SAASe,YAAT,CAAsBnB,KAAtB,EAA6B;AAC3B,MAAI,CAACA,KAAL,EAAY;;AACZ,MAAIF,QAAQ,CAACE,KAAD,CAAZ,EAAqB;AACnBA,IAAAA,KAAK,GAAG;AAAEC,MAAAA,GAAG,EAAED;AAAP,KAAR;AACD;;AACD,MAAI,CAACA,KAAK,CAACE,QAAX,EAAqB;AACnBF,IAAAA,KAAK,CAACE,QAAN,GAAiB,KAAKC,cAAL,CAAoBD,QAArC;AACD;;AACD,OAAKE,QAAL,CAAcgB,OAAd,CAAsBpB,KAAtB;AAEA,OAAKM,SAAL,GAAiB,KAAKC,MAAL,CAAYD,SAAZ,CAAsB,KAAKE,cAA3B,CAAjB;AACA,OAAKN,QAAL,GAAgB,EAAhB;AACA,OAAKI,SAAL,CAAeJ,QAAf,GAA0B,KAAKA,QAA/B;AACD;;AAEDmB,MAAM,CAACC,OAAP,GAAiB;AACfb,EAAAA,cADe;AAEfV,EAAAA,SAFe;AAGfoB,EAAAA;AAHe,CAAjB","sourcesContent":["const tail = require('lodash/tail');\nconst { isString } = require('../../util/is');\n\n// Push a new query onto the compiled \"sequence\" stack,\n// creating a new formatter, returning the compiler.\nfunction pushQuery(query) {\n  if (!query) return;\n  if (isString(query)) {\n    query = { sql: query };\n  }\n  if (!query.bindings) {\n    query.bindings = this.bindingsHolder.bindings;\n  }\n  this.sequence.push(query);\n\n  this.formatter = this.client.formatter(this._commonBuilder);\n  this.bindings = [];\n  this.formatter.bindings = this.bindings;\n}\n\n// Used in cases where we need to push some additional column specific statements.\nfunction pushAdditional(fn) {\n  const child = new this.constructor(\n    this.client,\n    this.tableCompiler,\n    this.columnBuilder\n  );\n  fn.call(child, tail(arguments));\n  this.sequence.additional = (this.sequence.additional || []).concat(\n    child.sequence\n  );\n}\n\n// Unshift a new query onto the compiled \"sequence\" stack,\n// creating a new formatter, returning the compiler.\nfunction unshiftQuery(query) {\n  if (!query) return;\n  if (isString(query)) {\n    query = { sql: query };\n  }\n  if (!query.bindings) {\n    query.bindings = this.bindingsHolder.bindings;\n  }\n  this.sequence.unshift(query);\n\n  this.formatter = this.client.formatter(this._commonBuilder);\n  this.bindings = [];\n  this.formatter.bindings = this.bindings;\n}\n\nmodule.exports = {\n  pushAdditional,\n  pushQuery,\n  unshiftQuery,\n};\n"]},"metadata":{},"sourceType":"script"}