{"ast":null,"code":"const Transaction = require('../../execution/transaction');\n\nconst debug = require('debug')('knex:tx');\n\nclass Transaction_MSSQL extends Transaction {\n  begin(\n  /** @type {import('tedious').Connection} */\n  conn) {\n    debug('transaction::begin id=%s', this.txid);\n    return new Promise((resolve, reject) => {\n      conn.beginTransaction(err => {\n        if (err) {\n          debug('transaction::begin error id=%s message=%s', this.txid, err.message);\n          return reject(err);\n        }\n\n        resolve();\n      }, this.outerTx ? this.txid : undefined, nameToIsolationLevelEnum(this.isolationLevel));\n    }).then(this._resolver, this._rejecter);\n  }\n\n  savepoint(conn) {\n    debug('transaction::savepoint id=%s', this.txid);\n    return new Promise((resolve, reject) => {\n      conn.saveTransaction(err => {\n        if (err) {\n          debug('transaction::savepoint id=%s message=%s', this.txid, err.message);\n          return reject(err);\n        }\n\n        this.trxClient.emit('query', {\n          __knexUid: this.trxClient.__knexUid,\n          __knexTxId: this.trxClient.__knexTxId,\n          autogenerated: true,\n          sql: this.outerTx ? `SAVE TRANSACTION [${this.txid}]` : `SAVE TRANSACTION`\n        });\n        resolve();\n      }, this.outerTx ? this.txid : undefined);\n    });\n  }\n\n  commit(conn, value) {\n    debug('transaction::commit id=%s', this.txid);\n    return new Promise((resolve, reject) => {\n      conn.commitTransaction(err => {\n        if (err) {\n          debug('transaction::commit error id=%s message=%s', this.txid, err.message);\n          return reject(err);\n        }\n\n        this._completed = true;\n        resolve(value);\n      }, this.outerTx ? this.txid : undefined);\n    }).then(() => this._resolver(value), this._rejecter);\n  }\n\n  release(conn, value) {\n    return this._resolver(value);\n  }\n\n  rollback(conn, error) {\n    this._completed = true;\n    debug('transaction::rollback id=%s', this.txid);\n    return new Promise((_resolve, reject) => {\n      if (!conn.inTransaction) {\n        return reject(error || new Error('Transaction rejected with non-error: undefined'));\n      }\n\n      if (conn.state.name !== 'LoggedIn') {\n        return reject(new Error(\"Can't rollback transaction. There is a request in progress\"));\n      }\n\n      conn.rollbackTransaction(err => {\n        if (err) {\n          debug('transaction::rollback error id=%s message=%s', this.txid, err.message);\n        }\n\n        reject(err || error || new Error('Transaction rejected with non-error: undefined'));\n      }, this.outerTx ? this.txid : undefined);\n    }).catch(err => {\n      if (!error && this.doNotRejectOnRollback) {\n        this._resolver();\n\n        return;\n      }\n\n      if (error) {\n        try {\n          err.originalError = error;\n        } catch (_err) {// This is to handle https://github.com/knex/knex/issues/4128\n        }\n      }\n\n      this._rejecter(err);\n    });\n  }\n\n  rollbackTo(conn, error) {\n    return this.rollback(conn, error).then(() => void this.trxClient.emit('query', {\n      __knexUid: this.trxClient.__knexUid,\n      __knexTxId: this.trxClient.__knexTxId,\n      autogenerated: true,\n      sql: `ROLLBACK TRANSACTION`\n    }));\n  }\n\n}\n\nmodule.exports = Transaction_MSSQL;\n\nfunction nameToIsolationLevelEnum(level) {\n  if (!level) return;\n  level = level.toUpperCase().replace(' ', '_');\n  const knownEnum = isolationEnum[level];\n\n  if (!knownEnum) {\n    throw new Error(`Unknown Isolation level, was expecting one of: ${JSON.stringify(humanReadableKeys)}`);\n  }\n\n  return knownEnum;\n} // Based on: https://github.com/tediousjs/node-mssql/blob/master/lib/isolationlevel.js\n\n\nconst isolationEnum = {\n  READ_UNCOMMITTED: 0x01,\n  READ_COMMITTED: 0x02,\n  REPEATABLE_READ: 0x03,\n  SERIALIZABLE: 0x04,\n  SNAPSHOT: 0x05\n};\nconst humanReadableKeys = Object.keys(isolationEnum).map(key => key.toLowerCase().replace('_', ' '));","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/dialects/mssql/transaction.js"],"names":["Transaction","require","debug","Transaction_MSSQL","begin","conn","txid","Promise","resolve","reject","beginTransaction","err","message","outerTx","undefined","nameToIsolationLevelEnum","isolationLevel","then","_resolver","_rejecter","savepoint","saveTransaction","trxClient","emit","__knexUid","__knexTxId","autogenerated","sql","commit","value","commitTransaction","_completed","release","rollback","error","_resolve","inTransaction","Error","state","name","rollbackTransaction","catch","doNotRejectOnRollback","originalError","_err","rollbackTo","module","exports","level","toUpperCase","replace","knownEnum","isolationEnum","JSON","stringify","humanReadableKeys","READ_UNCOMMITTED","READ_COMMITTED","REPEATABLE_READ","SERIALIZABLE","SNAPSHOT","Object","keys","map","key","toLowerCase"],"mappings":"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","sourcesContent":["const Transaction = require('../../execution/transaction');\nconst debug = require('debug')('knex:tx');\n\nclass Transaction_MSSQL extends Transaction {\n  begin(/** @type {import('tedious').Connection} */ conn) {\n    debug('transaction::begin id=%s', this.txid);\n\n    return new Promise((resolve, reject) => {\n      conn.beginTransaction(\n        (err) => {\n          if (err) {\n            debug(\n              'transaction::begin error id=%s message=%s',\n              this.txid,\n              err.message\n            );\n            return reject(err);\n          }\n          resolve();\n        },\n        this.outerTx ? this.txid : undefined,\n        nameToIsolationLevelEnum(this.isolationLevel)\n      );\n    }).then(this._resolver, this._rejecter);\n  }\n\n  savepoint(conn) {\n    debug('transaction::savepoint id=%s', this.txid);\n\n    return new Promise((resolve, reject) => {\n      conn.saveTransaction(\n        (err) => {\n          if (err) {\n            debug(\n              'transaction::savepoint id=%s message=%s',\n              this.txid,\n              err.message\n            );\n            return reject(err);\n          }\n\n          this.trxClient.emit('query', {\n            __knexUid: this.trxClient.__knexUid,\n            __knexTxId: this.trxClient.__knexTxId,\n            autogenerated: true,\n            sql: this.outerTx\n              ? `SAVE TRANSACTION [${this.txid}]`\n              : `SAVE TRANSACTION`,\n          });\n          resolve();\n        },\n        this.outerTx ? this.txid : undefined\n      );\n    });\n  }\n\n  commit(conn, value) {\n    debug('transaction::commit id=%s', this.txid);\n\n    return new Promise((resolve, reject) => {\n      conn.commitTransaction(\n        (err) => {\n          if (err) {\n            debug(\n              'transaction::commit error id=%s message=%s',\n              this.txid,\n              err.message\n            );\n            return reject(err);\n          }\n\n          this._completed = true;\n          resolve(value);\n        },\n        this.outerTx ? this.txid : undefined\n      );\n    }).then(() => this._resolver(value), this._rejecter);\n  }\n\n  release(conn, value) {\n    return this._resolver(value);\n  }\n\n  rollback(conn, error) {\n    this._completed = true;\n    debug('transaction::rollback id=%s', this.txid);\n\n    return new Promise((_resolve, reject) => {\n      if (!conn.inTransaction) {\n        return reject(\n          error || new Error('Transaction rejected with non-error: undefined')\n        );\n      }\n\n      if (conn.state.name !== 'LoggedIn') {\n        return reject(\n          new Error(\n            \"Can't rollback transaction. There is a request in progress\"\n          )\n        );\n      }\n\n      conn.rollbackTransaction(\n        (err) => {\n          if (err) {\n            debug(\n              'transaction::rollback error id=%s message=%s',\n              this.txid,\n              err.message\n            );\n          }\n\n          reject(\n            err ||\n              error ||\n              new Error('Transaction rejected with non-error: undefined')\n          );\n        },\n        this.outerTx ? this.txid : undefined\n      );\n    }).catch((err) => {\n      if (!error && this.doNotRejectOnRollback) {\n        this._resolver();\n        return;\n      }\n      if (error) {\n        try {\n          err.originalError = error;\n        } catch (_err) {\n          // This is to handle https://github.com/knex/knex/issues/4128\n        }\n      }\n      this._rejecter(err);\n    });\n  }\n\n  rollbackTo(conn, error) {\n    return this.rollback(conn, error).then(\n      () =>\n        void this.trxClient.emit('query', {\n          __knexUid: this.trxClient.__knexUid,\n          __knexTxId: this.trxClient.__knexTxId,\n          autogenerated: true,\n          sql: `ROLLBACK TRANSACTION`,\n        })\n    );\n  }\n}\n\nmodule.exports = Transaction_MSSQL;\n\nfunction nameToIsolationLevelEnum(level) {\n  if (!level) return;\n  level = level.toUpperCase().replace(' ', '_');\n  const knownEnum = isolationEnum[level];\n  if (!knownEnum) {\n    throw new Error(\n      `Unknown Isolation level, was expecting one of: ${JSON.stringify(\n        humanReadableKeys\n      )}`\n    );\n  }\n  return knownEnum;\n}\n\n// Based on: https://github.com/tediousjs/node-mssql/blob/master/lib/isolationlevel.js\nconst isolationEnum = {\n  READ_UNCOMMITTED: 0x01,\n  READ_COMMITTED: 0x02,\n  REPEATABLE_READ: 0x03,\n  SERIALIZABLE: 0x04,\n  SNAPSHOT: 0x05,\n};\nconst humanReadableKeys = Object.keys(isolationEnum).map((key) =>\n  key.toLowerCase().replace('_', ' ')\n);\n"]},"metadata":{},"sourceType":"script"}