{"ast":null,"code":"// Redshift Column Compiler\n// -------\nconst ColumnCompiler_PG = require('../../postgres/schema/pg-columncompiler');\n\nclass ColumnCompiler_Redshift extends ColumnCompiler_PG {\n  constructor() {\n    super(...arguments);\n  } // Types:\n  // ------\n\n\n  bit(column) {\n    return column.length !== false ? `char(${column.length})` : 'char(1)';\n  }\n\n  datetime(without) {\n    return without ? 'timestamp' : 'timestamptz';\n  }\n\n  timestamp(without) {\n    return without ? 'timestamp' : 'timestamptz';\n  } // Modifiers:\n  // ------\n\n\n  comment(comment) {\n    this.pushAdditional(function () {\n      this.pushQuery(`comment on column ${this.tableCompiler.tableName()}.` + this.formatter.wrap(this.args[0]) + ' is ' + (comment ? `'${comment}'` : 'NULL'));\n    }, comment);\n  }\n\n}\n\nColumnCompiler_Redshift.prototype.increments = ({\n  primaryKey = true\n} = {}) => 'integer identity(1,1)' + (primaryKey ? ' primary key' : '') + ' not null';\n\nColumnCompiler_Redshift.prototype.bigincrements = ({\n  primaryKey = true\n} = {}) => 'bigint identity(1,1)' + (primaryKey ? ' primary key' : '') + ' not null';\n\nColumnCompiler_Redshift.prototype.binary = 'varchar(max)';\nColumnCompiler_Redshift.prototype.blob = 'varchar(max)';\nColumnCompiler_Redshift.prototype.enu = 'varchar(255)';\nColumnCompiler_Redshift.prototype.enum = 'varchar(255)';\nColumnCompiler_Redshift.prototype.json = 'varchar(max)';\nColumnCompiler_Redshift.prototype.jsonb = 'varchar(max)';\nColumnCompiler_Redshift.prototype.longblob = 'varchar(max)';\nColumnCompiler_Redshift.prototype.mediumblob = 'varchar(16777218)';\nColumnCompiler_Redshift.prototype.set = 'text';\nColumnCompiler_Redshift.prototype.text = 'varchar(max)';\nColumnCompiler_Redshift.prototype.tinyblob = 'varchar(256)';\nColumnCompiler_Redshift.prototype.uuid = 'char(36)';\nColumnCompiler_Redshift.prototype.varbinary = 'varchar(max)';\nColumnCompiler_Redshift.prototype.bigint = 'bigint';\nColumnCompiler_Redshift.prototype.bool = 'boolean';\nColumnCompiler_Redshift.prototype.double = 'double precision';\nColumnCompiler_Redshift.prototype.floating = 'real';\nColumnCompiler_Redshift.prototype.smallint = 'smallint';\nColumnCompiler_Redshift.prototype.tinyint = 'smallint';\nmodule.exports = ColumnCompiler_Redshift;","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/dialects/redshift/schema/redshift-columncompiler.js"],"names":["ColumnCompiler_PG","require","ColumnCompiler_Redshift","constructor","arguments","bit","column","length","datetime","without","timestamp","comment","pushAdditional","pushQuery","tableCompiler","tableName","formatter","wrap","args","prototype","increments","primaryKey","bigincrements","binary","blob","enu","enum","json","jsonb","longblob","mediumblob","set","text","tinyblob","uuid","varbinary","bigint","bool","double","floating","smallint","tinyint","module","exports"],"mappings":"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","sourcesContent":["// Redshift Column Compiler\n// -------\n\nconst ColumnCompiler_PG = require('../../postgres/schema/pg-columncompiler');\n\nclass ColumnCompiler_Redshift extends ColumnCompiler_PG {\n  constructor() {\n    super(...arguments);\n  }\n\n  // Types:\n  // ------\n\n  bit(column) {\n    return column.length !== false ? `char(${column.length})` : 'char(1)';\n  }\n\n  datetime(without) {\n    return without ? 'timestamp' : 'timestamptz';\n  }\n\n  timestamp(without) {\n    return without ? 'timestamp' : 'timestamptz';\n  }\n\n  // Modifiers:\n  // ------\n  comment(comment) {\n    this.pushAdditional(function () {\n      this.pushQuery(\n        `comment on column ${this.tableCompiler.tableName()}.` +\n          this.formatter.wrap(this.args[0]) +\n          ' is ' +\n          (comment ? `'${comment}'` : 'NULL')\n      );\n    }, comment);\n  }\n}\n\nColumnCompiler_Redshift.prototype.increments = ({ primaryKey = true } = {}) =>\n  'integer identity(1,1)' + (primaryKey ? ' primary key' : '') + ' not null';\nColumnCompiler_Redshift.prototype.bigincrements = ({\n  primaryKey = true,\n} = {}) =>\n  'bigint identity(1,1)' + (primaryKey ? ' primary key' : '') + ' not null';\nColumnCompiler_Redshift.prototype.binary = 'varchar(max)';\nColumnCompiler_Redshift.prototype.blob = 'varchar(max)';\nColumnCompiler_Redshift.prototype.enu = 'varchar(255)';\nColumnCompiler_Redshift.prototype.enum = 'varchar(255)';\nColumnCompiler_Redshift.prototype.json = 'varchar(max)';\nColumnCompiler_Redshift.prototype.jsonb = 'varchar(max)';\nColumnCompiler_Redshift.prototype.longblob = 'varchar(max)';\nColumnCompiler_Redshift.prototype.mediumblob = 'varchar(16777218)';\nColumnCompiler_Redshift.prototype.set = 'text';\nColumnCompiler_Redshift.prototype.text = 'varchar(max)';\nColumnCompiler_Redshift.prototype.tinyblob = 'varchar(256)';\nColumnCompiler_Redshift.prototype.uuid = 'char(36)';\nColumnCompiler_Redshift.prototype.varbinary = 'varchar(max)';\nColumnCompiler_Redshift.prototype.bigint = 'bigint';\nColumnCompiler_Redshift.prototype.bool = 'boolean';\nColumnCompiler_Redshift.prototype.double = 'double precision';\nColumnCompiler_Redshift.prototype.floating = 'real';\nColumnCompiler_Redshift.prototype.smallint = 'smallint';\nColumnCompiler_Redshift.prototype.tinyint = 'smallint';\n\nmodule.exports = ColumnCompiler_Redshift;\n"]},"metadata":{},"sourceType":"script"}