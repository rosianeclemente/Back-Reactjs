{"ast":null,"code":"class KnexTimeoutError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'KnexTimeoutError';\n  }\n\n}\n\nfunction timeout(promise, ms) {\n  return new Promise(function (resolve, reject) {\n    const id = setTimeout(function () {\n      reject(new KnexTimeoutError('operation timed out'));\n    }, ms);\n\n    function wrappedResolve(value) {\n      clearTimeout(id);\n      resolve(value);\n    }\n\n    function wrappedReject(err) {\n      clearTimeout(id);\n      reject(err);\n    }\n\n    promise.then(wrappedResolve, wrappedReject);\n  });\n}\n\nmodule.exports.KnexTimeoutError = KnexTimeoutError;\nmodule.exports.timeout = timeout;","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/util/timeout.js"],"names":["KnexTimeoutError","Error","constructor","message","name","timeout","promise","ms","Promise","resolve","reject","id","setTimeout","wrappedResolve","value","clearTimeout","wrappedReject","err","then","module","exports"],"mappings":"AAAA,MAAMA,gBAAN,SAA+BC,KAA/B,CAAqC;AACnCC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;AACA,SAAKC,IAAL,GAAY,kBAAZ;AACD;;AAJkC;;AAOrC,SAASC,OAAT,CAAiBC,OAAjB,EAA0BC,EAA1B,EAA8B;AAC5B,SAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,UAAMC,EAAE,GAAGC,UAAU,CAAC,YAAY;AAChCF,MAAAA,MAAM,CAAC,IAAIV,gBAAJ,CAAqB,qBAArB,CAAD,CAAN;AACD,KAFoB,EAElBO,EAFkB,CAArB;;AAIA,aAASM,cAAT,CAAwBC,KAAxB,EAA+B;AAC7BC,MAAAA,YAAY,CAACJ,EAAD,CAAZ;AACAF,MAAAA,OAAO,CAACK,KAAD,CAAP;AACD;;AAED,aAASE,aAAT,CAAuBC,GAAvB,EAA4B;AAC1BF,MAAAA,YAAY,CAACJ,EAAD,CAAZ;AACAD,MAAAA,MAAM,CAACO,GAAD,CAAN;AACD;;AAEDX,IAAAA,OAAO,CAACY,IAAR,CAAaL,cAAb,EAA6BG,aAA7B;AACD,GAhBM,CAAP;AAiBD;;AAEDG,MAAM,CAACC,OAAP,CAAepB,gBAAf,GAAkCA,gBAAlC;AACAmB,MAAM,CAACC,OAAP,CAAef,OAAf,GAAyBA,OAAzB","sourcesContent":["class KnexTimeoutError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'KnexTimeoutError';\n  }\n}\n\nfunction timeout(promise, ms) {\n  return new Promise(function (resolve, reject) {\n    const id = setTimeout(function () {\n      reject(new KnexTimeoutError('operation timed out'));\n    }, ms);\n\n    function wrappedResolve(value) {\n      clearTimeout(id);\n      resolve(value);\n    }\n\n    function wrappedReject(err) {\n      clearTimeout(id);\n      reject(err);\n    }\n\n    promise.then(wrappedResolve, wrappedReject);\n  });\n}\n\nmodule.exports.KnexTimeoutError = KnexTimeoutError;\nmodule.exports.timeout = timeout;\n"]},"metadata":{},"sourceType":"script"}