{"ast":null,"code":"// PostgreSQL Column Compiler\n// -------\nconst ColumnCompiler = require('../../../schema/columncompiler');\n\nconst {\n  isObject\n} = require('../../../util/is');\n\nconst {\n  toNumber\n} = require('../../../util/helpers');\n\nconst commentEscapeRegex = /(?<!')'(?!')/g;\n\nclass ColumnCompiler_PG extends ColumnCompiler {\n  constructor(client, tableCompiler, columnBuilder) {\n    super(client, tableCompiler, columnBuilder);\n    this.modifiers = ['nullable', 'defaultTo', 'comment'];\n  } // Types\n  // ------\n\n\n  bit(column) {\n    return column.length !== false ? `bit(${column.length})` : 'bit';\n  } // Create the column definition for an enum type.\n  // Using method \"2\" here: http://stackoverflow.com/a/10984951/525714\n\n\n  enu(allowed, options) {\n    options = options || {};\n    const values = options.useNative && options.existingType ? undefined : allowed.join(\"', '\");\n\n    if (options.useNative) {\n      let enumName = '';\n      const schemaName = options.schemaName || this.tableCompiler.schemaNameRaw;\n\n      if (schemaName) {\n        enumName += `\"${schemaName}\".`;\n      }\n\n      enumName += `\"${options.enumName}\"`;\n\n      if (!options.existingType) {\n        this.tableCompiler.unshiftQuery(`create type ${enumName} as enum ('${values}')`);\n      }\n\n      return enumName;\n    }\n\n    return `text check (${this.formatter.wrap(this.args[0])} in ('${values}'))`;\n  }\n\n  decimal(precision, scale) {\n    if (precision === null) return 'decimal';\n    return `decimal(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n\n  json(jsonb) {\n    if (jsonb) this.client.logger.deprecate('json(true)', 'jsonb()');\n    return jsonColumn(this.client, jsonb);\n  }\n\n  jsonb() {\n    return jsonColumn(this.client, true);\n  }\n\n  datetime(withoutTz = false, precision) {\n    let useTz;\n\n    if (isObject(withoutTz)) {\n      ({\n        useTz,\n        precision\n      } = withoutTz);\n    } else {\n      useTz = !withoutTz;\n    }\n\n    return `${useTz ? 'timestamptz' : 'timestamp'}${precision ? '(' + precision + ')' : ''}`;\n  }\n\n  timestamp(withoutTz = false, precision) {\n    let useTz;\n\n    if (isObject(withoutTz)) {\n      ({\n        useTz,\n        precision\n      } = withoutTz);\n    } else {\n      useTz = !withoutTz;\n    }\n\n    return `${useTz ? 'timestamptz' : 'timestamp'}${precision ? '(' + precision + ')' : ''}`;\n  } // Modifiers:\n  // ------\n\n\n  comment(comment) {\n    const columnName = this.args[0] || this.defaults('columnName');\n    const escapedComment = comment ? `'${comment.replace(commentEscapeRegex, \"''\")}'` : 'NULL';\n    this.pushAdditional(function () {\n      this.pushQuery(`comment on column ${this.tableCompiler.tableName()}.` + this.formatter.wrap(columnName) + ` is ${escapedComment}`);\n    }, comment);\n  }\n\n}\n\nColumnCompiler_PG.prototype.bigincrements = ({\n  primaryKey = true\n} = {}) => 'bigserial' + (primaryKey ? ' primary key' : '');\n\nColumnCompiler_PG.prototype.increments = ({\n  primaryKey = true\n} = {}) => 'serial' + (primaryKey ? ' primary key' : '');\n\nColumnCompiler_PG.prototype.bigint = 'bigint';\nColumnCompiler_PG.prototype.binary = 'bytea';\nColumnCompiler_PG.prototype.bool = 'boolean';\nColumnCompiler_PG.prototype.double = 'double precision';\nColumnCompiler_PG.prototype.floating = 'real';\nColumnCompiler_PG.prototype.smallint = 'smallint';\nColumnCompiler_PG.prototype.tinyint = 'smallint';\nColumnCompiler_PG.prototype.uuid = 'uuid';\n\nfunction jsonColumn(client, jsonb) {\n  if (!client.version || parseFloat(client.version) >= 9.2) return jsonb ? 'jsonb' : 'json';\n  return 'text';\n}\n\nmodule.exports = ColumnCompiler_PG;","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/dialects/postgres/schema/pg-columncompiler.js"],"names":["ColumnCompiler","require","isObject","toNumber","commentEscapeRegex","ColumnCompiler_PG","constructor","client","tableCompiler","columnBuilder","modifiers","bit","column","length","enu","allowed","options","values","useNative","existingType","undefined","join","enumName","schemaName","schemaNameRaw","unshiftQuery","formatter","wrap","args","decimal","precision","scale","json","jsonb","logger","deprecate","jsonColumn","datetime","withoutTz","useTz","timestamp","comment","columnName","defaults","escapedComment","replace","pushAdditional","pushQuery","tableName","prototype","bigincrements","primaryKey","increments","bigint","binary","bool","double","floating","smallint","tinyint","uuid","version","parseFloat","module","exports"],"mappings":"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","sourcesContent":["// PostgreSQL Column Compiler\n// -------\n\nconst ColumnCompiler = require('../../../schema/columncompiler');\nconst { isObject } = require('../../../util/is');\nconst { toNumber } = require('../../../util/helpers');\nconst commentEscapeRegex = /(?<!')'(?!')/g;\n\nclass ColumnCompiler_PG extends ColumnCompiler {\n  constructor(client, tableCompiler, columnBuilder) {\n    super(client, tableCompiler, columnBuilder);\n    this.modifiers = ['nullable', 'defaultTo', 'comment'];\n  }\n\n  // Types\n  // ------\n\n  bit(column) {\n    return column.length !== false ? `bit(${column.length})` : 'bit';\n  }\n\n  // Create the column definition for an enum type.\n  // Using method \"2\" here: http://stackoverflow.com/a/10984951/525714\n  enu(allowed, options) {\n    options = options || {};\n\n    const values =\n      options.useNative && options.existingType\n        ? undefined\n        : allowed.join(\"', '\");\n\n    if (options.useNative) {\n      let enumName = '';\n      const schemaName = options.schemaName || this.tableCompiler.schemaNameRaw;\n\n      if (schemaName) {\n        enumName += `\"${schemaName}\".`;\n      }\n\n      enumName += `\"${options.enumName}\"`;\n\n      if (!options.existingType) {\n        this.tableCompiler.unshiftQuery(\n          `create type ${enumName} as enum ('${values}')`\n        );\n      }\n\n      return enumName;\n    }\n    return `text check (${this.formatter.wrap(this.args[0])} in ('${values}'))`;\n  }\n\n  decimal(precision, scale) {\n    if (precision === null) return 'decimal';\n    return `decimal(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n\n  json(jsonb) {\n    if (jsonb) this.client.logger.deprecate('json(true)', 'jsonb()');\n    return jsonColumn(this.client, jsonb);\n  }\n\n  jsonb() {\n    return jsonColumn(this.client, true);\n  }\n\n  datetime(withoutTz = false, precision) {\n    let useTz;\n    if (isObject(withoutTz)) {\n      ({ useTz, precision } = withoutTz);\n    } else {\n      useTz = !withoutTz;\n    }\n\n    return `${useTz ? 'timestamptz' : 'timestamp'}${\n      precision ? '(' + precision + ')' : ''\n    }`;\n  }\n\n  timestamp(withoutTz = false, precision) {\n    let useTz;\n    if (isObject(withoutTz)) {\n      ({ useTz, precision } = withoutTz);\n    } else {\n      useTz = !withoutTz;\n    }\n\n    return `${useTz ? 'timestamptz' : 'timestamp'}${\n      precision ? '(' + precision + ')' : ''\n    }`;\n  }\n\n  // Modifiers:\n  // ------\n  comment(comment) {\n    const columnName = this.args[0] || this.defaults('columnName');\n    const escapedComment = comment\n      ? `'${comment.replace(commentEscapeRegex, \"''\")}'`\n      : 'NULL';\n\n    this.pushAdditional(function () {\n      this.pushQuery(\n        `comment on column ${this.tableCompiler.tableName()}.` +\n          this.formatter.wrap(columnName) +\n          ` is ${escapedComment}`\n      );\n    }, comment);\n  }\n}\n\nColumnCompiler_PG.prototype.bigincrements = ({ primaryKey = true } = {}) =>\n  'bigserial' + (primaryKey ? ' primary key' : '');\nColumnCompiler_PG.prototype.increments = ({ primaryKey = true } = {}) =>\n  'serial' + (primaryKey ? ' primary key' : '');\nColumnCompiler_PG.prototype.bigint = 'bigint';\nColumnCompiler_PG.prototype.binary = 'bytea';\nColumnCompiler_PG.prototype.bool = 'boolean';\nColumnCompiler_PG.prototype.double = 'double precision';\nColumnCompiler_PG.prototype.floating = 'real';\nColumnCompiler_PG.prototype.smallint = 'smallint';\nColumnCompiler_PG.prototype.tinyint = 'smallint';\nColumnCompiler_PG.prototype.uuid = 'uuid';\n\nfunction jsonColumn(client, jsonb) {\n  if (!client.version || parseFloat(client.version) >= 9.2)\n    return jsonb ? 'jsonb' : 'json';\n  return 'text';\n}\n\nmodule.exports = ColumnCompiler_PG;\n"]},"metadata":{},"sourceType":"script"}