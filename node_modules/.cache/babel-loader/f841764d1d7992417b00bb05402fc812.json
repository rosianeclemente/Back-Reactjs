{"ast":null,"code":"const {\n  Pool,\n  TimeoutError\n} = require('tarn');\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst {\n  promisify\n} = require('util');\n\nconst {\n  makeEscape\n} = require('./util/string');\n\nconst cloneDeep = require('lodash/cloneDeep');\n\nconst defaults = require('lodash/defaults');\n\nconst uniqueId = require('lodash/uniqueId');\n\nconst Runner = require('./execution/runner');\n\nconst Transaction = require('./execution/transaction');\n\nconst {\n  executeQuery,\n  enrichQueryObject\n} = require('./execution/internal/query-executioner');\n\nconst QueryBuilder = require('./query/querybuilder');\n\nconst QueryCompiler = require('./query/querycompiler');\n\nconst SchemaBuilder = require('./schema/builder');\n\nconst SchemaCompiler = require('./schema/compiler');\n\nconst TableBuilder = require('./schema/tablebuilder');\n\nconst TableCompiler = require('./schema/tablecompiler');\n\nconst ColumnBuilder = require('./schema/columnbuilder');\n\nconst ColumnCompiler = require('./schema/columncompiler');\n\nconst {\n  KnexTimeoutError\n} = require('./util/timeout');\n\nconst {\n  outputQuery,\n  unwrapRaw\n} = require('./formatter/wrappingFormatter');\n\nconst {\n  compileCallback\n} = require('./formatter/formatterUtils');\n\nconst Raw = require('./raw');\n\nconst Ref = require('./ref');\n\nconst Formatter = require('./formatter');\n\nconst Logger = require('./logger');\n\nconst {\n  POOL_CONFIG_OPTIONS\n} = require('./constants');\n\nconst debug = require('debug')('knex:client'); // The base client provides the general structure\n// for a dialect specific client object.\n\n\nclass Client extends EventEmitter {\n  constructor(config = {}) {\n    super();\n    this.config = config;\n    this.logger = new Logger(config); //Client is a required field, so throw error if it's not supplied.\n    //If 'this.dialect' is set, then this is a 'super()' call, in which case\n    //'client' does not have to be set as it's already assigned on the client prototype.\n\n    if (this.dialect && !this.config.client) {\n      this.logger.warn(`Using 'this.dialect' to identify the client is deprecated and support for it will be removed in the future. Please use configuration option 'client' instead.`);\n    }\n\n    const dbClient = this.config.client || this.dialect;\n\n    if (!dbClient) {\n      throw new Error(`knex: Required configuration option 'client' is missing.`);\n    }\n\n    if (config.version) {\n      this.version = config.version;\n    }\n\n    if (config.connection && config.connection instanceof Function) {\n      this.connectionConfigProvider = config.connection;\n\n      this.connectionConfigExpirationChecker = () => true; // causes the provider to be called on first use\n\n    } else {\n      this.connectionSettings = cloneDeep(config.connection || {});\n      this.connectionConfigExpirationChecker = null;\n    }\n\n    if (this.driverName && config.connection) {\n      this.initializeDriver();\n\n      if (!config.pool || config.pool && config.pool.max !== 0) {\n        this.initializePool(config);\n      }\n    }\n\n    this.valueForUndefined = this.raw('DEFAULT');\n\n    if (config.useNullAsDefault) {\n      this.valueForUndefined = null;\n    }\n  }\n\n  formatter(builder) {\n    return new Formatter(this, builder);\n  }\n\n  queryBuilder() {\n    return new QueryBuilder(this);\n  }\n\n  queryCompiler(builder, formatter) {\n    return new QueryCompiler(this, builder, formatter);\n  }\n\n  schemaBuilder() {\n    return new SchemaBuilder(this);\n  }\n\n  schemaCompiler(builder) {\n    return new SchemaCompiler(this, builder);\n  }\n\n  tableBuilder(type, tableName, fn) {\n    return new TableBuilder(this, type, tableName, fn);\n  }\n\n  tableCompiler(tableBuilder) {\n    return new TableCompiler(this, tableBuilder);\n  }\n\n  columnBuilder(tableBuilder, type, args) {\n    return new ColumnBuilder(this, tableBuilder, type, args);\n  }\n\n  columnCompiler(tableBuilder, columnBuilder) {\n    return new ColumnCompiler(this, tableBuilder, columnBuilder);\n  }\n\n  runner(builder) {\n    return new Runner(this, builder);\n  }\n\n  transaction(container, config, outerTx) {\n    return new Transaction(this, container, config, outerTx);\n  }\n\n  raw() {\n    return new Raw(this).set(...arguments);\n  }\n\n  ref() {\n    return new Ref(this, ...arguments);\n  }\n\n  query(connection, queryParam) {\n    const queryObject = enrichQueryObject(connection, queryParam, this);\n    return executeQuery(connection, queryObject, this);\n  }\n\n  stream(connection, queryParam, stream, options) {\n    const queryObject = enrichQueryObject(connection, queryParam, this);\n    return this._stream(connection, queryObject, stream, options);\n  }\n\n  prepBindings(bindings) {\n    return bindings;\n  }\n\n  positionBindings(sql) {\n    return sql;\n  }\n\n  postProcessResponse(resp, queryContext) {\n    if (this.config.postProcessResponse) {\n      return this.config.postProcessResponse(resp, queryContext);\n    }\n\n    return resp;\n  }\n\n  wrapIdentifier(value, queryContext) {\n    return this.customWrapIdentifier(value, this.wrapIdentifierImpl, queryContext);\n  }\n\n  customWrapIdentifier(value, origImpl, queryContext) {\n    if (this.config.wrapIdentifier) {\n      return this.config.wrapIdentifier(value, origImpl, queryContext);\n    }\n\n    return origImpl(value);\n  }\n\n  wrapIdentifierImpl(value) {\n    return value !== '*' ? `\"${value.replace(/\"/g, '\"\"')}\"` : '*';\n  }\n\n  initializeDriver() {\n    try {\n      this.driver = this._driver();\n    } catch (e) {\n      const message = `Knex: run\\n$ npm install ${this.driverName} --save`;\n      this.logger.error(`${message}\\n${e.message}\\n${e.stack}`);\n      throw new Error(`${message}\\n${e.message}`);\n    }\n  }\n\n  poolDefaults() {\n    return {\n      min: 2,\n      max: 10,\n      propagateCreateError: true\n    };\n  }\n\n  getPoolSettings(poolConfig) {\n    poolConfig = defaults({}, poolConfig, this.poolDefaults());\n    POOL_CONFIG_OPTIONS.forEach(option => {\n      if (option in poolConfig) {\n        this.logger.warn([`Pool config option \"${option}\" is no longer supported.`, `See https://github.com/Vincit/tarn.js for possible pool config options.`].join(' '));\n      }\n    });\n    const timeouts = [this.config.acquireConnectionTimeout || 60000, poolConfig.acquireTimeoutMillis].filter(timeout => timeout !== undefined); // acquire connection timeout can be set on config or config.pool\n    // choose the smallest, positive timeout setting and set on poolConfig\n\n    poolConfig.acquireTimeoutMillis = Math.min(...timeouts);\n\n    const updatePoolConnectionSettingsFromProvider = async () => {\n      if (!this.connectionConfigProvider) {\n        return; // static configuration, nothing to update\n      }\n\n      if (!this.connectionConfigExpirationChecker || !this.connectionConfigExpirationChecker()) {\n        return; // not expired, reuse existing connection\n      }\n\n      const providerResult = await this.connectionConfigProvider();\n\n      if (providerResult.expirationChecker) {\n        this.connectionConfigExpirationChecker = providerResult.expirationChecker;\n        delete providerResult.expirationChecker; // MySQL2 driver warns on receiving extra properties\n      } else {\n        this.connectionConfigExpirationChecker = null;\n      }\n\n      this.connectionSettings = providerResult;\n    };\n\n    return Object.assign(poolConfig, {\n      create: async () => {\n        await updatePoolConnectionSettingsFromProvider();\n        const connection = await this.acquireRawConnection();\n        connection.__knexUid = uniqueId('__knexUid');\n\n        if (poolConfig.afterCreate) {\n          await promisify(poolConfig.afterCreate)(connection);\n        }\n\n        return connection;\n      },\n      destroy: connection => {\n        if (connection !== void 0) {\n          return this.destroyRawConnection(connection);\n        }\n      },\n      validate: connection => {\n        if (connection.__knex__disposed) {\n          this.logger.warn(`Connection Error: ${connection.__knex__disposed}`);\n          return false;\n        }\n\n        return this.validateConnection(connection);\n      }\n    });\n  }\n\n  initializePool(config = this.config) {\n    if (this.pool) {\n      this.logger.warn('The pool has already been initialized');\n      return;\n    }\n\n    const tarnPoolConfig = { ...this.getPoolSettings(config.pool)\n    }; // afterCreate is an internal knex param, tarn.js does not support it\n\n    if (tarnPoolConfig.afterCreate) {\n      delete tarnPoolConfig.afterCreate;\n    }\n\n    this.pool = new Pool(tarnPoolConfig);\n  }\n\n  validateConnection(connection) {\n    return true;\n  } // Acquire a connection from the pool.\n\n\n  async acquireConnection() {\n    if (!this.pool) {\n      throw new Error('Unable to acquire a connection');\n    }\n\n    try {\n      const connection = await this.pool.acquire().promise;\n      debug('acquired connection from pool: %s', connection.__knexUid);\n      return connection;\n    } catch (error) {\n      let convertedError = error;\n\n      if (error instanceof TimeoutError) {\n        convertedError = new KnexTimeoutError('Knex: Timeout acquiring a connection. The pool is probably full. ' + 'Are you missing a .transacting(trx) call?');\n      }\n\n      throw convertedError;\n    }\n  } // Releases a connection back to the connection pool,\n  // returning a promise resolved when the connection is released.\n\n\n  releaseConnection(connection) {\n    debug('releasing connection to pool: %s', connection.__knexUid);\n    const didRelease = this.pool.release(connection);\n\n    if (!didRelease) {\n      debug('pool refused connection: %s', connection.__knexUid);\n    }\n\n    return Promise.resolve();\n  } // Destroy the current connection pool for the client.\n\n\n  async destroy(callback) {\n    try {\n      if (this.pool && this.pool.destroy) {\n        await this.pool.destroy();\n      }\n\n      this.pool = undefined;\n\n      if (typeof callback === 'function') {\n        callback();\n      }\n    } catch (err) {\n      if (typeof callback === 'function') {\n        return callback(err);\n      }\n\n      throw err;\n    }\n  } // Return the database being used by this client.\n\n\n  database() {\n    return this.connectionSettings.database;\n  }\n\n  toString() {\n    return '[object KnexClient]';\n  }\n\n  assertCanCancelQuery() {\n    if (!this.canCancelQuery) {\n      throw new Error('Query cancelling not supported for this dialect');\n    }\n  }\n\n  cancelQuery() {\n    throw new Error('Query cancelling not supported for this dialect');\n  } // Formatter part\n\n\n  alias(first, second) {\n    return first + ' as ' + second;\n  } // Checks whether a value is a function... if it is, we compile it\n  // otherwise we check whether it's a raw\n\n\n  parameter(value, builder, bindingsHolder) {\n    if (typeof value === 'function') {\n      return outputQuery(compileCallback(value, undefined, this, bindingsHolder), true, builder, this);\n    }\n\n    return unwrapRaw(value, true, builder, this, bindingsHolder) || '?';\n  } // Turns a list of values into a list of ?'s, joining them with commas unless\n  // a \"joining\" value is specified (e.g. ' and ')\n\n\n  parameterize(values, notSetValue, builder, bindingsHolder) {\n    if (typeof values === 'function') return this.parameter(values, builder, bindingsHolder);\n    values = Array.isArray(values) ? values : [values];\n    let str = '',\n        i = -1;\n\n    while (++i < values.length) {\n      if (i > 0) str += ', ';\n      str += this.parameter(values[i] === undefined ? notSetValue : values[i], builder, bindingsHolder);\n    }\n\n    return str;\n  } // Formats `values` into a parenthesized list of parameters for a `VALUES`\n  // clause.\n  //\n  // [1, 2]                  -> '(?, ?)'\n  // [[1, 2], [3, 4]]        -> '((?, ?), (?, ?))'\n  // knex('table')           -> '(select * from \"table\")'\n  // knex.raw('select ?', 1) -> '(select ?)'\n  //\n\n\n  values(values, builder, bindingsHolder) {\n    if (Array.isArray(values)) {\n      if (Array.isArray(values[0])) {\n        return `(${values.map(value => `(${this.parameterize(value, undefined, builder, bindingsHolder)})`).join(', ')})`;\n      }\n\n      return `(${this.parameterize(values, undefined, builder, bindingsHolder)})`;\n    }\n\n    if (values && values.isRawInstance) {\n      return `(${this.parameter(values, builder, bindingsHolder)})`;\n    }\n\n    return this.parameter(values, builder, bindingsHolder);\n  }\n\n}\n\nObject.assign(Client.prototype, {\n  _escapeBinding: makeEscape({\n    escapeString(str) {\n      return `'${str.replace(/'/g, \"''\")}'`;\n    }\n\n  }),\n  canCancelQuery: false\n});\nmodule.exports = Client;","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/client.js"],"names":["Pool","TimeoutError","require","EventEmitter","promisify","makeEscape","cloneDeep","defaults","uniqueId","Runner","Transaction","executeQuery","enrichQueryObject","QueryBuilder","QueryCompiler","SchemaBuilder","SchemaCompiler","TableBuilder","TableCompiler","ColumnBuilder","ColumnCompiler","KnexTimeoutError","outputQuery","unwrapRaw","compileCallback","Raw","Ref","Formatter","Logger","POOL_CONFIG_OPTIONS","debug","Client","constructor","config","logger","dialect","client","warn","dbClient","Error","version","connection","Function","connectionConfigProvider","connectionConfigExpirationChecker","connectionSettings","driverName","initializeDriver","pool","max","initializePool","valueForUndefined","raw","useNullAsDefault","formatter","builder","queryBuilder","queryCompiler","schemaBuilder","schemaCompiler","tableBuilder","type","tableName","fn","tableCompiler","columnBuilder","args","columnCompiler","runner","transaction","container","outerTx","set","arguments","ref","query","queryParam","queryObject","stream","options","_stream","prepBindings","bindings","positionBindings","sql","postProcessResponse","resp","queryContext","wrapIdentifier","value","customWrapIdentifier","wrapIdentifierImpl","origImpl","replace","driver","_driver","e","message","error","stack","poolDefaults","min","propagateCreateError","getPoolSettings","poolConfig","forEach","option","join","timeouts","acquireConnectionTimeout","acquireTimeoutMillis","filter","timeout","undefined","Math","updatePoolConnectionSettingsFromProvider","providerResult","expirationChecker","Object","assign","create","acquireRawConnection","__knexUid","afterCreate","destroy","destroyRawConnection","validate","__knex__disposed","validateConnection","tarnPoolConfig","acquireConnection","acquire","promise","convertedError","releaseConnection","didRelease","release","Promise","resolve","callback","err","database","toString","assertCanCancelQuery","canCancelQuery","cancelQuery","alias","first","second","parameter","bindingsHolder","parameterize","values","notSetValue","Array","isArray","str","i","length","map","isRawInstance","prototype","_escapeBinding","escapeString","module","exports"],"mappings":"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","sourcesContent":["const { Pool, TimeoutError } = require('tarn');\nconst { EventEmitter } = require('events');\nconst { promisify } = require('util');\nconst { makeEscape } = require('./util/string');\nconst cloneDeep = require('lodash/cloneDeep');\nconst defaults = require('lodash/defaults');\nconst uniqueId = require('lodash/uniqueId');\n\nconst Runner = require('./execution/runner');\nconst Transaction = require('./execution/transaction');\nconst {\n  executeQuery,\n  enrichQueryObject,\n} = require('./execution/internal/query-executioner');\nconst QueryBuilder = require('./query/querybuilder');\nconst QueryCompiler = require('./query/querycompiler');\nconst SchemaBuilder = require('./schema/builder');\nconst SchemaCompiler = require('./schema/compiler');\nconst TableBuilder = require('./schema/tablebuilder');\nconst TableCompiler = require('./schema/tablecompiler');\nconst ColumnBuilder = require('./schema/columnbuilder');\nconst ColumnCompiler = require('./schema/columncompiler');\nconst { KnexTimeoutError } = require('./util/timeout');\nconst { outputQuery, unwrapRaw } = require('./formatter/wrappingFormatter');\nconst { compileCallback } = require('./formatter/formatterUtils');\nconst Raw = require('./raw');\nconst Ref = require('./ref');\nconst Formatter = require('./formatter');\nconst Logger = require('./logger');\nconst { POOL_CONFIG_OPTIONS } = require('./constants');\n\nconst debug = require('debug')('knex:client');\n\n// The base client provides the general structure\n// for a dialect specific client object.\n\nclass Client extends EventEmitter {\n  constructor(config = {}) {\n    super();\n    this.config = config;\n    this.logger = new Logger(config);\n\n    //Client is a required field, so throw error if it's not supplied.\n    //If 'this.dialect' is set, then this is a 'super()' call, in which case\n    //'client' does not have to be set as it's already assigned on the client prototype.\n\n    if (this.dialect && !this.config.client) {\n      this.logger.warn(\n        `Using 'this.dialect' to identify the client is deprecated and support for it will be removed in the future. Please use configuration option 'client' instead.`\n      );\n    }\n    const dbClient = this.config.client || this.dialect;\n    if (!dbClient) {\n      throw new Error(\n        `knex: Required configuration option 'client' is missing.`\n      );\n    }\n\n    if (config.version) {\n      this.version = config.version;\n    }\n\n    if (config.connection && config.connection instanceof Function) {\n      this.connectionConfigProvider = config.connection;\n      this.connectionConfigExpirationChecker = () => true; // causes the provider to be called on first use\n    } else {\n      this.connectionSettings = cloneDeep(config.connection || {});\n      this.connectionConfigExpirationChecker = null;\n    }\n    if (this.driverName && config.connection) {\n      this.initializeDriver();\n      if (!config.pool || (config.pool && config.pool.max !== 0)) {\n        this.initializePool(config);\n      }\n    }\n    this.valueForUndefined = this.raw('DEFAULT');\n    if (config.useNullAsDefault) {\n      this.valueForUndefined = null;\n    }\n  }\n  formatter(builder) {\n    return new Formatter(this, builder);\n  }\n\n  queryBuilder() {\n    return new QueryBuilder(this);\n  }\n\n  queryCompiler(builder, formatter) {\n    return new QueryCompiler(this, builder, formatter);\n  }\n\n  schemaBuilder() {\n    return new SchemaBuilder(this);\n  }\n\n  schemaCompiler(builder) {\n    return new SchemaCompiler(this, builder);\n  }\n\n  tableBuilder(type, tableName, fn) {\n    return new TableBuilder(this, type, tableName, fn);\n  }\n\n  tableCompiler(tableBuilder) {\n    return new TableCompiler(this, tableBuilder);\n  }\n\n  columnBuilder(tableBuilder, type, args) {\n    return new ColumnBuilder(this, tableBuilder, type, args);\n  }\n\n  columnCompiler(tableBuilder, columnBuilder) {\n    return new ColumnCompiler(this, tableBuilder, columnBuilder);\n  }\n\n  runner(builder) {\n    return new Runner(this, builder);\n  }\n\n  transaction(container, config, outerTx) {\n    return new Transaction(this, container, config, outerTx);\n  }\n\n  raw() {\n    return new Raw(this).set(...arguments);\n  }\n\n  ref() {\n    return new Ref(this, ...arguments);\n  }\n  query(connection, queryParam) {\n    const queryObject = enrichQueryObject(connection, queryParam, this);\n    return executeQuery(connection, queryObject, this);\n  }\n\n  stream(connection, queryParam, stream, options) {\n    const queryObject = enrichQueryObject(connection, queryParam, this);\n    return this._stream(connection, queryObject, stream, options);\n  }\n\n  prepBindings(bindings) {\n    return bindings;\n  }\n\n  positionBindings(sql) {\n    return sql;\n  }\n\n  postProcessResponse(resp, queryContext) {\n    if (this.config.postProcessResponse) {\n      return this.config.postProcessResponse(resp, queryContext);\n    }\n    return resp;\n  }\n\n  wrapIdentifier(value, queryContext) {\n    return this.customWrapIdentifier(\n      value,\n      this.wrapIdentifierImpl,\n      queryContext\n    );\n  }\n\n  customWrapIdentifier(value, origImpl, queryContext) {\n    if (this.config.wrapIdentifier) {\n      return this.config.wrapIdentifier(value, origImpl, queryContext);\n    }\n    return origImpl(value);\n  }\n\n  wrapIdentifierImpl(value) {\n    return value !== '*' ? `\"${value.replace(/\"/g, '\"\"')}\"` : '*';\n  }\n\n  initializeDriver() {\n    try {\n      this.driver = this._driver();\n    } catch (e) {\n      const message = `Knex: run\\n$ npm install ${this.driverName} --save`;\n      this.logger.error(`${message}\\n${e.message}\\n${e.stack}`);\n      throw new Error(`${message}\\n${e.message}`);\n    }\n  }\n\n  poolDefaults() {\n    return { min: 2, max: 10, propagateCreateError: true };\n  }\n\n  getPoolSettings(poolConfig) {\n    poolConfig = defaults({}, poolConfig, this.poolDefaults());\n\n    POOL_CONFIG_OPTIONS.forEach((option) => {\n      if (option in poolConfig) {\n        this.logger.warn(\n          [\n            `Pool config option \"${option}\" is no longer supported.`,\n            `See https://github.com/Vincit/tarn.js for possible pool config options.`,\n          ].join(' ')\n        );\n      }\n    });\n\n    const timeouts = [\n      this.config.acquireConnectionTimeout || 60000,\n      poolConfig.acquireTimeoutMillis,\n    ].filter((timeout) => timeout !== undefined);\n\n    // acquire connection timeout can be set on config or config.pool\n    // choose the smallest, positive timeout setting and set on poolConfig\n    poolConfig.acquireTimeoutMillis = Math.min(...timeouts);\n\n    const updatePoolConnectionSettingsFromProvider = async () => {\n      if (!this.connectionConfigProvider) {\n        return; // static configuration, nothing to update\n      }\n      if (\n        !this.connectionConfigExpirationChecker ||\n        !this.connectionConfigExpirationChecker()\n      ) {\n        return; // not expired, reuse existing connection\n      }\n      const providerResult = await this.connectionConfigProvider();\n      if (providerResult.expirationChecker) {\n        this.connectionConfigExpirationChecker =\n          providerResult.expirationChecker;\n        delete providerResult.expirationChecker; // MySQL2 driver warns on receiving extra properties\n      } else {\n        this.connectionConfigExpirationChecker = null;\n      }\n      this.connectionSettings = providerResult;\n    };\n\n    return Object.assign(poolConfig, {\n      create: async () => {\n        await updatePoolConnectionSettingsFromProvider();\n        const connection = await this.acquireRawConnection();\n        connection.__knexUid = uniqueId('__knexUid');\n        if (poolConfig.afterCreate) {\n          await promisify(poolConfig.afterCreate)(connection);\n        }\n        return connection;\n      },\n\n      destroy: (connection) => {\n        if (connection !== void 0) {\n          return this.destroyRawConnection(connection);\n        }\n      },\n\n      validate: (connection) => {\n        if (connection.__knex__disposed) {\n          this.logger.warn(`Connection Error: ${connection.__knex__disposed}`);\n          return false;\n        }\n\n        return this.validateConnection(connection);\n      },\n    });\n  }\n\n  initializePool(config = this.config) {\n    if (this.pool) {\n      this.logger.warn('The pool has already been initialized');\n      return;\n    }\n\n    const tarnPoolConfig = {\n      ...this.getPoolSettings(config.pool),\n    };\n    // afterCreate is an internal knex param, tarn.js does not support it\n    if (tarnPoolConfig.afterCreate) {\n      delete tarnPoolConfig.afterCreate;\n    }\n\n    this.pool = new Pool(tarnPoolConfig);\n  }\n\n  validateConnection(connection) {\n    return true;\n  }\n\n  // Acquire a connection from the pool.\n  async acquireConnection() {\n    if (!this.pool) {\n      throw new Error('Unable to acquire a connection');\n    }\n    try {\n      const connection = await this.pool.acquire().promise;\n      debug('acquired connection from pool: %s', connection.__knexUid);\n      return connection;\n    } catch (error) {\n      let convertedError = error;\n      if (error instanceof TimeoutError) {\n        convertedError = new KnexTimeoutError(\n          'Knex: Timeout acquiring a connection. The pool is probably full. ' +\n            'Are you missing a .transacting(trx) call?'\n        );\n      }\n      throw convertedError;\n    }\n  }\n\n  // Releases a connection back to the connection pool,\n  // returning a promise resolved when the connection is released.\n  releaseConnection(connection) {\n    debug('releasing connection to pool: %s', connection.__knexUid);\n    const didRelease = this.pool.release(connection);\n\n    if (!didRelease) {\n      debug('pool refused connection: %s', connection.__knexUid);\n    }\n\n    return Promise.resolve();\n  }\n\n  // Destroy the current connection pool for the client.\n  async destroy(callback) {\n    try {\n      if (this.pool && this.pool.destroy) {\n        await this.pool.destroy();\n      }\n      this.pool = undefined;\n\n      if (typeof callback === 'function') {\n        callback();\n      }\n    } catch (err) {\n      if (typeof callback === 'function') {\n        return callback(err);\n      }\n      throw err;\n    }\n  }\n\n  // Return the database being used by this client.\n  database() {\n    return this.connectionSettings.database;\n  }\n\n  toString() {\n    return '[object KnexClient]';\n  }\n\n  assertCanCancelQuery() {\n    if (!this.canCancelQuery) {\n      throw new Error('Query cancelling not supported for this dialect');\n    }\n  }\n\n  cancelQuery() {\n    throw new Error('Query cancelling not supported for this dialect');\n  }\n\n  // Formatter part\n\n  alias(first, second) {\n    return first + ' as ' + second;\n  }\n\n  // Checks whether a value is a function... if it is, we compile it\n  // otherwise we check whether it's a raw\n  parameter(value, builder, bindingsHolder) {\n    if (typeof value === 'function') {\n      return outputQuery(\n        compileCallback(value, undefined, this, bindingsHolder),\n        true,\n        builder,\n        this\n      );\n    }\n    return unwrapRaw(value, true, builder, this, bindingsHolder) || '?';\n  }\n\n  // Turns a list of values into a list of ?'s, joining them with commas unless\n  // a \"joining\" value is specified (e.g. ' and ')\n  parameterize(values, notSetValue, builder, bindingsHolder) {\n    if (typeof values === 'function')\n      return this.parameter(values, builder, bindingsHolder);\n    values = Array.isArray(values) ? values : [values];\n    let str = '',\n      i = -1;\n    while (++i < values.length) {\n      if (i > 0) str += ', ';\n      str += this.parameter(\n        values[i] === undefined ? notSetValue : values[i],\n        builder,\n        bindingsHolder\n      );\n    }\n    return str;\n  }\n\n  // Formats `values` into a parenthesized list of parameters for a `VALUES`\n  // clause.\n  //\n  // [1, 2]                  -> '(?, ?)'\n  // [[1, 2], [3, 4]]        -> '((?, ?), (?, ?))'\n  // knex('table')           -> '(select * from \"table\")'\n  // knex.raw('select ?', 1) -> '(select ?)'\n  //\n  values(values, builder, bindingsHolder) {\n    if (Array.isArray(values)) {\n      if (Array.isArray(values[0])) {\n        return `(${values\n          .map(\n            (value) =>\n              `(${this.parameterize(\n                value,\n                undefined,\n                builder,\n                bindingsHolder\n              )})`\n          )\n          .join(', ')})`;\n      }\n      return `(${this.parameterize(\n        values,\n        undefined,\n        builder,\n        bindingsHolder\n      )})`;\n    }\n\n    if (values && values.isRawInstance) {\n      return `(${this.parameter(values, builder, bindingsHolder)})`;\n    }\n\n    return this.parameter(values, builder, bindingsHolder);\n  }\n}\n\nObject.assign(Client.prototype, {\n  _escapeBinding: makeEscape({\n    escapeString(str) {\n      return `'${str.replace(/'/g, \"''\")}'`;\n    },\n  }),\n\n  canCancelQuery: false,\n});\n\nmodule.exports = Client;\n"]},"metadata":{},"sourceType":"script"}