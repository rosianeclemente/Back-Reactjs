{"ast":null,"code":"const clone = require('lodash/clone');\n\nconst isEmpty = require('lodash/isEmpty');\n\nconst {\n  callbackify\n} = require('util');\n\nconst finallyMixin = require('./util/finally-mixin');\n\nconst {\n  formatQuery\n} = require('./execution/internal/query-executioner');\n\nfunction augmentWithBuilderInterface(Target) {\n  Target.prototype.toQuery = function (tz) {\n    let data = this.toSQL(this._method, tz);\n    if (!Array.isArray(data)) data = [data];\n\n    if (!data.length) {\n      return '';\n    }\n\n    return data.map(statement => {\n      return formatQuery(statement.sql, statement.bindings, tz, this.client);\n    }).reduce((a, c) => a.concat(a.endsWith(';') ? '\\n' : ';\\n', c));\n  }; // Create a new instance of the `Runner`, passing in the current object.\n\n\n  Target.prototype.then = function ()\n  /* onFulfilled, onRejected */\n  {\n    let result = this.client.runner(this).run();\n\n    if (this.client.config.asyncStackTraces) {\n      result = result.catch(err => {\n        err.originalStack = err.stack;\n        const firstLine = err.stack.split('\\n')[0]; // a hack to get a callstack into the client code despite this\n        // node.js bug https://github.com/nodejs/node/issues/11865\n        // see lib/util/save-async-stack.js for more details\n\n        const {\n          error,\n          lines\n        } = this._asyncStack;\n        const stackByLines = error.stack.split('\\n');\n        const asyncStack = stackByLines.slice(lines);\n        asyncStack.unshift(firstLine); // put the fake more helpful \"async\" stack on the thrown error\n\n        err.stack = asyncStack.join('\\n');\n        throw err;\n      });\n    }\n\n    return result.then.apply(result, arguments);\n  }; // Add additional \"options\" to the builder. Typically used for client specific\n  // items, like the `mysql` and `sqlite3` drivers.\n\n\n  Target.prototype.options = function (opts) {\n    this._options = this._options || [];\n\n    this._options.push(clone(opts) || {});\n\n    return this;\n  }; // Sets an explicit \"connection\" we wish to use for this query.\n\n\n  Target.prototype.connection = function (connection) {\n    this._connection = connection;\n    return this;\n  }; // Set a debug flag for the current schema query stack.\n\n\n  Target.prototype.debug = function (enabled) {\n    this._debug = arguments.length ? enabled : true;\n    return this;\n  }; // Set the transaction object for this query.\n\n\n  Target.prototype.transacting = function (transaction) {\n    if (transaction && transaction.client) {\n      if (!transaction.client.transacting) {\n        transaction.client.logger.warn(`Invalid transaction value: ${transaction.client}`);\n      } else {\n        this.client = transaction.client;\n      }\n    }\n\n    if (isEmpty(transaction)) {\n      this.client.logger.error('Invalid value on transacting call, potential bug');\n      throw Error('Invalid transacting value (null, undefined or empty object)');\n    }\n\n    return this;\n  }; // Initializes a stream.\n\n\n  Target.prototype.stream = function (options) {\n    return this.client.runner(this).stream(options);\n  }; // Initialize a stream & pipe automatically.\n\n\n  Target.prototype.pipe = function (writable, options) {\n    return this.client.runner(this).pipe(writable, options);\n  };\n\n  Target.prototype.asCallback = function (cb) {\n    const promise = this.then();\n    callbackify(() => promise)(cb);\n    return promise;\n  };\n\n  Target.prototype.catch = function (onReject) {\n    return this.then().catch(onReject);\n  };\n\n  Object.defineProperty(Target.prototype, Symbol.toStringTag, {\n    get: () => 'object'\n  });\n  finallyMixin(Target.prototype);\n}\n\nmodule.exports = {\n  augmentWithBuilderInterface\n};","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/builder-interface-augmenter.js"],"names":["clone","require","isEmpty","callbackify","finallyMixin","formatQuery","augmentWithBuilderInterface","Target","prototype","toQuery","tz","data","toSQL","_method","Array","isArray","length","map","statement","sql","bindings","client","reduce","a","c","concat","endsWith","then","result","runner","run","config","asyncStackTraces","catch","err","originalStack","stack","firstLine","split","error","lines","_asyncStack","stackByLines","asyncStack","slice","unshift","join","apply","arguments","options","opts","_options","push","connection","_connection","debug","enabled","_debug","transacting","transaction","logger","warn","Error","stream","pipe","writable","asCallback","cb","promise","onReject","Object","defineProperty","Symbol","toStringTag","get","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAkBF,OAAO,CAAC,MAAD,CAA/B;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,sBAAD,CAA5B;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAkBJ,OAAO,CAAC,wCAAD,CAA/B;;AAEA,SAASK,2BAAT,CAAqCC,MAArC,EAA6C;AAC3CA,EAAAA,MAAM,CAACC,SAAP,CAAiBC,OAAjB,GAA2B,UAAUC,EAAV,EAAc;AACvC,QAAIC,IAAI,GAAG,KAAKC,KAAL,CAAW,KAAKC,OAAhB,EAAyBH,EAAzB,CAAX;AACA,QAAI,CAACI,KAAK,CAACC,OAAN,CAAcJ,IAAd,CAAL,EAA0BA,IAAI,GAAG,CAACA,IAAD,CAAP;;AAC1B,QAAI,CAACA,IAAI,CAACK,MAAV,EAAkB;AAChB,aAAO,EAAP;AACD;;AAED,WAAOL,IAAI,CACRM,GADI,CACCC,SAAD,IAAe;AAClB,aAAOb,WAAW,CAACa,SAAS,CAACC,GAAX,EAAgBD,SAAS,CAACE,QAA1B,EAAoCV,EAApC,EAAwC,KAAKW,MAA7C,CAAlB;AACD,KAHI,EAIJC,MAJI,CAIG,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,MAAF,CAASF,CAAC,CAACG,QAAF,CAAW,GAAX,IAAkB,IAAlB,GAAyB,KAAlC,EAAyCF,CAAzC,CAJb,CAAP;AAKD,GAZD,CAD2C,CAe3C;;;AACAjB,EAAAA,MAAM,CAACC,SAAP,CAAiBmB,IAAjB,GAAwB;AAAU;AAA+B;AAC/D,QAAIC,MAAM,GAAG,KAAKP,MAAL,CAAYQ,MAAZ,CAAmB,IAAnB,EAAyBC,GAAzB,EAAb;;AAEA,QAAI,KAAKT,MAAL,CAAYU,MAAZ,CAAmBC,gBAAvB,EAAyC;AACvCJ,MAAAA,MAAM,GAAGA,MAAM,CAACK,KAAP,CAAcC,GAAD,IAAS;AAC7BA,QAAAA,GAAG,CAACC,aAAJ,GAAoBD,GAAG,CAACE,KAAxB;AACA,cAAMC,SAAS,GAAGH,GAAG,CAACE,KAAJ,CAAUE,KAAV,CAAgB,IAAhB,EAAsB,CAAtB,CAAlB,CAF6B,CAI7B;AACA;AACA;;AACA,cAAM;AAAEC,UAAAA,KAAF;AAASC,UAAAA;AAAT,YAAmB,KAAKC,WAA9B;AACA,cAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYE,KAAZ,CAAkB,IAAlB,CAArB;AACA,cAAMK,UAAU,GAAGD,YAAY,CAACE,KAAb,CAAmBJ,KAAnB,CAAnB;AACAG,QAAAA,UAAU,CAACE,OAAX,CAAmBR,SAAnB,EAV6B,CAY7B;;AACAH,QAAAA,GAAG,CAACE,KAAJ,GAAYO,UAAU,CAACG,IAAX,CAAgB,IAAhB,CAAZ;AACA,cAAMZ,GAAN;AACD,OAfQ,CAAT;AAgBD;;AAED,WAAON,MAAM,CAACD,IAAP,CAAYoB,KAAZ,CAAkBnB,MAAlB,EAA0BoB,SAA1B,CAAP;AACD,GAvBD,CAhB2C,CAyC3C;AACA;;;AACAzC,EAAAA,MAAM,CAACC,SAAP,CAAiByC,OAAjB,GAA2B,UAAUC,IAAV,EAAgB;AACzC,SAAKC,QAAL,GAAgB,KAAKA,QAAL,IAAiB,EAAjC;;AACA,SAAKA,QAAL,CAAcC,IAAd,CAAmBpD,KAAK,CAACkD,IAAD,CAAL,IAAe,EAAlC;;AACA,WAAO,IAAP;AACD,GAJD,CA3C2C,CAiD3C;;;AACA3C,EAAAA,MAAM,CAACC,SAAP,CAAiB6C,UAAjB,GAA8B,UAAUA,UAAV,EAAsB;AAClD,SAAKC,WAAL,GAAmBD,UAAnB;AACA,WAAO,IAAP;AACD,GAHD,CAlD2C,CAuD3C;;;AACA9C,EAAAA,MAAM,CAACC,SAAP,CAAiB+C,KAAjB,GAAyB,UAAUC,OAAV,EAAmB;AAC1C,SAAKC,MAAL,GAAcT,SAAS,CAAChC,MAAV,GAAmBwC,OAAnB,GAA6B,IAA3C;AACA,WAAO,IAAP;AACD,GAHD,CAxD2C,CA6D3C;;;AACAjD,EAAAA,MAAM,CAACC,SAAP,CAAiBkD,WAAjB,GAA+B,UAAUC,WAAV,EAAuB;AACpD,QAAIA,WAAW,IAAIA,WAAW,CAACtC,MAA/B,EAAuC;AACrC,UAAI,CAACsC,WAAW,CAACtC,MAAZ,CAAmBqC,WAAxB,EAAqC;AACnCC,QAAAA,WAAW,CAACtC,MAAZ,CAAmBuC,MAAnB,CAA0BC,IAA1B,CACG,8BAA6BF,WAAW,CAACtC,MAAO,EADnD;AAGD,OAJD,MAIO;AACL,aAAKA,MAAL,GAAcsC,WAAW,CAACtC,MAA1B;AACD;AACF;;AACD,QAAInB,OAAO,CAACyD,WAAD,CAAX,EAA0B;AACxB,WAAKtC,MAAL,CAAYuC,MAAZ,CAAmBrB,KAAnB,CACE,kDADF;AAGA,YAAMuB,KAAK,CACT,6DADS,CAAX;AAGD;;AACD,WAAO,IAAP;AACD,GAnBD,CA9D2C,CAmF3C;;;AACAvD,EAAAA,MAAM,CAACC,SAAP,CAAiBuD,MAAjB,GAA0B,UAAUd,OAAV,EAAmB;AAC3C,WAAO,KAAK5B,MAAL,CAAYQ,MAAZ,CAAmB,IAAnB,EAAyBkC,MAAzB,CAAgCd,OAAhC,CAAP;AACD,GAFD,CApF2C,CAwF3C;;;AACA1C,EAAAA,MAAM,CAACC,SAAP,CAAiBwD,IAAjB,GAAwB,UAAUC,QAAV,EAAoBhB,OAApB,EAA6B;AACnD,WAAO,KAAK5B,MAAL,CAAYQ,MAAZ,CAAmB,IAAnB,EAAyBmC,IAAzB,CAA8BC,QAA9B,EAAwChB,OAAxC,CAAP;AACD,GAFD;;AAIA1C,EAAAA,MAAM,CAACC,SAAP,CAAiB0D,UAAjB,GAA8B,UAAUC,EAAV,EAAc;AAC1C,UAAMC,OAAO,GAAG,KAAKzC,IAAL,EAAhB;AACAxB,IAAAA,WAAW,CAAC,MAAMiE,OAAP,CAAX,CAA2BD,EAA3B;AACA,WAAOC,OAAP;AACD,GAJD;;AAMA7D,EAAAA,MAAM,CAACC,SAAP,CAAiByB,KAAjB,GAAyB,UAAUoC,QAAV,EAAoB;AAC3C,WAAO,KAAK1C,IAAL,GAAYM,KAAZ,CAAkBoC,QAAlB,CAAP;AACD,GAFD;;AAIAC,EAAAA,MAAM,CAACC,cAAP,CAAsBhE,MAAM,CAACC,SAA7B,EAAwCgE,MAAM,CAACC,WAA/C,EAA4D;AAC1DC,IAAAA,GAAG,EAAE,MAAM;AAD+C,GAA5D;AAIAtE,EAAAA,YAAY,CAACG,MAAM,CAACC,SAAR,CAAZ;AACD;;AAEDmE,MAAM,CAACC,OAAP,GAAiB;AACftE,EAAAA;AADe,CAAjB","sourcesContent":["const clone = require('lodash/clone');\nconst isEmpty = require('lodash/isEmpty');\nconst { callbackify } = require('util');\nconst finallyMixin = require('./util/finally-mixin');\nconst { formatQuery } = require('./execution/internal/query-executioner');\n\nfunction augmentWithBuilderInterface(Target) {\n  Target.prototype.toQuery = function (tz) {\n    let data = this.toSQL(this._method, tz);\n    if (!Array.isArray(data)) data = [data];\n    if (!data.length) {\n      return '';\n    }\n\n    return data\n      .map((statement) => {\n        return formatQuery(statement.sql, statement.bindings, tz, this.client);\n      })\n      .reduce((a, c) => a.concat(a.endsWith(';') ? '\\n' : ';\\n', c));\n  };\n\n  // Create a new instance of the `Runner`, passing in the current object.\n  Target.prototype.then = function (/* onFulfilled, onRejected */) {\n    let result = this.client.runner(this).run();\n\n    if (this.client.config.asyncStackTraces) {\n      result = result.catch((err) => {\n        err.originalStack = err.stack;\n        const firstLine = err.stack.split('\\n')[0];\n\n        // a hack to get a callstack into the client code despite this\n        // node.js bug https://github.com/nodejs/node/issues/11865\n        // see lib/util/save-async-stack.js for more details\n        const { error, lines } = this._asyncStack;\n        const stackByLines = error.stack.split('\\n');\n        const asyncStack = stackByLines.slice(lines);\n        asyncStack.unshift(firstLine);\n\n        // put the fake more helpful \"async\" stack on the thrown error\n        err.stack = asyncStack.join('\\n');\n        throw err;\n      });\n    }\n\n    return result.then.apply(result, arguments);\n  };\n\n  // Add additional \"options\" to the builder. Typically used for client specific\n  // items, like the `mysql` and `sqlite3` drivers.\n  Target.prototype.options = function (opts) {\n    this._options = this._options || [];\n    this._options.push(clone(opts) || {});\n    return this;\n  };\n\n  // Sets an explicit \"connection\" we wish to use for this query.\n  Target.prototype.connection = function (connection) {\n    this._connection = connection;\n    return this;\n  };\n\n  // Set a debug flag for the current schema query stack.\n  Target.prototype.debug = function (enabled) {\n    this._debug = arguments.length ? enabled : true;\n    return this;\n  };\n\n  // Set the transaction object for this query.\n  Target.prototype.transacting = function (transaction) {\n    if (transaction && transaction.client) {\n      if (!transaction.client.transacting) {\n        transaction.client.logger.warn(\n          `Invalid transaction value: ${transaction.client}`\n        );\n      } else {\n        this.client = transaction.client;\n      }\n    }\n    if (isEmpty(transaction)) {\n      this.client.logger.error(\n        'Invalid value on transacting call, potential bug'\n      );\n      throw Error(\n        'Invalid transacting value (null, undefined or empty object)'\n      );\n    }\n    return this;\n  };\n\n  // Initializes a stream.\n  Target.prototype.stream = function (options) {\n    return this.client.runner(this).stream(options);\n  };\n\n  // Initialize a stream & pipe automatically.\n  Target.prototype.pipe = function (writable, options) {\n    return this.client.runner(this).pipe(writable, options);\n  };\n\n  Target.prototype.asCallback = function (cb) {\n    const promise = this.then();\n    callbackify(() => promise)(cb);\n    return promise;\n  };\n\n  Target.prototype.catch = function (onReject) {\n    return this.then().catch(onReject);\n  };\n\n  Object.defineProperty(Target.prototype, Symbol.toStringTag, {\n    get: () => 'object',\n  });\n\n  finallyMixin(Target.prototype);\n}\n\nmodule.exports = {\n  augmentWithBuilderInterface,\n};\n"]},"metadata":{},"sourceType":"script"}