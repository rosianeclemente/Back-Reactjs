{"ast":null,"code":"const color = require('colorette');\n\nconst {\n  inspect\n} = require('util');\n\nconst {\n  isString,\n  isFunction\n} = require('./util/is');\n\nclass Logger {\n  constructor(config = {}) {\n    const {\n      log: {\n        debug,\n        warn,\n        error,\n        deprecate,\n        inspectionDepth,\n        enableColors\n      } = {}\n    } = config;\n    this._inspectionDepth = inspectionDepth || 5;\n    this._enableColors = resolveIsEnabledColors(enableColors);\n    this._debug = debug;\n    this._warn = warn;\n    this._error = error;\n    this._deprecate = deprecate;\n  }\n\n  _log(message, userFn, colorFn) {\n    if (userFn != null && !isFunction(userFn)) {\n      throw new TypeError('Extensions to knex logger must be functions!');\n    }\n\n    if (isFunction(userFn)) {\n      userFn(message);\n      return;\n    }\n\n    if (!isString(message)) {\n      message = inspect(message, {\n        depth: this._inspectionDepth,\n        colors: this._enableColors\n      });\n    }\n\n    console.log(colorFn ? colorFn(message) : message);\n  }\n\n  debug(message) {\n    this._log(message, this._debug);\n  }\n\n  warn(message) {\n    this._log(message, this._warn, color.yellow);\n  }\n\n  error(message) {\n    this._log(message, this._error, color.red);\n  }\n\n  deprecate(method, alternative) {\n    const message = `${method} is deprecated, please use ${alternative}`;\n\n    this._log(message, this._deprecate, color.yellow);\n  }\n\n}\n\nfunction resolveIsEnabledColors(enableColorsParam) {\n  if (enableColorsParam != null) {\n    return enableColorsParam;\n  }\n\n  if (process && process.stdout) {\n    return process.stdout.isTTY;\n  }\n\n  return false;\n}\n\nmodule.exports = Logger;","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/logger.js"],"names":["color","require","inspect","isString","isFunction","Logger","constructor","config","log","debug","warn","error","deprecate","inspectionDepth","enableColors","_inspectionDepth","_enableColors","resolveIsEnabledColors","_debug","_warn","_error","_deprecate","_log","message","userFn","colorFn","TypeError","depth","colors","console","yellow","red","method","alternative","enableColorsParam","process","stdout","isTTY","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,WAAD,CAArB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,OAAO,CAAC,MAAD,CAA3B;;AACA,MAAM;AAAEE,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAA2BH,OAAO,CAAC,WAAD,CAAxC;;AAEA,MAAMI,MAAN,CAAa;AACXC,EAAAA,WAAW,CAACC,MAAM,GAAG,EAAV,EAAc;AACvB,UAAM;AACJC,MAAAA,GAAG,EAAE;AACHC,QAAAA,KADG;AAEHC,QAAAA,IAFG;AAGHC,QAAAA,KAHG;AAIHC,QAAAA,SAJG;AAKHC,QAAAA,eALG;AAMHC,QAAAA;AANG,UAOD;AARA,QASFP,MATJ;AAUA,SAAKQ,gBAAL,GAAwBF,eAAe,IAAI,CAA3C;AACA,SAAKG,aAAL,GAAqBC,sBAAsB,CAACH,YAAD,CAA3C;AACA,SAAKI,MAAL,GAAcT,KAAd;AACA,SAAKU,KAAL,GAAaT,IAAb;AACA,SAAKU,MAAL,GAAcT,KAAd;AACA,SAAKU,UAAL,GAAkBT,SAAlB;AACD;;AAEDU,EAAAA,IAAI,CAACC,OAAD,EAAUC,MAAV,EAAkBC,OAAlB,EAA2B;AAC7B,QAAID,MAAM,IAAI,IAAV,IAAkB,CAACpB,UAAU,CAACoB,MAAD,CAAjC,EAA2C;AACzC,YAAM,IAAIE,SAAJ,CAAc,8CAAd,CAAN;AACD;;AAED,QAAItB,UAAU,CAACoB,MAAD,CAAd,EAAwB;AACtBA,MAAAA,MAAM,CAACD,OAAD,CAAN;AACA;AACD;;AAED,QAAI,CAACpB,QAAQ,CAACoB,OAAD,CAAb,EAAwB;AACtBA,MAAAA,OAAO,GAAGrB,OAAO,CAACqB,OAAD,EAAU;AACzBI,QAAAA,KAAK,EAAE,KAAKZ,gBADa;AAEzBa,QAAAA,MAAM,EAAE,KAAKZ;AAFY,OAAV,CAAjB;AAID;;AAEDa,IAAAA,OAAO,CAACrB,GAAR,CAAYiB,OAAO,GAAGA,OAAO,CAACF,OAAD,CAAV,GAAsBA,OAAzC;AACD;;AAEDd,EAAAA,KAAK,CAACc,OAAD,EAAU;AACb,SAAKD,IAAL,CAAUC,OAAV,EAAmB,KAAKL,MAAxB;AACD;;AAEDR,EAAAA,IAAI,CAACa,OAAD,EAAU;AACZ,SAAKD,IAAL,CAAUC,OAAV,EAAmB,KAAKJ,KAAxB,EAA+BnB,KAAK,CAAC8B,MAArC;AACD;;AAEDnB,EAAAA,KAAK,CAACY,OAAD,EAAU;AACb,SAAKD,IAAL,CAAUC,OAAV,EAAmB,KAAKH,MAAxB,EAAgCpB,KAAK,CAAC+B,GAAtC;AACD;;AAEDnB,EAAAA,SAAS,CAACoB,MAAD,EAASC,WAAT,EAAsB;AAC7B,UAAMV,OAAO,GAAI,GAAES,MAAO,8BAA6BC,WAAY,EAAnE;;AAEA,SAAKX,IAAL,CAAUC,OAAV,EAAmB,KAAKF,UAAxB,EAAoCrB,KAAK,CAAC8B,MAA1C;AACD;;AAxDU;;AA2Db,SAASb,sBAAT,CAAgCiB,iBAAhC,EAAmD;AACjD,MAAIA,iBAAiB,IAAI,IAAzB,EAA+B;AAC7B,WAAOA,iBAAP;AACD;;AAED,MAAIC,OAAO,IAAIA,OAAO,CAACC,MAAvB,EAA+B;AAC7B,WAAOD,OAAO,CAACC,MAAR,CAAeC,KAAtB;AACD;;AAED,SAAO,KAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBlC,MAAjB","sourcesContent":["const color = require('colorette');\nconst { inspect } = require('util');\nconst { isString, isFunction } = require('./util/is');\n\nclass Logger {\n  constructor(config = {}) {\n    const {\n      log: {\n        debug,\n        warn,\n        error,\n        deprecate,\n        inspectionDepth,\n        enableColors,\n      } = {},\n    } = config;\n    this._inspectionDepth = inspectionDepth || 5;\n    this._enableColors = resolveIsEnabledColors(enableColors);\n    this._debug = debug;\n    this._warn = warn;\n    this._error = error;\n    this._deprecate = deprecate;\n  }\n\n  _log(message, userFn, colorFn) {\n    if (userFn != null && !isFunction(userFn)) {\n      throw new TypeError('Extensions to knex logger must be functions!');\n    }\n\n    if (isFunction(userFn)) {\n      userFn(message);\n      return;\n    }\n\n    if (!isString(message)) {\n      message = inspect(message, {\n        depth: this._inspectionDepth,\n        colors: this._enableColors,\n      });\n    }\n\n    console.log(colorFn ? colorFn(message) : message);\n  }\n\n  debug(message) {\n    this._log(message, this._debug);\n  }\n\n  warn(message) {\n    this._log(message, this._warn, color.yellow);\n  }\n\n  error(message) {\n    this._log(message, this._error, color.red);\n  }\n\n  deprecate(method, alternative) {\n    const message = `${method} is deprecated, please use ${alternative}`;\n\n    this._log(message, this._deprecate, color.yellow);\n  }\n}\n\nfunction resolveIsEnabledColors(enableColorsParam) {\n  if (enableColorsParam != null) {\n    return enableColorsParam;\n  }\n\n  if (process && process.stdout) {\n    return process.stdout.isTTY;\n  }\n\n  return false;\n}\n\nmodule.exports = Logger;\n"]},"metadata":{},"sourceType":"script"}