{"ast":null,"code":"function ensureConnectionCallback(runner) {\n  runner.client.emit('start', runner.builder);\n  runner.builder.emit('start', runner.builder);\n  const sql = runner.builder.toSQL();\n\n  if (runner.builder._debug) {\n    runner.client.logger.debug(sql);\n  }\n\n  if (Array.isArray(sql)) {\n    return runner.queryArray(sql);\n  }\n\n  return runner.query(sql);\n}\n\nfunction ensureConnectionStreamCallback(runner, params) {\n  try {\n    const sql = runner.builder.toSQL();\n\n    if (Array.isArray(sql) && params.hasHandler) {\n      throw new Error('The stream may only be used with a single query statement.');\n    }\n\n    return runner.client.stream(runner.connection, sql, params.stream, params.options);\n  } catch (e) {\n    params.stream.emit('error', e);\n    throw e;\n  }\n}\n\nmodule.exports = {\n  ensureConnectionCallback,\n  ensureConnectionStreamCallback\n};","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/execution/internal/ensure-connection-callback.js"],"names":["ensureConnectionCallback","runner","client","emit","builder","sql","toSQL","_debug","logger","debug","Array","isArray","queryArray","query","ensureConnectionStreamCallback","params","hasHandler","Error","stream","connection","options","e","module","exports"],"mappings":"AAAA,SAASA,wBAAT,CAAkCC,MAAlC,EAA0C;AACxCA,EAAAA,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmB,OAAnB,EAA4BF,MAAM,CAACG,OAAnC;AACAH,EAAAA,MAAM,CAACG,OAAP,CAAeD,IAAf,CAAoB,OAApB,EAA6BF,MAAM,CAACG,OAApC;AACA,QAAMC,GAAG,GAAGJ,MAAM,CAACG,OAAP,CAAeE,KAAf,EAAZ;;AAEA,MAAIL,MAAM,CAACG,OAAP,CAAeG,MAAnB,EAA2B;AACzBN,IAAAA,MAAM,CAACC,MAAP,CAAcM,MAAd,CAAqBC,KAArB,CAA2BJ,GAA3B;AACD;;AAED,MAAIK,KAAK,CAACC,OAAN,CAAcN,GAAd,CAAJ,EAAwB;AACtB,WAAOJ,MAAM,CAACW,UAAP,CAAkBP,GAAlB,CAAP;AACD;;AACD,SAAOJ,MAAM,CAACY,KAAP,CAAaR,GAAb,CAAP;AACD;;AAED,SAASS,8BAAT,CAAwCb,MAAxC,EAAgDc,MAAhD,EAAwD;AACtD,MAAI;AACF,UAAMV,GAAG,GAAGJ,MAAM,CAACG,OAAP,CAAeE,KAAf,EAAZ;;AAEA,QAAII,KAAK,CAACC,OAAN,CAAcN,GAAd,KAAsBU,MAAM,CAACC,UAAjC,EAA6C;AAC3C,YAAM,IAAIC,KAAJ,CACJ,4DADI,CAAN;AAGD;;AAED,WAAOhB,MAAM,CAACC,MAAP,CAAcgB,MAAd,CACLjB,MAAM,CAACkB,UADF,EAELd,GAFK,EAGLU,MAAM,CAACG,MAHF,EAILH,MAAM,CAACK,OAJF,CAAP;AAMD,GAfD,CAeE,OAAOC,CAAP,EAAU;AACVN,IAAAA,MAAM,CAACG,MAAP,CAAcf,IAAd,CAAmB,OAAnB,EAA4BkB,CAA5B;AACA,UAAMA,CAAN;AACD;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACfvB,EAAAA,wBADe;AAEfc,EAAAA;AAFe,CAAjB","sourcesContent":["function ensureConnectionCallback(runner) {\n  runner.client.emit('start', runner.builder);\n  runner.builder.emit('start', runner.builder);\n  const sql = runner.builder.toSQL();\n\n  if (runner.builder._debug) {\n    runner.client.logger.debug(sql);\n  }\n\n  if (Array.isArray(sql)) {\n    return runner.queryArray(sql);\n  }\n  return runner.query(sql);\n}\n\nfunction ensureConnectionStreamCallback(runner, params) {\n  try {\n    const sql = runner.builder.toSQL();\n\n    if (Array.isArray(sql) && params.hasHandler) {\n      throw new Error(\n        'The stream may only be used with a single query statement.'\n      );\n    }\n\n    return runner.client.stream(\n      runner.connection,\n      sql,\n      params.stream,\n      params.options\n    );\n  } catch (e) {\n    params.stream.emit('error', e);\n    throw e;\n  }\n}\n\nmodule.exports = {\n  ensureConnectionCallback,\n  ensureConnectionStreamCallback,\n};\n"]},"metadata":{},"sourceType":"script"}