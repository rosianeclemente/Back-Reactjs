{"ast":null,"code":"const {\n  columnize: columnize_,\n  wrap: wrap_\n} = require('./formatter/wrappingFormatter');\n\nclass Formatter {\n  constructor(client, builder) {\n    this.client = client;\n    this.builder = builder;\n    this.bindings = [];\n  } // Accepts a string or array of columns to wrap as appropriate.\n\n\n  columnize(target) {\n    return columnize_(target, this.builder, this.client, this);\n  } // Puts the appropriate wrapper around a value depending on the database\n  // engine, unless it's a knex.raw value, in which case it's left alone.\n\n\n  wrap(value, isParameter) {\n    return wrap_(value, isParameter, this.builder, this.client, this);\n  }\n\n}\n\nmodule.exports = Formatter;","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/formatter.js"],"names":["columnize","columnize_","wrap","wrap_","require","Formatter","constructor","client","builder","bindings","target","value","isParameter","module","exports"],"mappings":"AAAA,MAAM;AACJA,EAAAA,SAAS,EAAEC,UADP;AAEJC,EAAAA,IAAI,EAAEC;AAFF,IAGFC,OAAO,CAAC,+BAAD,CAHX;;AAKA,MAAMC,SAAN,CAAgB;AACdC,EAAAA,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkB;AAC3B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACD,GALa,CAOd;;;AACAT,EAAAA,SAAS,CAACU,MAAD,EAAS;AAChB,WAAOT,UAAU,CAACS,MAAD,EAAS,KAAKF,OAAd,EAAuB,KAAKD,MAA5B,EAAoC,IAApC,CAAjB;AACD,GAVa,CAYd;AACA;;;AACAL,EAAAA,IAAI,CAACS,KAAD,EAAQC,WAAR,EAAqB;AACvB,WAAOT,KAAK,CAACQ,KAAD,EAAQC,WAAR,EAAqB,KAAKJ,OAA1B,EAAmC,KAAKD,MAAxC,EAAgD,IAAhD,CAAZ;AACD;;AAhBa;;AAmBhBM,MAAM,CAACC,OAAP,GAAiBT,SAAjB","sourcesContent":["const {\n  columnize: columnize_,\n  wrap: wrap_,\n} = require('./formatter/wrappingFormatter');\n\nclass Formatter {\n  constructor(client, builder) {\n    this.client = client;\n    this.builder = builder;\n    this.bindings = [];\n  }\n\n  // Accepts a string or array of columns to wrap as appropriate.\n  columnize(target) {\n    return columnize_(target, this.builder, this.client, this);\n  }\n\n  // Puts the appropriate wrapper around a value depending on the database\n  // engine, unless it's a knex.raw value, in which case it's left alone.\n  wrap(value, isParameter) {\n    return wrap_(value, isParameter, this.builder, this.client, this);\n  }\n}\n\nmodule.exports = Formatter;\n"]},"metadata":{},"sourceType":"script"}