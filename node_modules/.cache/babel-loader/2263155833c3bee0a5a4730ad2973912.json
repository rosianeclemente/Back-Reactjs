{"ast":null,"code":"// MySQL Schema Compiler\n// -------\nconst SchemaCompiler = require('../../../schema/compiler');\n\nclass SchemaCompiler_MSSQL extends SchemaCompiler {\n  constructor(client, builder) {\n    super(client, builder);\n  }\n\n  dropTableIfExists(tableName) {\n    const name = this.formatter.wrap(prefixedTableName(this.schema, tableName));\n    this.pushQuery(`if object_id('${name}', 'U') is not null DROP TABLE ${name}`);\n  } // Rename a table on the schema.\n\n\n  renameTable(tableName, to) {\n    this.pushQuery(`exec sp_rename ${this.client.parameter(prefixedTableName(this.schema, tableName), this.builder, this.bindingsHolder)}, ${this.client.parameter(to, this.builder, this.bindingsHolder)}`);\n  } // Check whether a table exists on the query.\n\n\n  hasTable(tableName) {\n    const formattedTable = this.client.parameter(this.formatter.wrap(prefixedTableName(this.schema, tableName)), this.builder, this.bindingsHolder);\n    const sql = `select object_id from sys.tables ` + `where object_id = object_id(${formattedTable})`;\n    this.pushQuery({\n      sql,\n      output: resp => resp.length > 0\n    });\n  } // Check whether a column exists on the schema.\n\n\n  hasColumn(tableName, column) {\n    const formattedColumn = this.client.parameter(column, this.builder, this.bindingsHolder);\n    const formattedTable = this.client.parameter(this.formatter.wrap(prefixedTableName(this.schema, tableName)), this.builder, this.bindingsHolder);\n    const sql = `select object_id from sys.columns ` + `where name = ${formattedColumn} ` + `and object_id = object_id(${formattedTable})`;\n    this.pushQuery({\n      sql,\n      output: resp => resp.length > 0\n    });\n  }\n\n}\n\nSchemaCompiler_MSSQL.prototype.dropTablePrefix = 'DROP TABLE ';\n\nfunction prefixedTableName(prefix, table) {\n  return prefix ? `${prefix}.${table}` : table;\n}\n\nmodule.exports = SchemaCompiler_MSSQL;","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/dialects/mssql/schema/mssql-compiler.js"],"names":["SchemaCompiler","require","SchemaCompiler_MSSQL","constructor","client","builder","dropTableIfExists","tableName","name","formatter","wrap","prefixedTableName","schema","pushQuery","renameTable","to","parameter","bindingsHolder","hasTable","formattedTable","sql","output","resp","length","hasColumn","column","formattedColumn","prototype","dropTablePrefix","prefix","table","module","exports"],"mappings":"AAAA;AACA;AACA,MAAMA,cAAc,GAAGC,OAAO,CAAC,0BAAD,CAA9B;;AAEA,MAAMC,oBAAN,SAAmCF,cAAnC,CAAkD;AAChDG,EAAAA,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkB;AAC3B,UAAMD,MAAN,EAAcC,OAAd;AACD;;AAEDC,EAAAA,iBAAiB,CAACC,SAAD,EAAY;AAC3B,UAAMC,IAAI,GAAG,KAAKC,SAAL,CAAeC,IAAf,CAAoBC,iBAAiB,CAAC,KAAKC,MAAN,EAAcL,SAAd,CAArC,CAAb;AACA,SAAKM,SAAL,CACG,iBAAgBL,IAAK,kCAAiCA,IAAK,EAD9D;AAGD,GAV+C,CAYhD;;;AACAM,EAAAA,WAAW,CAACP,SAAD,EAAYQ,EAAZ,EAAgB;AACzB,SAAKF,SAAL,CACG,kBAAiB,KAAKT,MAAL,CAAYY,SAAZ,CAChBL,iBAAiB,CAAC,KAAKC,MAAN,EAAcL,SAAd,CADD,EAEhB,KAAKF,OAFW,EAGhB,KAAKY,cAHW,CAIhB,KAAI,KAAKb,MAAL,CAAYY,SAAZ,CAAsBD,EAAtB,EAA0B,KAAKV,OAA/B,EAAwC,KAAKY,cAA7C,CAA6D,EALrE;AAOD,GArB+C,CAuBhD;;;AACAC,EAAAA,QAAQ,CAACX,SAAD,EAAY;AAClB,UAAMY,cAAc,GAAG,KAAKf,MAAL,CAAYY,SAAZ,CACrB,KAAKP,SAAL,CAAeC,IAAf,CAAoBC,iBAAiB,CAAC,KAAKC,MAAN,EAAcL,SAAd,CAArC,CADqB,EAErB,KAAKF,OAFgB,EAGrB,KAAKY,cAHgB,CAAvB;AAMA,UAAMG,GAAG,GACN,mCAAD,GACC,+BAA8BD,cAAe,GAFhD;AAGA,SAAKN,SAAL,CAAe;AAAEO,MAAAA,GAAF;AAAOC,MAAAA,MAAM,EAAGC,IAAD,IAAUA,IAAI,CAACC,MAAL,GAAc;AAAvC,KAAf;AACD,GAnC+C,CAqChD;;;AACAC,EAAAA,SAAS,CAACjB,SAAD,EAAYkB,MAAZ,EAAoB;AAC3B,UAAMC,eAAe,GAAG,KAAKtB,MAAL,CAAYY,SAAZ,CACtBS,MADsB,EAEtB,KAAKpB,OAFiB,EAGtB,KAAKY,cAHiB,CAAxB;AAKA,UAAME,cAAc,GAAG,KAAKf,MAAL,CAAYY,SAAZ,CACrB,KAAKP,SAAL,CAAeC,IAAf,CAAoBC,iBAAiB,CAAC,KAAKC,MAAN,EAAcL,SAAd,CAArC,CADqB,EAErB,KAAKF,OAFgB,EAGrB,KAAKY,cAHgB,CAAvB;AAKA,UAAMG,GAAG,GACN,oCAAD,GACC,gBAAeM,eAAgB,GADhC,GAEC,6BAA4BP,cAAe,GAH9C;AAIA,SAAKN,SAAL,CAAe;AAAEO,MAAAA,GAAF;AAAOC,MAAAA,MAAM,EAAGC,IAAD,IAAUA,IAAI,CAACC,MAAL,GAAc;AAAvC,KAAf;AACD;;AAtD+C;;AAyDlDrB,oBAAoB,CAACyB,SAArB,CAA+BC,eAA/B,GAAiD,aAAjD;;AAEA,SAASjB,iBAAT,CAA2BkB,MAA3B,EAAmCC,KAAnC,EAA0C;AACxC,SAAOD,MAAM,GAAI,GAAEA,MAAO,IAAGC,KAAM,EAAtB,GAA0BA,KAAvC;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB9B,oBAAjB","sourcesContent":["// MySQL Schema Compiler\n// -------\nconst SchemaCompiler = require('../../../schema/compiler');\n\nclass SchemaCompiler_MSSQL extends SchemaCompiler {\n  constructor(client, builder) {\n    super(client, builder);\n  }\n\n  dropTableIfExists(tableName) {\n    const name = this.formatter.wrap(prefixedTableName(this.schema, tableName));\n    this.pushQuery(\n      `if object_id('${name}', 'U') is not null DROP TABLE ${name}`\n    );\n  }\n\n  // Rename a table on the schema.\n  renameTable(tableName, to) {\n    this.pushQuery(\n      `exec sp_rename ${this.client.parameter(\n        prefixedTableName(this.schema, tableName),\n        this.builder,\n        this.bindingsHolder\n      )}, ${this.client.parameter(to, this.builder, this.bindingsHolder)}`\n    );\n  }\n\n  // Check whether a table exists on the query.\n  hasTable(tableName) {\n    const formattedTable = this.client.parameter(\n      this.formatter.wrap(prefixedTableName(this.schema, tableName)),\n      this.builder,\n      this.bindingsHolder\n    );\n\n    const sql =\n      `select object_id from sys.tables ` +\n      `where object_id = object_id(${formattedTable})`;\n    this.pushQuery({ sql, output: (resp) => resp.length > 0 });\n  }\n\n  // Check whether a column exists on the schema.\n  hasColumn(tableName, column) {\n    const formattedColumn = this.client.parameter(\n      column,\n      this.builder,\n      this.bindingsHolder\n    );\n    const formattedTable = this.client.parameter(\n      this.formatter.wrap(prefixedTableName(this.schema, tableName)),\n      this.builder,\n      this.bindingsHolder\n    );\n    const sql =\n      `select object_id from sys.columns ` +\n      `where name = ${formattedColumn} ` +\n      `and object_id = object_id(${formattedTable})`;\n    this.pushQuery({ sql, output: (resp) => resp.length > 0 });\n  }\n}\n\nSchemaCompiler_MSSQL.prototype.dropTablePrefix = 'DROP TABLE ';\n\nfunction prefixedTableName(prefix, table) {\n  return prefix ? `${prefix}.${table}` : table;\n}\n\nmodule.exports = SchemaCompiler_MSSQL;\n"]},"metadata":{},"sourceType":"script"}