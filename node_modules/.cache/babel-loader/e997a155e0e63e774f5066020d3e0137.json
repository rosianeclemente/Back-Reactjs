{"ast":null,"code":"const uniq = require('lodash/uniq');\n\nconst Raw = require('../../../raw');\n\nconst ColumnCompiler = require('../../../schema/columncompiler');\n\nconst {\n  createAutoIncrementTriggerAndSequence\n} = require('./internal/incrementUtils');\n\nconst {\n  toNumber\n} = require('../../../util/helpers'); // Column Compiler\n// -------\n\n\nclass ColumnCompiler_Oracle extends ColumnCompiler {\n  constructor() {\n    super(...arguments);\n    this.modifiers = ['defaultTo', 'checkIn', 'nullable', 'comment'];\n  }\n\n  increments({\n    primaryKey = true\n  } = {}) {\n    createAutoIncrementTriggerAndSequence(this);\n    return 'integer not null' + (primaryKey ? ' primary key' : '');\n  }\n\n  bigincrements({\n    primaryKey = true\n  } = {}) {\n    createAutoIncrementTriggerAndSequence(this);\n    return 'number(20, 0) not null' + (primaryKey ? ' primary key' : '');\n  }\n\n  floating(precision) {\n    const parsedPrecision = toNumber(precision, 0);\n    return `float${parsedPrecision ? `(${parsedPrecision})` : ''}`;\n  }\n\n  double(precision, scale) {\n    // if (!precision) return 'number'; // TODO: Check If default is ok\n    return `number(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n\n  decimal(precision, scale) {\n    if (precision === null) return 'decimal';\n    return `decimal(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n\n  integer(length) {\n    return length ? `number(${toNumber(length, 11)})` : 'integer';\n  }\n\n  enu(allowed) {\n    allowed = uniq(allowed);\n    const maxLength = (allowed || []).reduce((maxLength, name) => Math.max(maxLength, String(name).length), 1); // implicitly add the enum values as checked values\n\n    this.columnBuilder._modifiers.checkIn = [allowed];\n    return `varchar2(${maxLength})`;\n  }\n\n  datetime(without) {\n    return without ? 'timestamp' : 'timestamp with time zone';\n  }\n\n  timestamp(without) {\n    return without ? 'timestamp' : 'timestamp with time zone';\n  }\n\n  bool() {\n    // implicitly add the check for 0 and 1\n    this.columnBuilder._modifiers.checkIn = [[0, 1]];\n    return 'number(1, 0)';\n  }\n\n  varchar(length) {\n    return `varchar2(${toNumber(length, 255)})`;\n  } // Modifiers\n  // ------\n\n\n  comment(comment) {\n    const columnName = this.args[0] || this.defaults('columnName');\n    this.pushAdditional(function () {\n      this.pushQuery(`comment on column ${this.tableCompiler.tableName()}.` + this.formatter.wrap(columnName) + \" is '\" + (comment || '') + \"'\");\n    }, comment);\n  }\n\n  checkIn(value) {\n    // TODO: Maybe accept arguments also as array\n    // TODO: value(s) should be escaped properly\n    if (value === undefined) {\n      return '';\n    } else if (value instanceof Raw) {\n      value = value.toQuery();\n    } else if (Array.isArray(value)) {\n      value = value.map(v => `'${v}'`).join(', ');\n    } else {\n      value = `'${value}'`;\n    }\n\n    return `check (${this.formatter.wrap(this.args[0])} in (${value}))`;\n  }\n\n}\n\nColumnCompiler_Oracle.prototype.tinyint = 'smallint';\nColumnCompiler_Oracle.prototype.smallint = 'smallint';\nColumnCompiler_Oracle.prototype.mediumint = 'integer';\nColumnCompiler_Oracle.prototype.biginteger = 'number(20, 0)';\nColumnCompiler_Oracle.prototype.text = 'clob';\nColumnCompiler_Oracle.prototype.time = 'timestamp with time zone';\nColumnCompiler_Oracle.prototype.bit = 'clob';\nColumnCompiler_Oracle.prototype.json = 'clob';\nmodule.exports = ColumnCompiler_Oracle;","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/dialects/oracle/schema/oracle-columncompiler.js"],"names":["uniq","require","Raw","ColumnCompiler","createAutoIncrementTriggerAndSequence","toNumber","ColumnCompiler_Oracle","constructor","arguments","modifiers","increments","primaryKey","bigincrements","floating","precision","parsedPrecision","double","scale","decimal","integer","length","enu","allowed","maxLength","reduce","name","Math","max","String","columnBuilder","_modifiers","checkIn","datetime","without","timestamp","bool","varchar","comment","columnName","args","defaults","pushAdditional","pushQuery","tableCompiler","tableName","formatter","wrap","value","undefined","toQuery","Array","isArray","map","v","join","prototype","tinyint","smallint","mediumint","biginteger","text","time","bit","json","module","exports"],"mappings":"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","sourcesContent":["const uniq = require('lodash/uniq');\nconst Raw = require('../../../raw');\nconst ColumnCompiler = require('../../../schema/columncompiler');\nconst {\n  createAutoIncrementTriggerAndSequence,\n} = require('./internal/incrementUtils');\nconst { toNumber } = require('../../../util/helpers');\n\n// Column Compiler\n// -------\n\nclass ColumnCompiler_Oracle extends ColumnCompiler {\n  constructor() {\n    super(...arguments);\n    this.modifiers = ['defaultTo', 'checkIn', 'nullable', 'comment'];\n  }\n\n  increments({ primaryKey = true } = {}) {\n    createAutoIncrementTriggerAndSequence(this);\n    return 'integer not null' + (primaryKey ? ' primary key' : '');\n  }\n\n  bigincrements({ primaryKey = true } = {}) {\n    createAutoIncrementTriggerAndSequence(this);\n    return 'number(20, 0) not null' + (primaryKey ? ' primary key' : '');\n  }\n\n  floating(precision) {\n    const parsedPrecision = toNumber(precision, 0);\n    return `float${parsedPrecision ? `(${parsedPrecision})` : ''}`;\n  }\n\n  double(precision, scale) {\n    // if (!precision) return 'number'; // TODO: Check If default is ok\n    return `number(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n\n  decimal(precision, scale) {\n    if (precision === null) return 'decimal';\n    return `decimal(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n\n  integer(length) {\n    return length ? `number(${toNumber(length, 11)})` : 'integer';\n  }\n\n  enu(allowed) {\n    allowed = uniq(allowed);\n    const maxLength = (allowed || []).reduce(\n      (maxLength, name) => Math.max(maxLength, String(name).length),\n      1\n    );\n\n    // implicitly add the enum values as checked values\n    this.columnBuilder._modifiers.checkIn = [allowed];\n\n    return `varchar2(${maxLength})`;\n  }\n\n  datetime(without) {\n    return without ? 'timestamp' : 'timestamp with time zone';\n  }\n\n  timestamp(without) {\n    return without ? 'timestamp' : 'timestamp with time zone';\n  }\n\n  bool() {\n    // implicitly add the check for 0 and 1\n    this.columnBuilder._modifiers.checkIn = [[0, 1]];\n    return 'number(1, 0)';\n  }\n\n  varchar(length) {\n    return `varchar2(${toNumber(length, 255)})`;\n  }\n\n  // Modifiers\n  // ------\n\n  comment(comment) {\n    const columnName = this.args[0] || this.defaults('columnName');\n\n    this.pushAdditional(function () {\n      this.pushQuery(\n        `comment on column ${this.tableCompiler.tableName()}.` +\n          this.formatter.wrap(columnName) +\n          \" is '\" +\n          (comment || '') +\n          \"'\"\n      );\n    }, comment);\n  }\n\n  checkIn(value) {\n    // TODO: Maybe accept arguments also as array\n    // TODO: value(s) should be escaped properly\n    if (value === undefined) {\n      return '';\n    } else if (value instanceof Raw) {\n      value = value.toQuery();\n    } else if (Array.isArray(value)) {\n      value = value.map((v) => `'${v}'`).join(', ');\n    } else {\n      value = `'${value}'`;\n    }\n    return `check (${this.formatter.wrap(this.args[0])} in (${value}))`;\n  }\n}\n\nColumnCompiler_Oracle.prototype.tinyint = 'smallint';\nColumnCompiler_Oracle.prototype.smallint = 'smallint';\nColumnCompiler_Oracle.prototype.mediumint = 'integer';\nColumnCompiler_Oracle.prototype.biginteger = 'number(20, 0)';\nColumnCompiler_Oracle.prototype.text = 'clob';\nColumnCompiler_Oracle.prototype.time = 'timestamp with time zone';\nColumnCompiler_Oracle.prototype.bit = 'clob';\nColumnCompiler_Oracle.prototype.json = 'clob';\n\nmodule.exports = ColumnCompiler_Oracle;\n"]},"metadata":{},"sourceType":"script"}