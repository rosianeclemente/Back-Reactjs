{"ast":null,"code":"const {\n  isObject\n} = require('../util/is'); // Compiles a callback using the query builder.\n\n\nfunction compileCallback(callback, method, client, bindingsHolder) {\n  // Build the callback\n  const builder = client.queryBuilder();\n  callback.call(builder, builder); // Compile the callback, using the current formatter (to track all bindings).\n\n  const compiler = client.queryCompiler(builder, bindingsHolder.bindings); // Return the compiled & parameterized sql.\n\n  return compiler.toSQL(method || builder._method || 'select');\n}\n\nfunction wrapAsIdentifier(value, builder, client) {\n  const queryContext = builder.queryContext();\n  return client.wrapIdentifier((value || '').trim(), queryContext);\n}\n\nfunction formatDefault(value, type, client) {\n  if (value === void 0) {\n    return '';\n  } else if (value === null) {\n    return 'null';\n  } else if (value && value.isRawInstance) {\n    return value.toQuery();\n  } else if (type === 'bool') {\n    if (value === 'false') value = 0;\n    return `'${value ? 1 : 0}'`;\n  } else if ((type === 'json' || type === 'jsonb') && isObject(value)) {\n    return `'${JSON.stringify(value)}'`;\n  } else {\n    return client._escapeBinding(value.toString());\n  }\n}\n\nmodule.exports = {\n  compileCallback,\n  wrapAsIdentifier,\n  formatDefault\n};","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/formatter/formatterUtils.js"],"names":["isObject","require","compileCallback","callback","method","client","bindingsHolder","builder","queryBuilder","call","compiler","queryCompiler","bindings","toSQL","_method","wrapAsIdentifier","value","queryContext","wrapIdentifier","trim","formatDefault","type","isRawInstance","toQuery","JSON","stringify","_escapeBinding","toString","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,OAAO,CAAC,YAAD,CAA5B,C,CAEA;;;AACA,SAASC,eAAT,CAAyBC,QAAzB,EAAmCC,MAAnC,EAA2CC,MAA3C,EAAmDC,cAAnD,EAAmE;AACjE;AACA,QAAMC,OAAO,GAAGF,MAAM,CAACG,YAAP,EAAhB;AACAL,EAAAA,QAAQ,CAACM,IAAT,CAAcF,OAAd,EAAuBA,OAAvB,EAHiE,CAKjE;;AACA,QAAMG,QAAQ,GAAGL,MAAM,CAACM,aAAP,CAAqBJ,OAArB,EAA8BD,cAAc,CAACM,QAA7C,CAAjB,CANiE,CAQjE;;AACA,SAAOF,QAAQ,CAACG,KAAT,CAAeT,MAAM,IAAIG,OAAO,CAACO,OAAlB,IAA6B,QAA5C,CAAP;AACD;;AAED,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCT,OAAjC,EAA0CF,MAA1C,EAAkD;AAChD,QAAMY,YAAY,GAAGV,OAAO,CAACU,YAAR,EAArB;AACA,SAAOZ,MAAM,CAACa,cAAP,CAAsB,CAACF,KAAK,IAAI,EAAV,EAAcG,IAAd,EAAtB,EAA4CF,YAA5C,CAAP;AACD;;AAED,SAASG,aAAT,CAAuBJ,KAAvB,EAA8BK,IAA9B,EAAoChB,MAApC,EAA4C;AAC1C,MAAIW,KAAK,KAAK,KAAK,CAAnB,EAAsB;AACpB,WAAO,EAAP;AACD,GAFD,MAEO,IAAIA,KAAK,KAAK,IAAd,EAAoB;AACzB,WAAO,MAAP;AACD,GAFM,MAEA,IAAIA,KAAK,IAAIA,KAAK,CAACM,aAAnB,EAAkC;AACvC,WAAON,KAAK,CAACO,OAAN,EAAP;AACD,GAFM,MAEA,IAAIF,IAAI,KAAK,MAAb,EAAqB;AAC1B,QAAIL,KAAK,KAAK,OAAd,EAAuBA,KAAK,GAAG,CAAR;AACvB,WAAQ,IAAGA,KAAK,GAAG,CAAH,GAAO,CAAE,GAAzB;AACD,GAHM,MAGA,IAAI,CAACK,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,OAA7B,KAAyCrB,QAAQ,CAACgB,KAAD,CAArD,EAA8D;AACnE,WAAQ,IAAGQ,IAAI,CAACC,SAAL,CAAeT,KAAf,CAAsB,GAAjC;AACD,GAFM,MAEA;AACL,WAAOX,MAAM,CAACqB,cAAP,CAAsBV,KAAK,CAACW,QAAN,EAAtB,CAAP;AACD;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACf3B,EAAAA,eADe;AAEfa,EAAAA,gBAFe;AAGfK,EAAAA;AAHe,CAAjB","sourcesContent":["const { isObject } = require('../util/is');\n\n// Compiles a callback using the query builder.\nfunction compileCallback(callback, method, client, bindingsHolder) {\n  // Build the callback\n  const builder = client.queryBuilder();\n  callback.call(builder, builder);\n\n  // Compile the callback, using the current formatter (to track all bindings).\n  const compiler = client.queryCompiler(builder, bindingsHolder.bindings);\n\n  // Return the compiled & parameterized sql.\n  return compiler.toSQL(method || builder._method || 'select');\n}\n\nfunction wrapAsIdentifier(value, builder, client) {\n  const queryContext = builder.queryContext();\n  return client.wrapIdentifier((value || '').trim(), queryContext);\n}\n\nfunction formatDefault(value, type, client) {\n  if (value === void 0) {\n    return '';\n  } else if (value === null) {\n    return 'null';\n  } else if (value && value.isRawInstance) {\n    return value.toQuery();\n  } else if (type === 'bool') {\n    if (value === 'false') value = 0;\n    return `'${value ? 1 : 0}'`;\n  } else if ((type === 'json' || type === 'jsonb') && isObject(value)) {\n    return `'${JSON.stringify(value)}'`;\n  } else {\n    return client._escapeBinding(value.toString());\n  }\n}\n\nmodule.exports = {\n  compileCallback,\n  wrapAsIdentifier,\n  formatDefault,\n};\n"]},"metadata":{},"sourceType":"script"}