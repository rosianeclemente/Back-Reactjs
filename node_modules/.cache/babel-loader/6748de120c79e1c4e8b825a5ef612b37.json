{"ast":null,"code":"/* eslint max-len:0 */\n// MSSQL Table Builder & Compiler\n// -------\nconst TableCompiler = require('../../../schema/tablecompiler');\n\nconst helpers = require('../../../util/helpers'); // Table Compiler\n// ------\n\n\nclass TableCompiler_MSSQL extends TableCompiler {\n  constructor(client, tableBuilder) {\n    super(client, tableBuilder);\n  }\n\n  createQuery(columns, ifNot) {\n    const createStatement = ifNot ? `if object_id('${this.tableName()}', 'U') is null CREATE TABLE ` : 'CREATE TABLE ';\n    const sql = createStatement + this.tableName() + (this._formatting ? ' (\\n    ' : ' (') + columns.sql.join(this._formatting ? ',\\n    ' : ', ') + ')';\n\n    if (this.single.comment) {\n      const {\n        comment\n      } = this.single; // XXX: This is a byte limit, not character, so we cannot definitively say they'll exceed the limit without database collation info.\n\n      if (comment.length > 7500 / 2) this.client.logger.warn('Your comment might be longer than the max comment length for MSSQL of 7,500 bytes.');\n    }\n\n    this.pushQuery(sql);\n  } // Compiles column add.  Multiple columns need only one ADD clause (not one ADD per column) so core addColumns doesn't work.  #1348\n\n\n  addColumns(columns, prefix) {\n    prefix = prefix || this.addColumnsPrefix;\n\n    if (columns.sql.length > 0) {\n      this.pushQuery({\n        sql: (this.lowerCase ? 'alter table ' : 'ALTER TABLE ') + this.tableName() + ' ' + prefix + columns.sql.join(', '),\n        bindings: columns.bindings\n      });\n    }\n  }\n\n  alterColumns(columns, colBuilder) {\n    for (let i = 0, l = colBuilder.length; i < l; i++) {\n      const builder = colBuilder[i];\n\n      if (builder.modified.defaultTo) {\n        const schema = this.schemaNameRaw || 'dbo';\n        const baseQuery = `\n              DECLARE @constraint varchar(100) = (SELECT default_constraints.name\n                                                  FROM sys.all_columns\n                                                  INNER JOIN sys.tables\n                                                    ON all_columns.object_id = tables.object_id\n                                                  INNER JOIN sys.schemas\n                                                    ON tables.schema_id = schemas.schema_id\n                                                  INNER JOIN sys.default_constraints\n                                                    ON all_columns.default_object_id = default_constraints.object_id\n                                                  WHERE schemas.name = '${schema}'\n                                                  AND tables.name = '${this.tableNameRaw}'\n                                                  AND all_columns.name = '${builder.getColumnName()}')\n\n              IF @constraint IS NOT NULL EXEC('ALTER TABLE ${this.tableNameRaw} DROP CONSTRAINT ' + @constraint)`;\n        this.pushQuery(baseQuery);\n      }\n    } // in SQL server only one column can be altered at a time\n\n\n    columns.sql.forEach(sql => {\n      this.pushQuery({\n        sql: (this.lowerCase ? 'alter table ' : 'ALTER TABLE ') + this.tableName() + ' ' + (this.lowerCase ? this.alterColumnPrefix.toLowerCase() : this.alterColumnPrefix) + sql,\n        bindings: columns.bindings\n      });\n    });\n  } // Compiles column drop.  Multiple columns need only one DROP clause (not one DROP per column) so core dropColumn doesn't work.  #1348\n\n\n  dropColumn() {\n    const _this2 = this;\n\n    const columns = helpers.normalizeArr.apply(null, arguments);\n    const columnsArray = Array.isArray(columns) ? columns : [columns];\n    const drops = columnsArray.map(column => _this2.formatter.wrap(column));\n    const schema = this.schemaNameRaw || 'dbo';\n\n    for (const column of columns) {\n      const baseQuery = `\n              DECLARE @constraint varchar(100) = (SELECT default_constraints.name\n                                                  FROM sys.all_columns\n                                                  INNER JOIN sys.tables\n                                                    ON all_columns.object_id = tables.object_id\n                                                  INNER JOIN sys.schemas\n                                                    ON tables.schema_id = schemas.schema_id\n                                                  INNER JOIN sys.default_constraints\n                                                    ON all_columns.default_object_id = default_constraints.object_id\n                                                  WHERE schemas.name = '${schema}'\n                                                  AND tables.name = '${this.tableNameRaw}'\n                                                  AND all_columns.name = '${column}')\n\n              IF @constraint IS NOT NULL EXEC('ALTER TABLE ${this.tableNameRaw} DROP CONSTRAINT ' + @constraint)`;\n      this.pushQuery(baseQuery);\n    }\n\n    this.pushQuery((this.lowerCase ? 'alter table ' : 'ALTER TABLE ') + this.tableName() + ' ' + this.dropColumnPrefix + drops.join(', '));\n  } // Compiles the comment on the table.\n\n\n  comment() {}\n\n  changeType() {} // Renames a column on the table.\n\n\n  renameColumn(from, to) {\n    this.pushQuery(`exec sp_rename ${this.client.parameter(this.tableName() + '.' + from, this.tableBuilder, this.bindingsHolder)}, ${this.client.parameter(to, this.tableBuilder, this.bindingsHolder)}, 'COLUMN'`);\n  }\n\n  dropFKRefs(runner, refs) {\n    const formatter = this.client.formatter(this.tableBuilder);\n    return Promise.all(refs.map(function (ref) {\n      const constraintName = formatter.wrap(ref.CONSTRAINT_NAME);\n      const tableName = formatter.wrap(ref.TABLE_NAME);\n      return runner.query({\n        sql: `ALTER TABLE ${tableName} DROP CONSTRAINT ${constraintName}`\n      });\n    }));\n  }\n\n  createFKRefs(runner, refs) {\n    const formatter = this.client.formatter(this.tableBuilder);\n    return Promise.all(refs.map(function (ref) {\n      const tableName = formatter.wrap(ref.TABLE_NAME);\n      const keyName = formatter.wrap(ref.CONSTRAINT_NAME);\n      const column = formatter.columnize(ref.COLUMN_NAME);\n      const references = formatter.columnize(ref.REFERENCED_COLUMN_NAME);\n      const inTable = formatter.wrap(ref.REFERENCED_TABLE_NAME);\n      const onUpdate = ` ON UPDATE ${ref.UPDATE_RULE}`;\n      const onDelete = ` ON DELETE ${ref.DELETE_RULE}`;\n      return runner.query({\n        sql: `ALTER TABLE ${tableName} ADD CONSTRAINT ${keyName}` + ' FOREIGN KEY (' + column + ') REFERENCES ' + inTable + ' (' + references + ')' + onUpdate + onDelete\n      });\n    }));\n  }\n\n  index(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(`CREATE INDEX ${indexName} ON ${this.tableName()} (${this.formatter.columnize(columns)})`);\n  }\n\n  primary(columns, constraintName) {\n    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n\n    if (!this.forCreate) {\n      this.pushQuery(`ALTER TABLE ${this.tableName()} ADD CONSTRAINT ${constraintName} PRIMARY KEY (${this.formatter.columnize(columns)})`);\n    } else {\n      this.pushQuery(`CONSTRAINT ${constraintName} PRIMARY KEY (${this.formatter.columnize(columns)})`);\n    }\n  }\n\n  unique(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, columns);\n\n    if (!Array.isArray(columns)) {\n      columns = [columns];\n    }\n\n    const whereAllTheColumnsAreNotNull = columns.map(column => this.formatter.columnize(column) + ' IS NOT NULL').join(' AND '); // make unique constraint that allows null https://stackoverflow.com/a/767702/360060\n    // to be more or less compatible with other DBs (if any of the columns is NULL then \"duplicates\" are allowed)\n\n    this.pushQuery(`CREATE UNIQUE INDEX ${indexName} ON ${this.tableName()} (${this.formatter.columnize(columns)}) WHERE ${whereAllTheColumnsAreNotNull}`);\n  } // Compile a drop index command.\n\n\n  dropIndex(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(`DROP INDEX ${indexName} ON ${this.tableName()}`);\n  } // Compile a drop foreign key command.\n\n\n  dropForeign(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('foreign', this.tableNameRaw, columns);\n    this.pushQuery(`ALTER TABLE ${this.tableName()} DROP CONSTRAINT ${indexName}`);\n  } // Compile a drop primary key command.\n\n\n  dropPrimary(constraintName) {\n    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    this.pushQuery(`ALTER TABLE ${this.tableName()} DROP CONSTRAINT ${constraintName}`);\n  } // Compile a drop unique key command.\n\n\n  dropUnique(column, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, column);\n    this.pushQuery(`DROP INDEX ${indexName} ON ${this.tableName()}`);\n  }\n\n}\n\nTableCompiler_MSSQL.prototype.createAlterTableMethods = ['foreign', 'primary'];\nTableCompiler_MSSQL.prototype.lowerCase = false;\nTableCompiler_MSSQL.prototype.addColumnsPrefix = 'ADD ';\nTableCompiler_MSSQL.prototype.dropColumnPrefix = 'DROP COLUMN ';\nTableCompiler_MSSQL.prototype.alterColumnPrefix = 'ALTER COLUMN ';\nmodule.exports = TableCompiler_MSSQL;","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/dialects/mssql/schema/mssql-tablecompiler.js"],"names":["TableCompiler","require","helpers","TableCompiler_MSSQL","constructor","client","tableBuilder","createQuery","columns","ifNot","createStatement","tableName","sql","_formatting","join","single","comment","length","logger","warn","pushQuery","addColumns","prefix","addColumnsPrefix","lowerCase","bindings","alterColumns","colBuilder","i","l","builder","modified","defaultTo","schema","schemaNameRaw","baseQuery","tableNameRaw","getColumnName","forEach","alterColumnPrefix","toLowerCase","dropColumn","_this2","normalizeArr","apply","arguments","columnsArray","Array","isArray","drops","map","column","formatter","wrap","dropColumnPrefix","changeType","renameColumn","from","to","parameter","bindingsHolder","dropFKRefs","runner","refs","Promise","all","ref","constraintName","CONSTRAINT_NAME","TABLE_NAME","query","createFKRefs","keyName","columnize","COLUMN_NAME","references","REFERENCED_COLUMN_NAME","inTable","REFERENCED_TABLE_NAME","onUpdate","UPDATE_RULE","onDelete","DELETE_RULE","index","indexName","_indexCommand","primary","forCreate","unique","whereAllTheColumnsAreNotNull","dropIndex","dropForeign","dropPrimary","dropUnique","prototype","createAlterTableMethods","module","exports"],"mappings":"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","sourcesContent":["/* eslint max-len:0 */\n\n// MSSQL Table Builder & Compiler\n// -------\nconst TableCompiler = require('../../../schema/tablecompiler');\nconst helpers = require('../../../util/helpers');\n\n// Table Compiler\n// ------\n\nclass TableCompiler_MSSQL extends TableCompiler {\n  constructor(client, tableBuilder) {\n    super(client, tableBuilder);\n  }\n\n  createQuery(columns, ifNot) {\n    const createStatement = ifNot\n      ? `if object_id('${this.tableName()}', 'U') is null CREATE TABLE `\n      : 'CREATE TABLE ';\n    const sql =\n      createStatement +\n      this.tableName() +\n      (this._formatting ? ' (\\n    ' : ' (') +\n      columns.sql.join(this._formatting ? ',\\n    ' : ', ') +\n      ')';\n\n    if (this.single.comment) {\n      const { comment } = this.single;\n      // XXX: This is a byte limit, not character, so we cannot definitively say they'll exceed the limit without database collation info.\n      if (comment.length > 7500 / 2)\n        this.client.logger.warn(\n          'Your comment might be longer than the max comment length for MSSQL of 7,500 bytes.'\n        );\n    }\n\n    this.pushQuery(sql);\n  }\n\n  // Compiles column add.  Multiple columns need only one ADD clause (not one ADD per column) so core addColumns doesn't work.  #1348\n  addColumns(columns, prefix) {\n    prefix = prefix || this.addColumnsPrefix;\n\n    if (columns.sql.length > 0) {\n      this.pushQuery({\n        sql:\n          (this.lowerCase ? 'alter table ' : 'ALTER TABLE ') +\n          this.tableName() +\n          ' ' +\n          prefix +\n          columns.sql.join(', '),\n        bindings: columns.bindings,\n      });\n    }\n  }\n\n  alterColumns(columns, colBuilder) {\n    for (let i = 0, l = colBuilder.length; i < l; i++) {\n      const builder = colBuilder[i];\n      if (builder.modified.defaultTo) {\n        const schema = this.schemaNameRaw || 'dbo';\n        const baseQuery = `\n              DECLARE @constraint varchar(100) = (SELECT default_constraints.name\n                                                  FROM sys.all_columns\n                                                  INNER JOIN sys.tables\n                                                    ON all_columns.object_id = tables.object_id\n                                                  INNER JOIN sys.schemas\n                                                    ON tables.schema_id = schemas.schema_id\n                                                  INNER JOIN sys.default_constraints\n                                                    ON all_columns.default_object_id = default_constraints.object_id\n                                                  WHERE schemas.name = '${schema}'\n                                                  AND tables.name = '${\n                                                    this.tableNameRaw\n                                                  }'\n                                                  AND all_columns.name = '${builder.getColumnName()}')\n\n              IF @constraint IS NOT NULL EXEC('ALTER TABLE ${\n                this.tableNameRaw\n              } DROP CONSTRAINT ' + @constraint)`;\n        this.pushQuery(baseQuery);\n      }\n    }\n    // in SQL server only one column can be altered at a time\n    columns.sql.forEach((sql) => {\n      this.pushQuery({\n        sql:\n          (this.lowerCase ? 'alter table ' : 'ALTER TABLE ') +\n          this.tableName() +\n          ' ' +\n          (this.lowerCase\n            ? this.alterColumnPrefix.toLowerCase()\n            : this.alterColumnPrefix) +\n          sql,\n        bindings: columns.bindings,\n      });\n    });\n  }\n\n  // Compiles column drop.  Multiple columns need only one DROP clause (not one DROP per column) so core dropColumn doesn't work.  #1348\n  dropColumn() {\n    const _this2 = this;\n    const columns = helpers.normalizeArr.apply(null, arguments);\n    const columnsArray = Array.isArray(columns) ? columns : [columns];\n    const drops = columnsArray.map((column) => _this2.formatter.wrap(column));\n    const schema = this.schemaNameRaw || 'dbo';\n\n    for (const column of columns) {\n      const baseQuery = `\n              DECLARE @constraint varchar(100) = (SELECT default_constraints.name\n                                                  FROM sys.all_columns\n                                                  INNER JOIN sys.tables\n                                                    ON all_columns.object_id = tables.object_id\n                                                  INNER JOIN sys.schemas\n                                                    ON tables.schema_id = schemas.schema_id\n                                                  INNER JOIN sys.default_constraints\n                                                    ON all_columns.default_object_id = default_constraints.object_id\n                                                  WHERE schemas.name = '${schema}'\n                                                  AND tables.name = '${this.tableNameRaw}'\n                                                  AND all_columns.name = '${column}')\n\n              IF @constraint IS NOT NULL EXEC('ALTER TABLE ${this.tableNameRaw} DROP CONSTRAINT ' + @constraint)`;\n      this.pushQuery(baseQuery);\n    }\n    this.pushQuery(\n      (this.lowerCase ? 'alter table ' : 'ALTER TABLE ') +\n        this.tableName() +\n        ' ' +\n        this.dropColumnPrefix +\n        drops.join(', ')\n    );\n  }\n\n  // Compiles the comment on the table.\n  comment() {}\n\n  changeType() {}\n\n  // Renames a column on the table.\n  renameColumn(from, to) {\n    this.pushQuery(\n      `exec sp_rename ${this.client.parameter(\n        this.tableName() + '.' + from,\n        this.tableBuilder,\n        this.bindingsHolder\n      )}, ${this.client.parameter(\n        to,\n        this.tableBuilder,\n        this.bindingsHolder\n      )}, 'COLUMN'`\n    );\n  }\n\n  dropFKRefs(runner, refs) {\n    const formatter = this.client.formatter(this.tableBuilder);\n    return Promise.all(\n      refs.map(function (ref) {\n        const constraintName = formatter.wrap(ref.CONSTRAINT_NAME);\n        const tableName = formatter.wrap(ref.TABLE_NAME);\n        return runner.query({\n          sql: `ALTER TABLE ${tableName} DROP CONSTRAINT ${constraintName}`,\n        });\n      })\n    );\n  }\n\n  createFKRefs(runner, refs) {\n    const formatter = this.client.formatter(this.tableBuilder);\n\n    return Promise.all(\n      refs.map(function (ref) {\n        const tableName = formatter.wrap(ref.TABLE_NAME);\n        const keyName = formatter.wrap(ref.CONSTRAINT_NAME);\n        const column = formatter.columnize(ref.COLUMN_NAME);\n        const references = formatter.columnize(ref.REFERENCED_COLUMN_NAME);\n        const inTable = formatter.wrap(ref.REFERENCED_TABLE_NAME);\n        const onUpdate = ` ON UPDATE ${ref.UPDATE_RULE}`;\n        const onDelete = ` ON DELETE ${ref.DELETE_RULE}`;\n\n        return runner.query({\n          sql:\n            `ALTER TABLE ${tableName} ADD CONSTRAINT ${keyName}` +\n            ' FOREIGN KEY (' +\n            column +\n            ') REFERENCES ' +\n            inTable +\n            ' (' +\n            references +\n            ')' +\n            onUpdate +\n            onDelete,\n        });\n      })\n    );\n  }\n\n  index(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(\n      `CREATE INDEX ${indexName} ON ${this.tableName()} (${this.formatter.columnize(\n        columns\n      )})`\n    );\n  }\n\n  primary(columns, constraintName) {\n    constraintName = constraintName\n      ? this.formatter.wrap(constraintName)\n      : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    if (!this.forCreate) {\n      this.pushQuery(\n        `ALTER TABLE ${this.tableName()} ADD CONSTRAINT ${constraintName} PRIMARY KEY (${this.formatter.columnize(\n          columns\n        )})`\n      );\n    } else {\n      this.pushQuery(\n        `CONSTRAINT ${constraintName} PRIMARY KEY (${this.formatter.columnize(\n          columns\n        )})`\n      );\n    }\n  }\n\n  unique(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('unique', this.tableNameRaw, columns);\n\n    if (!Array.isArray(columns)) {\n      columns = [columns];\n    }\n\n    const whereAllTheColumnsAreNotNull = columns\n      .map((column) => this.formatter.columnize(column) + ' IS NOT NULL')\n      .join(' AND ');\n\n    // make unique constraint that allows null https://stackoverflow.com/a/767702/360060\n    // to be more or less compatible with other DBs (if any of the columns is NULL then \"duplicates\" are allowed)\n    this.pushQuery(\n      `CREATE UNIQUE INDEX ${indexName} ON ${this.tableName()} (${this.formatter.columnize(\n        columns\n      )}) WHERE ${whereAllTheColumnsAreNotNull}`\n    );\n  }\n\n  // Compile a drop index command.\n  dropIndex(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(`DROP INDEX ${indexName} ON ${this.tableName()}`);\n  }\n\n  // Compile a drop foreign key command.\n  dropForeign(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('foreign', this.tableNameRaw, columns);\n    this.pushQuery(\n      `ALTER TABLE ${this.tableName()} DROP CONSTRAINT ${indexName}`\n    );\n  }\n\n  // Compile a drop primary key command.\n  dropPrimary(constraintName) {\n    constraintName = constraintName\n      ? this.formatter.wrap(constraintName)\n      : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    this.pushQuery(\n      `ALTER TABLE ${this.tableName()} DROP CONSTRAINT ${constraintName}`\n    );\n  }\n\n  // Compile a drop unique key command.\n  dropUnique(column, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('unique', this.tableNameRaw, column);\n    this.pushQuery(`DROP INDEX ${indexName} ON ${this.tableName()}`);\n  }\n}\n\nTableCompiler_MSSQL.prototype.createAlterTableMethods = ['foreign', 'primary'];\nTableCompiler_MSSQL.prototype.lowerCase = false;\n\nTableCompiler_MSSQL.prototype.addColumnsPrefix = 'ADD ';\nTableCompiler_MSSQL.prototype.dropColumnPrefix = 'DROP COLUMN ';\nTableCompiler_MSSQL.prototype.alterColumnPrefix = 'ALTER COLUMN ';\n\nmodule.exports = TableCompiler_MSSQL;\n"]},"metadata":{},"sourceType":"script"}