{"ast":null,"code":"// SQLite3\n// -------\nconst defaults = require('lodash/defaults');\n\nconst map = require('lodash/map');\n\nconst {\n  promisify\n} = require('util');\n\nconst Client = require('../../client');\n\nconst Raw = require('../../raw');\n\nconst Transaction = require('./execution/sqlite-transaction');\n\nconst SqliteQueryCompiler = require('./query/sqlite-querycompiler');\n\nconst SchemaCompiler = require('./schema/sqlite-compiler');\n\nconst ColumnCompiler = require('./schema/sqlite-columncompiler');\n\nconst TableCompiler = require('./schema/sqlite-tablecompiler');\n\nconst SQLite3_DDL = require('./schema/ddl');\n\nconst Formatter = require('../../formatter');\n\nclass Client_SQLite3 extends Client {\n  constructor(config) {\n    super(config);\n\n    if (config.useNullAsDefault === undefined) {\n      this.logger.warn('sqlite does not support inserting default values. Set the ' + '`useNullAsDefault` flag to hide this warning. ' + '(see docs http://knexjs.org/#Builder-insert).');\n    }\n  }\n\n  _driver() {\n    return require('sqlite3');\n  }\n\n  schemaCompiler() {\n    return new SchemaCompiler(this, ...arguments);\n  }\n\n  transaction() {\n    return new Transaction(this, ...arguments);\n  }\n\n  queryCompiler(builder, formatter) {\n    return new SqliteQueryCompiler(this, builder, formatter);\n  }\n\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n\n  ddl(compiler, pragma, connection) {\n    return new SQLite3_DDL(this, compiler, pragma, connection);\n  }\n\n  wrapIdentifierImpl(value) {\n    return value !== '*' ? `\\`${value.replace(/`/g, '``')}\\`` : '*';\n  } // Get a raw connection from the database, returning a promise with the connection object.\n\n\n  acquireRawConnection() {\n    return new Promise((resolve, reject) => {\n      // the default mode for sqlite3\n      let flags = this.driver.OPEN_READWRITE | this.driver.OPEN_CREATE;\n\n      if (this.connectionSettings.flags) {\n        if (!Array.isArray(this.connectionSettings.flags)) {\n          throw new Error(`flags must be an array of strings`);\n        }\n\n        this.connectionSettings.flags.forEach(_flag => {\n          if (!_flag.startsWith('OPEN_') || !this.driver[_flag]) {\n            throw new Error(`flag ${_flag} not supported by node-sqlite3`);\n          }\n\n          flags = flags | this.driver[_flag];\n        });\n      }\n\n      const db = new this.driver.Database(this.connectionSettings.filename, flags, err => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(db);\n      });\n    });\n  } // Used to explicitly close a connection, called internally by the pool when\n  // a connection times out or the pool is shutdown.\n\n\n  async destroyRawConnection(connection) {\n    const close = promisify(cb => connection.close(cb));\n    return close();\n  } // Runs the query on the specified connection, providing the bindings and any\n  // other necessary prep work.\n\n\n  _query(connection, obj) {\n    if (!obj.sql) throw new Error('The query is empty');\n    const {\n      method\n    } = obj;\n    let callMethod;\n\n    switch (method) {\n      case 'insert':\n      case 'update':\n      case 'counter':\n      case 'del':\n        callMethod = 'run';\n        break;\n\n      default:\n        callMethod = 'all';\n    }\n\n    return new Promise(function (resolver, rejecter) {\n      if (!connection || !connection[callMethod]) {\n        return rejecter(new Error(`Error calling ${callMethod} on connection.`));\n      }\n\n      connection[callMethod](obj.sql, obj.bindings, function (err, response) {\n        if (err) return rejecter(err);\n        obj.response = response; // We need the context here, as it contains\n        // the \"this.lastID\" or \"this.changes\"\n\n        obj.context = this;\n        return resolver(obj);\n      });\n    });\n  }\n\n  _stream(connection, obj, stream) {\n    if (!obj.sql) throw new Error('The query is empty');\n    const client = this;\n    return new Promise(function (resolver, rejecter) {\n      stream.on('error', rejecter);\n      stream.on('end', resolver);\n      return client._query(connection, obj).then(obj => obj.response).then(rows => rows.forEach(row => stream.write(row))).catch(function (err) {\n        stream.emit('error', err);\n      }).then(function () {\n        stream.end();\n      });\n    });\n  } // Ensures the response is returned in the same format as other clients.\n\n\n  processResponse(obj, runner) {\n    const ctx = obj.context;\n    const {\n      response\n    } = obj;\n    if (obj.output) return obj.output.call(runner, response);\n\n    switch (obj.method) {\n      case 'select':\n        return response;\n\n      case 'first':\n        return response[0];\n\n      case 'pluck':\n        return map(response, obj.pluck);\n\n      case 'insert':\n        return [ctx.lastID];\n\n      case 'del':\n      case 'update':\n      case 'counter':\n        return ctx.changes;\n\n      default:\n        return response;\n    }\n  }\n\n  poolDefaults() {\n    return defaults({\n      min: 1,\n      max: 1\n    }, super.poolDefaults());\n  }\n\n  formatter(builder) {\n    return new Formatter(this, builder);\n  }\n\n  values(values, builder, formatter) {\n    if (Array.isArray(values)) {\n      if (Array.isArray(values[0])) {\n        return `( values ${values.map(value => `(${this.parameterize(value, undefined, builder, formatter)})`).join(', ')})`;\n      }\n\n      return `(${this.parameterize(values, undefined, builder, formatter)})`;\n    }\n\n    if (values instanceof Raw) {\n      return `(${this.parameter(values, builder, formatter)})`;\n    }\n\n    return this.parameter(values, builder, formatter);\n  }\n\n}\n\nObject.assign(Client_SQLite3.prototype, {\n  dialect: 'sqlite3',\n  driverName: 'sqlite3'\n});\nmodule.exports = Client_SQLite3;","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/dialects/sqlite3/index.js"],"names":["defaults","require","map","promisify","Client","Raw","Transaction","SqliteQueryCompiler","SchemaCompiler","ColumnCompiler","TableCompiler","SQLite3_DDL","Formatter","Client_SQLite3","constructor","config","useNullAsDefault","undefined","logger","warn","_driver","schemaCompiler","arguments","transaction","queryCompiler","builder","formatter","columnCompiler","tableCompiler","ddl","compiler","pragma","connection","wrapIdentifierImpl","value","replace","acquireRawConnection","Promise","resolve","reject","flags","driver","OPEN_READWRITE","OPEN_CREATE","connectionSettings","Array","isArray","Error","forEach","_flag","startsWith","db","Database","filename","err","destroyRawConnection","close","cb","_query","obj","sql","method","callMethod","resolver","rejecter","bindings","response","context","_stream","stream","client","on","then","rows","row","write","catch","emit","end","processResponse","runner","ctx","output","call","pluck","lastID","changes","poolDefaults","min","max","values","parameterize","join","parameter","Object","assign","prototype","dialect","driverName","module","exports"],"mappings":"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","sourcesContent":["// SQLite3\n// -------\nconst defaults = require('lodash/defaults');\nconst map = require('lodash/map');\nconst { promisify } = require('util');\n\nconst Client = require('../../client');\n\nconst Raw = require('../../raw');\nconst Transaction = require('./execution/sqlite-transaction');\nconst SqliteQueryCompiler = require('./query/sqlite-querycompiler');\nconst SchemaCompiler = require('./schema/sqlite-compiler');\nconst ColumnCompiler = require('./schema/sqlite-columncompiler');\nconst TableCompiler = require('./schema/sqlite-tablecompiler');\nconst SQLite3_DDL = require('./schema/ddl');\nconst Formatter = require('../../formatter');\n\nclass Client_SQLite3 extends Client {\n  constructor(config) {\n    super(config);\n    if (config.useNullAsDefault === undefined) {\n      this.logger.warn(\n        'sqlite does not support inserting default values. Set the ' +\n          '`useNullAsDefault` flag to hide this warning. ' +\n          '(see docs http://knexjs.org/#Builder-insert).'\n      );\n    }\n  }\n\n  _driver() {\n    return require('sqlite3');\n  }\n\n  schemaCompiler() {\n    return new SchemaCompiler(this, ...arguments);\n  }\n\n  transaction() {\n    return new Transaction(this, ...arguments);\n  }\n\n  queryCompiler(builder, formatter) {\n    return new SqliteQueryCompiler(this, builder, formatter);\n  }\n\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n\n  ddl(compiler, pragma, connection) {\n    return new SQLite3_DDL(this, compiler, pragma, connection);\n  }\n\n  wrapIdentifierImpl(value) {\n    return value !== '*' ? `\\`${value.replace(/`/g, '``')}\\`` : '*';\n  }\n\n  // Get a raw connection from the database, returning a promise with the connection object.\n  acquireRawConnection() {\n    return new Promise((resolve, reject) => {\n      // the default mode for sqlite3\n      let flags = this.driver.OPEN_READWRITE | this.driver.OPEN_CREATE;\n\n      if (this.connectionSettings.flags) {\n        if (!Array.isArray(this.connectionSettings.flags)) {\n          throw new Error(`flags must be an array of strings`);\n        }\n        this.connectionSettings.flags.forEach((_flag) => {\n          if (!_flag.startsWith('OPEN_') || !this.driver[_flag]) {\n            throw new Error(`flag ${_flag} not supported by node-sqlite3`);\n          }\n          flags = flags | this.driver[_flag];\n        });\n      }\n\n      const db = new this.driver.Database(\n        this.connectionSettings.filename,\n        flags,\n        (err) => {\n          if (err) {\n            return reject(err);\n          }\n          resolve(db);\n        }\n      );\n    });\n  }\n\n  // Used to explicitly close a connection, called internally by the pool when\n  // a connection times out or the pool is shutdown.\n  async destroyRawConnection(connection) {\n    const close = promisify((cb) => connection.close(cb));\n    return close();\n  }\n\n  // Runs the query on the specified connection, providing the bindings and any\n  // other necessary prep work.\n  _query(connection, obj) {\n    if (!obj.sql) throw new Error('The query is empty');\n\n    const { method } = obj;\n    let callMethod;\n    switch (method) {\n      case 'insert':\n      case 'update':\n      case 'counter':\n      case 'del':\n        callMethod = 'run';\n        break;\n      default:\n        callMethod = 'all';\n    }\n    return new Promise(function (resolver, rejecter) {\n      if (!connection || !connection[callMethod]) {\n        return rejecter(\n          new Error(`Error calling ${callMethod} on connection.`)\n        );\n      }\n      connection[callMethod](obj.sql, obj.bindings, function (err, response) {\n        if (err) return rejecter(err);\n        obj.response = response;\n\n        // We need the context here, as it contains\n        // the \"this.lastID\" or \"this.changes\"\n        obj.context = this;\n        return resolver(obj);\n      });\n    });\n  }\n\n  _stream(connection, obj, stream) {\n    if (!obj.sql) throw new Error('The query is empty');\n\n    const client = this;\n    return new Promise(function (resolver, rejecter) {\n      stream.on('error', rejecter);\n      stream.on('end', resolver);\n      return client\n        ._query(connection, obj)\n        .then((obj) => obj.response)\n        .then((rows) => rows.forEach((row) => stream.write(row)))\n        .catch(function (err) {\n          stream.emit('error', err);\n        })\n        .then(function () {\n          stream.end();\n        });\n    });\n  }\n\n  // Ensures the response is returned in the same format as other clients.\n  processResponse(obj, runner) {\n    const ctx = obj.context;\n    const { response } = obj;\n    if (obj.output) return obj.output.call(runner, response);\n    switch (obj.method) {\n      case 'select':\n        return response;\n      case 'first':\n        return response[0];\n      case 'pluck':\n        return map(response, obj.pluck);\n      case 'insert':\n        return [ctx.lastID];\n      case 'del':\n      case 'update':\n      case 'counter':\n        return ctx.changes;\n      default:\n        return response;\n    }\n  }\n\n  poolDefaults() {\n    return defaults({ min: 1, max: 1 }, super.poolDefaults());\n  }\n\n  formatter(builder) {\n    return new Formatter(this, builder);\n  }\n\n  values(values, builder, formatter) {\n    if (Array.isArray(values)) {\n      if (Array.isArray(values[0])) {\n        return `( values ${values\n          .map(\n            (value) =>\n              `(${this.parameterize(value, undefined, builder, formatter)})`\n          )\n          .join(', ')})`;\n      }\n      return `(${this.parameterize(values, undefined, builder, formatter)})`;\n    }\n\n    if (values instanceof Raw) {\n      return `(${this.parameter(values, builder, formatter)})`;\n    }\n\n    return this.parameter(values, builder, formatter);\n  }\n}\n\nObject.assign(Client_SQLite3.prototype, {\n  dialect: 'sqlite3',\n\n  driverName: 'sqlite3',\n});\n\nmodule.exports = Client_SQLite3;\n"]},"metadata":{},"sourceType":"script"}