{"ast":null,"code":"// Oracle Client\n// -------\nconst {\n  ReturningHelper\n} = require('./utils');\n\nconst {\n  isConnectionError\n} = require('./utils');\n\nconst Client = require('../../client');\n\nconst SchemaCompiler = require('./schema/oracle-compiler');\n\nconst ColumnBuilder = require('./schema/oracle-columnbuilder');\n\nconst ColumnCompiler = require('./schema/oracle-columncompiler');\n\nconst TableCompiler = require('./schema/oracle-tablecompiler'); // Always initialize with the \"QueryBuilder\" and \"QueryCompiler\"\n// objects, which extend the base 'lib/query/builder' and\n// 'lib/query/compiler', respectively.\n\n\nclass Client_Oracle extends Client {\n  schemaCompiler() {\n    return new SchemaCompiler(this, ...arguments);\n  }\n\n  columnBuilder() {\n    return new ColumnBuilder(this, ...arguments);\n  }\n\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  } // Return the database for the Oracle client.\n\n\n  database() {\n    return this.connectionSettings.database;\n  } // Position the bindings for the query.\n\n\n  positionBindings(sql) {\n    let questionCount = 0;\n    return sql.replace(/\\?/g, function () {\n      questionCount += 1;\n      return `:${questionCount}`;\n    });\n  }\n\n  _stream(connection, obj, stream, options) {\n    if (!obj.sql) throw new Error('The query is empty');\n    return new Promise(function (resolver, rejecter) {\n      stream.on('error', err => {\n        if (isConnectionError(err)) {\n          connection.__knex__disposed = err;\n        }\n\n        rejecter(err);\n      });\n      stream.on('end', resolver);\n      const queryStream = connection.queryStream(obj.sql, obj.bindings, options);\n      queryStream.pipe(stream);\n      queryStream.on('error', function (error) {\n        rejecter(error);\n        stream.emit('error', error);\n      });\n    });\n  } // Formatter part\n\n\n  alias(first, second) {\n    return first + ' ' + second;\n  }\n\n  parameter(value, builder, formatter) {\n    // Returning helper uses always ROWID as string\n    if (value instanceof ReturningHelper && this.driver) {\n      value = new this.driver.OutParam(this.driver.OCCISTRING);\n    } else if (typeof value === 'boolean') {\n      value = value ? 1 : 0;\n    }\n\n    return super.parameter(value, builder, formatter);\n  }\n\n}\n\nObject.assign(Client_Oracle.prototype, {\n  dialect: 'oracle',\n  driverName: 'oracle'\n});\nmodule.exports = Client_Oracle;","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/dialects/oracle/index.js"],"names":["ReturningHelper","require","isConnectionError","Client","SchemaCompiler","ColumnBuilder","ColumnCompiler","TableCompiler","Client_Oracle","schemaCompiler","arguments","columnBuilder","columnCompiler","tableCompiler","database","connectionSettings","positionBindings","sql","questionCount","replace","_stream","connection","obj","stream","options","Error","Promise","resolver","rejecter","on","err","__knex__disposed","queryStream","bindings","pipe","error","emit","alias","first","second","parameter","value","builder","formatter","driver","OutParam","OCCISTRING","Object","assign","prototype","dialect","driverName","module","exports"],"mappings":"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","sourcesContent":["// Oracle Client\n// -------\nconst { ReturningHelper } = require('./utils');\nconst { isConnectionError } = require('./utils');\nconst Client = require('../../client');\nconst SchemaCompiler = require('./schema/oracle-compiler');\nconst ColumnBuilder = require('./schema/oracle-columnbuilder');\nconst ColumnCompiler = require('./schema/oracle-columncompiler');\nconst TableCompiler = require('./schema/oracle-tablecompiler');\n\n// Always initialize with the \"QueryBuilder\" and \"QueryCompiler\"\n// objects, which extend the base 'lib/query/builder' and\n// 'lib/query/compiler', respectively.\nclass Client_Oracle extends Client {\n  schemaCompiler() {\n    return new SchemaCompiler(this, ...arguments);\n  }\n\n  columnBuilder() {\n    return new ColumnBuilder(this, ...arguments);\n  }\n\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n\n  // Return the database for the Oracle client.\n  database() {\n    return this.connectionSettings.database;\n  }\n\n  // Position the bindings for the query.\n  positionBindings(sql) {\n    let questionCount = 0;\n    return sql.replace(/\\?/g, function () {\n      questionCount += 1;\n      return `:${questionCount}`;\n    });\n  }\n\n  _stream(connection, obj, stream, options) {\n    if (!obj.sql) throw new Error('The query is empty');\n\n    return new Promise(function (resolver, rejecter) {\n      stream.on('error', (err) => {\n        if (isConnectionError(err)) {\n          connection.__knex__disposed = err;\n        }\n        rejecter(err);\n      });\n      stream.on('end', resolver);\n      const queryStream = connection.queryStream(\n        obj.sql,\n        obj.bindings,\n        options\n      );\n      queryStream.pipe(stream);\n      queryStream.on('error', function (error) {\n        rejecter(error);\n        stream.emit('error', error);\n      });\n    });\n  }\n\n  // Formatter part\n\n  alias(first, second) {\n    return first + ' ' + second;\n  }\n\n  parameter(value, builder, formatter) {\n    // Returning helper uses always ROWID as string\n    if (value instanceof ReturningHelper && this.driver) {\n      value = new this.driver.OutParam(this.driver.OCCISTRING);\n    } else if (typeof value === 'boolean') {\n      value = value ? 1 : 0;\n    }\n    return super.parameter(value, builder, formatter);\n  }\n}\n\nObject.assign(Client_Oracle.prototype, {\n  dialect: 'oracle',\n\n  driverName: 'oracle',\n});\n\nmodule.exports = Client_Oracle;\n"]},"metadata":{},"sourceType":"script"}