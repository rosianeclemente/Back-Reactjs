{"ast":null,"code":"const path = require('path');\n\nconst sortBy = require('lodash/sortBy');\n\nconst {\n  readdir\n} = require('../../util/fs');\n\nconst DEFAULT_LOAD_EXTENSIONS = Object.freeze(['.co', '.coffee', '.eg', '.iced', '.js', '.cjs', '.litcoffee', '.ls', '.ts']);\n\nclass FsMigrations {\n  constructor(migrationDirectories, sortDirsSeparately, loadExtensions) {\n    this.sortDirsSeparately = sortDirsSeparately;\n\n    if (!Array.isArray(migrationDirectories)) {\n      migrationDirectories = [migrationDirectories];\n    }\n\n    this.migrationsPaths = migrationDirectories;\n    this.loadExtensions = loadExtensions || DEFAULT_LOAD_EXTENSIONS;\n  }\n  /**\n   * Gets the migration names\n   * @returns Promise<string[]>\n   */\n\n\n  getMigrations(loadExtensions) {\n    // Get a list of files in all specified migration directories\n    const readMigrationsPromises = this.migrationsPaths.map(configDir => {\n      const absoluteDir = path.resolve(process.cwd(), configDir);\n      return readdir(absoluteDir).then(files => ({\n        files,\n        configDir,\n        absoluteDir\n      }));\n    });\n    return Promise.all(readMigrationsPromises).then(allMigrations => {\n      const migrations = allMigrations.reduce((acc, migrationDirectory) => {\n        // When true, files inside the folder should be sorted\n        if (this.sortDirsSeparately) {\n          migrationDirectory.files = migrationDirectory.files.sort();\n        }\n\n        migrationDirectory.files.forEach(file => acc.push({\n          file,\n          directory: migrationDirectory.configDir\n        }));\n        return acc;\n      }, []); // If true we have already sorted the migrations inside the folders\n      // return the migrations fully qualified\n\n      if (this.sortDirsSeparately) {\n        return filterMigrations(this, migrations, loadExtensions || this.loadExtensions);\n      }\n\n      return filterMigrations(this, sortBy(migrations, 'file'), loadExtensions || this.loadExtensions);\n    });\n  }\n\n  getMigrationName(migration) {\n    return migration.file;\n  }\n\n  getMigration(migration) {\n    const absoluteDir = path.resolve(process.cwd(), migration.directory);\n\n    const _path = path.join(absoluteDir, migration.file);\n\n    const importFile = require('../../util/import-file'); // late import\n\n\n    return importFile(_path);\n  }\n\n}\n\nfunction filterMigrations(migrationSource, migrations, loadExtensions) {\n  return migrations.filter(migration => {\n    const migrationName = migrationSource.getMigrationName(migration);\n    const extension = path.extname(migrationName);\n    return loadExtensions.includes(extension);\n  });\n}\n\nmodule.exports = {\n  DEFAULT_LOAD_EXTENSIONS,\n  FsMigrations\n};","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/migrations/migrate/sources/fs-migrations.js"],"names":["path","require","sortBy","readdir","DEFAULT_LOAD_EXTENSIONS","Object","freeze","FsMigrations","constructor","migrationDirectories","sortDirsSeparately","loadExtensions","Array","isArray","migrationsPaths","getMigrations","readMigrationsPromises","map","configDir","absoluteDir","resolve","process","cwd","then","files","Promise","all","allMigrations","migrations","reduce","acc","migrationDirectory","sort","forEach","file","push","directory","filterMigrations","getMigrationName","migration","getMigration","_path","join","importFile","migrationSource","filter","migrationName","extension","extname","includes","module","exports"],"mappings":"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","sourcesContent":["const path = require('path');\nconst sortBy = require('lodash/sortBy');\n\nconst { readdir } = require('../../util/fs');\n\nconst DEFAULT_LOAD_EXTENSIONS = Object.freeze([\n  '.co',\n  '.coffee',\n  '.eg',\n  '.iced',\n  '.js',\n  '.cjs',\n  '.litcoffee',\n  '.ls',\n  '.ts',\n]);\n\nclass FsMigrations {\n  constructor(migrationDirectories, sortDirsSeparately, loadExtensions) {\n    this.sortDirsSeparately = sortDirsSeparately;\n\n    if (!Array.isArray(migrationDirectories)) {\n      migrationDirectories = [migrationDirectories];\n    }\n    this.migrationsPaths = migrationDirectories;\n    this.loadExtensions = loadExtensions || DEFAULT_LOAD_EXTENSIONS;\n  }\n\n  /**\n   * Gets the migration names\n   * @returns Promise<string[]>\n   */\n  getMigrations(loadExtensions) {\n    // Get a list of files in all specified migration directories\n    const readMigrationsPromises = this.migrationsPaths.map((configDir) => {\n      const absoluteDir = path.resolve(process.cwd(), configDir);\n      return readdir(absoluteDir).then((files) => ({\n        files,\n        configDir,\n        absoluteDir,\n      }));\n    });\n\n    return Promise.all(readMigrationsPromises).then((allMigrations) => {\n      const migrations = allMigrations.reduce((acc, migrationDirectory) => {\n        // When true, files inside the folder should be sorted\n        if (this.sortDirsSeparately) {\n          migrationDirectory.files = migrationDirectory.files.sort();\n        }\n\n        migrationDirectory.files.forEach((file) =>\n          acc.push({ file, directory: migrationDirectory.configDir })\n        );\n\n        return acc;\n      }, []);\n\n      // If true we have already sorted the migrations inside the folders\n      // return the migrations fully qualified\n      if (this.sortDirsSeparately) {\n        return filterMigrations(\n          this,\n          migrations,\n          loadExtensions || this.loadExtensions\n        );\n      }\n\n      return filterMigrations(\n        this,\n        sortBy(migrations, 'file'),\n        loadExtensions || this.loadExtensions\n      );\n    });\n  }\n\n  getMigrationName(migration) {\n    return migration.file;\n  }\n\n  getMigration(migration) {\n    const absoluteDir = path.resolve(process.cwd(), migration.directory);\n    const _path = path.join(absoluteDir, migration.file);\n    const importFile = require('../../util/import-file'); // late import\n    return importFile(_path);\n  }\n}\n\nfunction filterMigrations(migrationSource, migrations, loadExtensions) {\n  return migrations.filter((migration) => {\n    const migrationName = migrationSource.getMigrationName(migration);\n    const extension = path.extname(migrationName);\n    return loadExtensions.includes(extension);\n  });\n}\n\nmodule.exports = {\n  DEFAULT_LOAD_EXTENSIONS,\n  FsMigrations,\n};\n"]},"metadata":{},"sourceType":"script"}