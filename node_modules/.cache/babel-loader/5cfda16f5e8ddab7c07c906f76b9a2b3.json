{"ast":null,"code":"// Oracle Schema Compiler\n// -------\nconst SchemaCompiler = require('../../../schema/compiler');\n\nconst utils = require('../utils');\n\nconst Trigger = require('./internal/trigger');\n\nclass SchemaCompiler_Oracle extends SchemaCompiler {\n  constructor() {\n    super(...arguments);\n  } // Rename a table on the schema.\n\n\n  renameTable(tableName, to) {\n    const renameTable = Trigger.renameTableAndAutoIncrementTrigger(this.client.logger, tableName, to);\n    this.pushQuery(renameTable);\n  } // Check whether a table exists on the query.\n\n\n  hasTable(tableName) {\n    this.pushQuery({\n      sql: 'select TABLE_NAME from USER_TABLES where TABLE_NAME = ' + this.client.parameter(tableName, this.builder, this.bindingsHolder),\n\n      output(resp) {\n        return resp.length > 0;\n      }\n\n    });\n  } // Check whether a column exists on the schema.\n\n\n  hasColumn(tableName, column) {\n    const sql = `select COLUMN_NAME from ALL_TAB_COLUMNS ` + `where TABLE_NAME = ${this.client.parameter(tableName, this.builder, this.bindingsHolder)} ` + `and COLUMN_NAME = ${this.client.parameter(column, this.builder, this.bindingsHolder)}`;\n    this.pushQuery({\n      sql,\n      output: resp => resp.length > 0\n    });\n  }\n\n  dropSequenceIfExists(sequenceName) {\n    this.pushQuery(utils.wrapSqlWithCatch(`drop sequence ${this.formatter.wrap(sequenceName)}`, -2289));\n  }\n\n  _dropRelatedSequenceIfExists(tableName) {\n    // removing the sequence that was possibly generated by increments() column\n    const sequenceName = utils.generateCombinedName(this.client.logger, 'seq', tableName);\n    this.dropSequenceIfExists(sequenceName);\n  }\n\n  dropTable(tableName) {\n    this.pushQuery(`drop table ${this.formatter.wrap(tableName)}`); // removing the sequence that was possibly generated by increments() column\n\n    this._dropRelatedSequenceIfExists(tableName);\n  }\n\n  dropTableIfExists(tableName) {\n    this.pushQuery(utils.wrapSqlWithCatch(`drop table ${this.formatter.wrap(tableName)}`, -942)); // removing the sequence that was possibly generated by increments() column\n\n    this._dropRelatedSequenceIfExists(tableName);\n  }\n\n}\n\nmodule.exports = SchemaCompiler_Oracle;","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/dialects/oracle/schema/oracle-compiler.js"],"names":["SchemaCompiler","require","utils","Trigger","SchemaCompiler_Oracle","constructor","arguments","renameTable","tableName","to","renameTableAndAutoIncrementTrigger","client","logger","pushQuery","hasTable","sql","parameter","builder","bindingsHolder","output","resp","length","hasColumn","column","dropSequenceIfExists","sequenceName","wrapSqlWithCatch","formatter","wrap","_dropRelatedSequenceIfExists","generateCombinedName","dropTable","dropTableIfExists","module","exports"],"mappings":"AAAA;AACA;AACA,MAAMA,cAAc,GAAGC,OAAO,CAAC,0BAAD,CAA9B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAArB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,oBAAD,CAAvB;;AAEA,MAAMG,qBAAN,SAAoCJ,cAApC,CAAmD;AACjDK,EAAAA,WAAW,GAAG;AACZ,UAAM,GAAGC,SAAT;AACD,GAHgD,CAKjD;;;AACAC,EAAAA,WAAW,CAACC,SAAD,EAAYC,EAAZ,EAAgB;AACzB,UAAMF,WAAW,GAAGJ,OAAO,CAACO,kCAAR,CAClB,KAAKC,MAAL,CAAYC,MADM,EAElBJ,SAFkB,EAGlBC,EAHkB,CAApB;AAKA,SAAKI,SAAL,CAAeN,WAAf;AACD,GAbgD,CAejD;;;AACAO,EAAAA,QAAQ,CAACN,SAAD,EAAY;AAClB,SAAKK,SAAL,CAAe;AACbE,MAAAA,GAAG,EACD,2DACA,KAAKJ,MAAL,CAAYK,SAAZ,CAAsBR,SAAtB,EAAiC,KAAKS,OAAtC,EAA+C,KAAKC,cAApD,CAHW;;AAIbC,MAAAA,MAAM,CAACC,IAAD,EAAO;AACX,eAAOA,IAAI,CAACC,MAAL,GAAc,CAArB;AACD;;AANY,KAAf;AAQD,GAzBgD,CA2BjD;;;AACAC,EAAAA,SAAS,CAACd,SAAD,EAAYe,MAAZ,EAAoB;AAC3B,UAAMR,GAAG,GACN,0CAAD,GACC,sBAAqB,KAAKJ,MAAL,CAAYK,SAAZ,CACpBR,SADoB,EAEpB,KAAKS,OAFe,EAGpB,KAAKC,cAHe,CAIpB,GALF,GAMC,qBAAoB,KAAKP,MAAL,CAAYK,SAAZ,CACnBO,MADmB,EAEnB,KAAKN,OAFc,EAGnB,KAAKC,cAHc,CAInB,EAXJ;AAYA,SAAKL,SAAL,CAAe;AAAEE,MAAAA,GAAF;AAAOI,MAAAA,MAAM,EAAGC,IAAD,IAAUA,IAAI,CAACC,MAAL,GAAc;AAAvC,KAAf;AACD;;AAEDG,EAAAA,oBAAoB,CAACC,YAAD,EAAe;AACjC,SAAKZ,SAAL,CACEX,KAAK,CAACwB,gBAAN,CACG,iBAAgB,KAAKC,SAAL,CAAeC,IAAf,CAAoBH,YAApB,CAAkC,EADrD,EAEE,CAAC,IAFH,CADF;AAMD;;AAEDI,EAAAA,4BAA4B,CAACrB,SAAD,EAAY;AACtC;AACA,UAAMiB,YAAY,GAAGvB,KAAK,CAAC4B,oBAAN,CACnB,KAAKnB,MAAL,CAAYC,MADO,EAEnB,KAFmB,EAGnBJ,SAHmB,CAArB;AAKA,SAAKgB,oBAAL,CAA0BC,YAA1B;AACD;;AAEDM,EAAAA,SAAS,CAACvB,SAAD,EAAY;AACnB,SAAKK,SAAL,CAAgB,cAAa,KAAKc,SAAL,CAAeC,IAAf,CAAoBpB,SAApB,CAA+B,EAA5D,EADmB,CAGnB;;AACA,SAAKqB,4BAAL,CAAkCrB,SAAlC;AACD;;AAEDwB,EAAAA,iBAAiB,CAACxB,SAAD,EAAY;AAC3B,SAAKK,SAAL,CACEX,KAAK,CAACwB,gBAAN,CACG,cAAa,KAAKC,SAAL,CAAeC,IAAf,CAAoBpB,SAApB,CAA+B,EAD/C,EAEE,CAAC,GAFH,CADF,EAD2B,CAQ3B;;AACA,SAAKqB,4BAAL,CAAkCrB,SAAlC;AACD;;AAhFgD;;AAmFnDyB,MAAM,CAACC,OAAP,GAAiB9B,qBAAjB","sourcesContent":["// Oracle Schema Compiler\n// -------\nconst SchemaCompiler = require('../../../schema/compiler');\nconst utils = require('../utils');\nconst Trigger = require('./internal/trigger');\n\nclass SchemaCompiler_Oracle extends SchemaCompiler {\n  constructor() {\n    super(...arguments);\n  }\n\n  // Rename a table on the schema.\n  renameTable(tableName, to) {\n    const renameTable = Trigger.renameTableAndAutoIncrementTrigger(\n      this.client.logger,\n      tableName,\n      to\n    );\n    this.pushQuery(renameTable);\n  }\n\n  // Check whether a table exists on the query.\n  hasTable(tableName) {\n    this.pushQuery({\n      sql:\n        'select TABLE_NAME from USER_TABLES where TABLE_NAME = ' +\n        this.client.parameter(tableName, this.builder, this.bindingsHolder),\n      output(resp) {\n        return resp.length > 0;\n      },\n    });\n  }\n\n  // Check whether a column exists on the schema.\n  hasColumn(tableName, column) {\n    const sql =\n      `select COLUMN_NAME from ALL_TAB_COLUMNS ` +\n      `where TABLE_NAME = ${this.client.parameter(\n        tableName,\n        this.builder,\n        this.bindingsHolder\n      )} ` +\n      `and COLUMN_NAME = ${this.client.parameter(\n        column,\n        this.builder,\n        this.bindingsHolder\n      )}`;\n    this.pushQuery({ sql, output: (resp) => resp.length > 0 });\n  }\n\n  dropSequenceIfExists(sequenceName) {\n    this.pushQuery(\n      utils.wrapSqlWithCatch(\n        `drop sequence ${this.formatter.wrap(sequenceName)}`,\n        -2289\n      )\n    );\n  }\n\n  _dropRelatedSequenceIfExists(tableName) {\n    // removing the sequence that was possibly generated by increments() column\n    const sequenceName = utils.generateCombinedName(\n      this.client.logger,\n      'seq',\n      tableName\n    );\n    this.dropSequenceIfExists(sequenceName);\n  }\n\n  dropTable(tableName) {\n    this.pushQuery(`drop table ${this.formatter.wrap(tableName)}`);\n\n    // removing the sequence that was possibly generated by increments() column\n    this._dropRelatedSequenceIfExists(tableName);\n  }\n\n  dropTableIfExists(tableName) {\n    this.pushQuery(\n      utils.wrapSqlWithCatch(\n        `drop table ${this.formatter.wrap(tableName)}`,\n        -942\n      )\n    );\n\n    // removing the sequence that was possibly generated by increments() column\n    this._dropRelatedSequenceIfExists(tableName);\n  }\n}\n\nmodule.exports = SchemaCompiler_Oracle;\n"]},"metadata":{},"sourceType":"script"}