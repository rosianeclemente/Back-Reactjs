{"ast":null,"code":"const assert = require('assert'); // JoinClause\n// -------\n// The \"JoinClause\" is an object holding any necessary info about a join,\n// including the type, and any associated tables & columns being joined.\n\n\nclass Analytic {\n  constructor(method, schema, alias, orderBy, partitions) {\n    this.schema = schema;\n    this.type = 'analytic';\n    this.method = method;\n    this.order = orderBy || [];\n    this.partitions = partitions || [];\n    this.alias = alias;\n    this.and = this;\n    this.grouping = 'columns';\n  }\n\n  partitionBy(column) {\n    assert(Array.isArray(column) || typeof column === 'string', `The argument to an analytic partitionBy function must be either a string\n            or an array of string.`);\n\n    if (Array.isArray(column)) {\n      this.partitions = this.partitions.concat(column);\n    } else {\n      this.partitions.push(column);\n    }\n\n    return this;\n  }\n\n  orderBy(column) {\n    assert(Array.isArray(column) || typeof column === 'string', `The argument to an analytic orderBy function must be either a string\n            or an array of string.`);\n\n    if (Array.isArray(column)) {\n      this.order = this.order.concat(column);\n    } else {\n      this.order.push(column);\n    }\n\n    return this;\n  }\n\n}\n\nmodule.exports = Analytic;","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/query/analytic.js"],"names":["assert","require","Analytic","constructor","method","schema","alias","orderBy","partitions","type","order","and","grouping","partitionBy","column","Array","isArray","concat","push","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB,C,CAEA;AACA;AAEA;AACA;;;AACA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiBC,KAAjB,EAAwBC,OAAxB,EAAiCC,UAAjC,EAA6C;AACtD,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKI,IAAL,GAAY,UAAZ;AACA,SAAKL,MAAL,GAAcA,MAAd;AACA,SAAKM,KAAL,GAAaH,OAAO,IAAI,EAAxB;AACA,SAAKC,UAAL,GAAkBA,UAAU,IAAI,EAAhC;AACA,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKK,GAAL,GAAW,IAAX;AAEA,SAAKC,QAAL,GAAgB,SAAhB;AACD;;AAEDC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClBd,IAAAA,MAAM,CACJe,KAAK,CAACC,OAAN,CAAcF,MAAd,KAAyB,OAAOA,MAAP,KAAkB,QADvC,EAEH;AACP,mCAHU,CAAN;;AAMA,QAAIC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACzB,WAAKN,UAAL,GAAkB,KAAKA,UAAL,CAAgBS,MAAhB,CAAuBH,MAAvB,CAAlB;AACD,KAFD,MAEO;AACL,WAAKN,UAAL,CAAgBU,IAAhB,CAAqBJ,MAArB;AACD;;AACD,WAAO,IAAP;AACD;;AAEDP,EAAAA,OAAO,CAACO,MAAD,EAAS;AACdd,IAAAA,MAAM,CACJe,KAAK,CAACC,OAAN,CAAcF,MAAd,KAAyB,OAAOA,MAAP,KAAkB,QADvC,EAEH;AACP,mCAHU,CAAN;;AAMA,QAAIC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACzB,WAAKJ,KAAL,GAAa,KAAKA,KAAL,CAAWO,MAAX,CAAkBH,MAAlB,CAAb;AACD,KAFD,MAEO;AACL,WAAKJ,KAAL,CAAWQ,IAAX,CAAgBJ,MAAhB;AACD;;AACD,WAAO,IAAP;AACD;;AAzCY;;AA4CfK,MAAM,CAACC,OAAP,GAAiBlB,QAAjB","sourcesContent":["const assert = require('assert');\n\n// JoinClause\n// -------\n\n// The \"JoinClause\" is an object holding any necessary info about a join,\n// including the type, and any associated tables & columns being joined.\nclass Analytic {\n  constructor(method, schema, alias, orderBy, partitions) {\n    this.schema = schema;\n    this.type = 'analytic';\n    this.method = method;\n    this.order = orderBy || [];\n    this.partitions = partitions || [];\n    this.alias = alias;\n    this.and = this;\n\n    this.grouping = 'columns';\n  }\n\n  partitionBy(column) {\n    assert(\n      Array.isArray(column) || typeof column === 'string',\n      `The argument to an analytic partitionBy function must be either a string\n            or an array of string.`\n    );\n\n    if (Array.isArray(column)) {\n      this.partitions = this.partitions.concat(column);\n    } else {\n      this.partitions.push(column);\n    }\n    return this;\n  }\n\n  orderBy(column) {\n    assert(\n      Array.isArray(column) || typeof column === 'string',\n      `The argument to an analytic orderBy function must be either a string\n            or an array of string.`\n    );\n\n    if (Array.isArray(column)) {\n      this.order = this.order.concat(column);\n    } else {\n      this.order.push(column);\n    }\n    return this;\n  }\n}\n\nmodule.exports = Analytic;\n"]},"metadata":{},"sourceType":"script"}