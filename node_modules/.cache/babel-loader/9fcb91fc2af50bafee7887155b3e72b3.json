{"ast":null,"code":"const template = require('lodash/template');\n\nconst {\n  readFile,\n  writeFile\n} = require('./fs');\n/**\n * Light wrapper over lodash templates making it safer to be used with javascript source code.\n *\n * In particular, doesn't interfere with use of interpolated strings in javascript.\n *\n * @param {string} content Template source\n * @param {_.TemplateOptions} options Template options\n */\n\n\nconst jsSourceTemplate = (content, options) => template(content, {\n  interpolate: /<%=([\\s\\S]+?)%>/g,\n  ...options\n});\n/**\n * Compile the contents of specified (javascript) file as a lodash template\n *\n * @param {string} filePath Path of file to be used as template\n * @param {_.TemplateOptions} options Lodash template options\n */\n\n\nconst jsFileTemplate = async (filePath, options) => {\n  const contentBuffer = await readFile(filePath);\n  return jsSourceTemplate(contentBuffer.toString(), options);\n};\n/**\n * Write a javascript file using another file as a (lodash) template\n *\n * @param {string} targetFilePath\n * @param {string} sourceFilePath\n * @param {_.TemplateOptions} options options passed to lodash templates\n */\n\n\nconst writeJsFileUsingTemplate = async (targetFilePath, sourceFilePath, options, variables) => writeFile(targetFilePath, (await jsFileTemplate(sourceFilePath, options))(variables));\n\nmodule.exports = {\n  jsSourceTemplate,\n  jsFileTemplate,\n  writeJsFileUsingTemplate\n};","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/migrations/util/template.js"],"names":["template","require","readFile","writeFile","jsSourceTemplate","content","options","interpolate","jsFileTemplate","filePath","contentBuffer","toString","writeJsFileUsingTemplate","targetFilePath","sourceFilePath","variables","module","exports"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,iBAAD,CAAxB;;AAEA,MAAM;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAA0BF,OAAO,CAAC,MAAD,CAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,gBAAgB,GAAG,CAACC,OAAD,EAAUC,OAAV,KACvBN,QAAQ,CAACK,OAAD,EAAU;AAChBE,EAAAA,WAAW,EAAE,kBADG;AAEhB,KAAGD;AAFa,CAAV,CADV;AAMA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,cAAc,GAAG,OAAOC,QAAP,EAAiBH,OAAjB,KAA6B;AAClD,QAAMI,aAAa,GAAG,MAAMR,QAAQ,CAACO,QAAD,CAApC;AACA,SAAOL,gBAAgB,CAACM,aAAa,CAACC,QAAd,EAAD,EAA2BL,OAA3B,CAAvB;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMM,wBAAwB,GAAG,OAC/BC,cAD+B,EAE/BC,cAF+B,EAG/BR,OAH+B,EAI/BS,SAJ+B,KAM/BZ,SAAS,CACPU,cADO,EAEP,CAAC,MAAML,cAAc,CAACM,cAAD,EAAiBR,OAAjB,CAArB,EAAgDS,SAAhD,CAFO,CANX;;AAWAC,MAAM,CAACC,OAAP,GAAiB;AACfb,EAAAA,gBADe;AAEfI,EAAAA,cAFe;AAGfI,EAAAA;AAHe,CAAjB","sourcesContent":["const template = require('lodash/template');\n\nconst { readFile, writeFile } = require('./fs');\n\n/**\n * Light wrapper over lodash templates making it safer to be used with javascript source code.\n *\n * In particular, doesn't interfere with use of interpolated strings in javascript.\n *\n * @param {string} content Template source\n * @param {_.TemplateOptions} options Template options\n */\nconst jsSourceTemplate = (content, options) =>\n  template(content, {\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    ...options,\n  });\n\n/**\n * Compile the contents of specified (javascript) file as a lodash template\n *\n * @param {string} filePath Path of file to be used as template\n * @param {_.TemplateOptions} options Lodash template options\n */\nconst jsFileTemplate = async (filePath, options) => {\n  const contentBuffer = await readFile(filePath);\n  return jsSourceTemplate(contentBuffer.toString(), options);\n};\n\n/**\n * Write a javascript file using another file as a (lodash) template\n *\n * @param {string} targetFilePath\n * @param {string} sourceFilePath\n * @param {_.TemplateOptions} options options passed to lodash templates\n */\nconst writeJsFileUsingTemplate = async (\n  targetFilePath,\n  sourceFilePath,\n  options,\n  variables\n) =>\n  writeFile(\n    targetFilePath,\n    (await jsFileTemplate(sourceFilePath, options))(variables)\n  );\n\nmodule.exports = {\n  jsSourceTemplate,\n  jsFileTemplate,\n  writeJsFileUsingTemplate,\n};\n"]},"metadata":{},"sourceType":"script"}