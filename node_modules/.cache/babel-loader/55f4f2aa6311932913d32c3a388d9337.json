{"ast":null,"code":"'use strict';\n\nvar url = require('url');\n\nvar fs = require('fs'); //Parse method copied from https://github.com/brianc/node-postgres\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//MIT License\n//parses a connection string\n\n\nfunction parse(str) {\n  //unix socket\n  if (str.charAt(0) === '/') {\n    var config = str.split(' ');\n    return {\n      host: config[0],\n      database: config[1]\n    };\n  } // url parse expects spaces encoded as %20\n\n\n  var result = url.parse(/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str) ? encodeURI(str).replace(/\\%25(\\d\\d)/g, '%$1') : str, true);\n  var config = result.query;\n\n  for (var k in config) {\n    if (Array.isArray(config[k])) {\n      config[k] = config[k][config[k].length - 1];\n    }\n  }\n\n  var auth = (result.auth || ':').split(':');\n  config.user = auth[0];\n  config.password = auth.splice(1).join(':');\n  config.port = result.port;\n\n  if (result.protocol == 'socket:') {\n    config.host = decodeURI(result.pathname);\n    config.database = result.query.db;\n    config.client_encoding = result.query.encoding;\n    return config;\n  }\n\n  if (!config.host) {\n    // Only set the host if there is no equivalent query param.\n    config.host = result.hostname;\n  } // If the host is missing it might be a URL-encoded path to a socket.\n\n\n  var pathname = result.pathname;\n\n  if (!config.host && pathname && /^%2f/i.test(pathname)) {\n    var pathnameSplit = pathname.split('/');\n    config.host = decodeURIComponent(pathnameSplit[0]);\n    pathname = pathnameSplit.splice(1).join('/');\n  } // result.pathname is not always guaranteed to have a '/' prefix (e.g. relative urls)\n  // only strip the slash if it is present.\n\n\n  if (pathname && pathname.charAt(0) === '/') {\n    pathname = pathname.slice(1) || null;\n  }\n\n  config.database = pathname && decodeURI(pathname);\n\n  if (config.ssl === 'true' || config.ssl === '1') {\n    config.ssl = true;\n  }\n\n  if (config.ssl === '0') {\n    config.ssl = false;\n  }\n\n  if (config.sslcert || config.sslkey || config.sslrootcert || config.sslmode) {\n    config.ssl = {};\n  }\n\n  if (config.sslcert) {\n    config.ssl.cert = fs.readFileSync(config.sslcert).toString();\n  }\n\n  if (config.sslkey) {\n    config.ssl.key = fs.readFileSync(config.sslkey).toString();\n  }\n\n  if (config.sslrootcert) {\n    config.ssl.ca = fs.readFileSync(config.sslrootcert).toString();\n  }\n\n  switch (config.sslmode) {\n    case 'disable':\n      {\n        config.ssl = false;\n        break;\n      }\n\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full':\n      {\n        break;\n      }\n\n    case 'no-verify':\n      {\n        config.ssl.rejectUnauthorized = false;\n        break;\n      }\n  }\n\n  return config;\n}\n\nmodule.exports = parse;\nparse.parse = parse;","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/pg-connection-string/index.js"],"names":["url","require","fs","parse","str","charAt","config","split","host","database","result","test","encodeURI","replace","query","k","Array","isArray","length","auth","user","password","splice","join","port","protocol","decodeURI","pathname","db","client_encoding","encoding","hostname","pathnameSplit","decodeURIComponent","slice","ssl","sslcert","sslkey","sslrootcert","sslmode","cert","readFileSync","toString","key","ca","rejectUnauthorized","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar url = require('url')\nvar fs = require('fs')\n\n//Parse method copied from https://github.com/brianc/node-postgres\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//MIT License\n\n//parses a connection string\nfunction parse(str) {\n  //unix socket\n  if (str.charAt(0) === '/') {\n    var config = str.split(' ')\n    return { host: config[0], database: config[1] }\n  }\n\n  // url parse expects spaces encoded as %20\n  var result = url.parse(\n    / |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str) ? encodeURI(str).replace(/\\%25(\\d\\d)/g, '%$1') : str,\n    true\n  )\n  var config = result.query\n  for (var k in config) {\n    if (Array.isArray(config[k])) {\n      config[k] = config[k][config[k].length - 1]\n    }\n  }\n\n  var auth = (result.auth || ':').split(':')\n  config.user = auth[0]\n  config.password = auth.splice(1).join(':')\n\n  config.port = result.port\n  if (result.protocol == 'socket:') {\n    config.host = decodeURI(result.pathname)\n    config.database = result.query.db\n    config.client_encoding = result.query.encoding\n    return config\n  }\n  if (!config.host) {\n    // Only set the host if there is no equivalent query param.\n    config.host = result.hostname\n  }\n\n  // If the host is missing it might be a URL-encoded path to a socket.\n  var pathname = result.pathname\n  if (!config.host && pathname && /^%2f/i.test(pathname)) {\n    var pathnameSplit = pathname.split('/')\n    config.host = decodeURIComponent(pathnameSplit[0])\n    pathname = pathnameSplit.splice(1).join('/')\n  }\n  // result.pathname is not always guaranteed to have a '/' prefix (e.g. relative urls)\n  // only strip the slash if it is present.\n  if (pathname && pathname.charAt(0) === '/') {\n    pathname = pathname.slice(1) || null\n  }\n  config.database = pathname && decodeURI(pathname)\n\n  if (config.ssl === 'true' || config.ssl === '1') {\n    config.ssl = true\n  }\n\n  if (config.ssl === '0') {\n    config.ssl = false\n  }\n\n  if (config.sslcert || config.sslkey || config.sslrootcert || config.sslmode) {\n    config.ssl = {}\n  }\n\n  if (config.sslcert) {\n    config.ssl.cert = fs.readFileSync(config.sslcert).toString()\n  }\n\n  if (config.sslkey) {\n    config.ssl.key = fs.readFileSync(config.sslkey).toString()\n  }\n\n  if (config.sslrootcert) {\n    config.ssl.ca = fs.readFileSync(config.sslrootcert).toString()\n  }\n\n  switch (config.sslmode) {\n    case 'disable': {\n      config.ssl = false\n      break\n    }\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full': {\n      break\n    }\n    case 'no-verify': {\n      config.ssl.rejectUnauthorized = false\n      break\n    }\n  }\n\n  return config\n}\n\nmodule.exports = parse\n\nparse.parse = parse\n"]},"metadata":{},"sourceType":"script"}