{"ast":null,"code":"/* eslint max-len:0*/\n// MySQL Table Builder & Compiler\n// -------\nconst TableCompiler = require('../../../schema/tablecompiler'); // Table Compiler\n// ------\n\n\nclass TableCompiler_MySQL extends TableCompiler {\n  constructor(client, tableBuilder) {\n    super(client, tableBuilder);\n  }\n\n  createQuery(columns, ifNot) {\n    const createStatement = ifNot ? 'create table if not exists ' : 'create table ';\n    const {\n      client\n    } = this;\n    let conn = {};\n    let sql = createStatement + this.tableName() + ' (' + columns.sql.join(', ') + ')'; // Check if the connection settings are set.\n\n    if (client.connectionSettings) {\n      conn = client.connectionSettings;\n    }\n\n    const charset = this.single.charset || conn.charset || '';\n    const collation = this.single.collate || conn.collate || '';\n    const engine = this.single.engine || ''; // var conn = builder.client.connectionSettings;\n\n    if (charset) sql += ` default character set ${charset}`;\n    if (collation) sql += ` collate ${collation}`;\n    if (engine) sql += ` engine = ${engine}`;\n\n    if (this.single.comment) {\n      const comment = this.single.comment || '';\n      if (comment.length > 60) this.client.logger.warn('The max length for a table comment is 60 characters');\n      sql += ` comment = '${comment}'`;\n    }\n\n    this.pushQuery(sql);\n  } // Compiles the comment on the table.\n\n\n  comment(comment) {\n    this.pushQuery(`alter table ${this.tableName()} comment = '${comment}'`);\n  }\n\n  changeType() {// alter table + table + ' modify ' + wrapped + '// type';\n  } // Renames a column on the table.\n\n\n  renameColumn(from, to) {\n    const compiler = this;\n    const table = this.tableName();\n    const wrapped = this.formatter.wrap(from) + ' ' + this.formatter.wrap(to);\n    this.pushQuery({\n      sql: `show fields from ${table} where field = ` + this.client.parameter(from, this.tableBuilder, this.bindingsHolder),\n\n      output(resp) {\n        const column = resp[0];\n        const runner = this;\n        return compiler.getFKRefs(runner).then(([refs]) => new Promise((resolve, reject) => {\n          try {\n            if (!refs.length) {\n              resolve();\n            }\n\n            resolve(compiler.dropFKRefs(runner, refs));\n          } catch (e) {\n            reject(e);\n          }\n        }).then(function () {\n          let sql = `alter table ${table} change ${wrapped} ${column.Type}`;\n\n          if (String(column.Null).toUpperCase() !== 'YES') {\n            sql += ` NOT NULL`;\n          } else {\n            // This doesn't matter for most cases except Timestamp, where this is important\n            sql += ` NULL`;\n          }\n\n          if (column.Default !== void 0 && column.Default !== null) {\n            sql += ` DEFAULT '${column.Default}'`;\n          } // Add back the auto increment if the column had it, fix issue #2767\n\n\n          if (column.Extra == 'auto_increment') {\n            sql += ` AUTO_INCREMENT`;\n          }\n\n          return runner.query({\n            sql\n          });\n        }).then(function () {\n          if (!refs.length) {\n            return;\n          }\n\n          return compiler.createFKRefs(runner, refs.map(function (ref) {\n            if (ref.REFERENCED_COLUMN_NAME === from) {\n              ref.REFERENCED_COLUMN_NAME = to;\n            }\n\n            if (ref.COLUMN_NAME === from) {\n              ref.COLUMN_NAME = to;\n            }\n\n            return ref;\n          }));\n        }));\n      }\n\n    });\n  }\n\n  getFKRefs(runner) {\n    const bindingsHolder = {\n      bindings: []\n    };\n    const sql = 'SELECT KCU.CONSTRAINT_NAME, KCU.TABLE_NAME, KCU.COLUMN_NAME, ' + '       KCU.REFERENCED_TABLE_NAME, KCU.REFERENCED_COLUMN_NAME, ' + '       RC.UPDATE_RULE, RC.DELETE_RULE ' + 'FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU ' + 'JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS RC ' + '       USING(CONSTRAINT_NAME)' + 'WHERE KCU.REFERENCED_TABLE_NAME = ' + this.client.parameter(this.tableNameRaw, this.tableBuilder, bindingsHolder) + ' ' + '  AND KCU.CONSTRAINT_SCHEMA = ' + this.client.parameter(this.client.database(), this.tableBuilder, bindingsHolder) + ' ' + '  AND RC.CONSTRAINT_SCHEMA = ' + this.client.parameter(this.client.database(), this.tableBuilder, bindingsHolder);\n    return runner.query({\n      sql,\n      bindings: bindingsHolder.bindings\n    });\n  }\n\n  dropFKRefs(runner, refs) {\n    const formatter = this.client.formatter(this.tableBuilder);\n    return Promise.all(refs.map(function (ref) {\n      const constraintName = formatter.wrap(ref.CONSTRAINT_NAME);\n      const tableName = formatter.wrap(ref.TABLE_NAME);\n      return runner.query({\n        sql: `alter table ${tableName} drop foreign key ${constraintName}`\n      });\n    }));\n  }\n\n  createFKRefs(runner, refs) {\n    const formatter = this.client.formatter(this.tableBuilder);\n    return Promise.all(refs.map(function (ref) {\n      const tableName = formatter.wrap(ref.TABLE_NAME);\n      const keyName = formatter.wrap(ref.CONSTRAINT_NAME);\n      const column = formatter.columnize(ref.COLUMN_NAME);\n      const references = formatter.columnize(ref.REFERENCED_COLUMN_NAME);\n      const inTable = formatter.wrap(ref.REFERENCED_TABLE_NAME);\n      const onUpdate = ` ON UPDATE ${ref.UPDATE_RULE}`;\n      const onDelete = ` ON DELETE ${ref.DELETE_RULE}`;\n      return runner.query({\n        sql: `alter table ${tableName} add constraint ${keyName} ` + 'foreign key (' + column + ') references ' + inTable + ' (' + references + ')' + onUpdate + onDelete\n      });\n    }));\n  }\n\n  index(columns, indexName, indexType) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(`alter table ${this.tableName()} add${indexType ? ` ${indexType}` : ''} index ${indexName}(${this.formatter.columnize(columns)})`);\n  }\n\n  primary(columns, constraintName) {\n    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    this.pushQuery(`alter table ${this.tableName()} add primary key ${constraintName}(${this.formatter.columnize(columns)})`);\n  }\n\n  unique(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, columns);\n    this.pushQuery(`alter table ${this.tableName()} add unique ${indexName}(${this.formatter.columnize(columns)})`);\n  } // Compile a drop index command.\n\n\n  dropIndex(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(`alter table ${this.tableName()} drop index ${indexName}`);\n  } // Compile a drop foreign key command.\n\n\n  dropForeign(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('foreign', this.tableNameRaw, columns);\n    this.pushQuery(`alter table ${this.tableName()} drop foreign key ${indexName}`);\n  } // Compile a drop primary key command.\n\n\n  dropPrimary() {\n    this.pushQuery(`alter table ${this.tableName()} drop primary key`);\n  } // Compile a drop unique key command.\n\n\n  dropUnique(column, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, column);\n    this.pushQuery(`alter table ${this.tableName()} drop index ${indexName}`);\n  }\n\n}\n\nTableCompiler_MySQL.prototype.addColumnsPrefix = 'add ';\nTableCompiler_MySQL.prototype.alterColumnsPrefix = 'modify ';\nTableCompiler_MySQL.prototype.dropColumnPrefix = 'drop ';\nmodule.exports = TableCompiler_MySQL;","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/dialects/mysql/schema/mysql-tablecompiler.js"],"names":["TableCompiler","require","TableCompiler_MySQL","constructor","client","tableBuilder","createQuery","columns","ifNot","createStatement","conn","sql","tableName","join","connectionSettings","charset","single","collation","collate","engine","comment","length","logger","warn","pushQuery","changeType","renameColumn","from","to","compiler","table","wrapped","formatter","wrap","parameter","bindingsHolder","output","resp","column","runner","getFKRefs","then","refs","Promise","resolve","reject","dropFKRefs","e","Type","String","Null","toUpperCase","Default","Extra","query","createFKRefs","map","ref","REFERENCED_COLUMN_NAME","COLUMN_NAME","bindings","tableNameRaw","database","all","constraintName","CONSTRAINT_NAME","TABLE_NAME","keyName","columnize","references","inTable","REFERENCED_TABLE_NAME","onUpdate","UPDATE_RULE","onDelete","DELETE_RULE","index","indexName","indexType","_indexCommand","primary","unique","dropIndex","dropForeign","dropPrimary","dropUnique","prototype","addColumnsPrefix","alterColumnsPrefix","dropColumnPrefix","module","exports"],"mappings":"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","sourcesContent":["/* eslint max-len:0*/\n\n// MySQL Table Builder & Compiler\n// -------\nconst TableCompiler = require('../../../schema/tablecompiler');\n\n// Table Compiler\n// ------\n\nclass TableCompiler_MySQL extends TableCompiler {\n  constructor(client, tableBuilder) {\n    super(client, tableBuilder);\n  }\n\n  createQuery(columns, ifNot) {\n    const createStatement = ifNot\n      ? 'create table if not exists '\n      : 'create table ';\n    const { client } = this;\n    let conn = {};\n    let sql =\n      createStatement + this.tableName() + ' (' + columns.sql.join(', ') + ')';\n\n    // Check if the connection settings are set.\n    if (client.connectionSettings) {\n      conn = client.connectionSettings;\n    }\n\n    const charset = this.single.charset || conn.charset || '';\n    const collation = this.single.collate || conn.collate || '';\n    const engine = this.single.engine || '';\n\n    // var conn = builder.client.connectionSettings;\n    if (charset) sql += ` default character set ${charset}`;\n    if (collation) sql += ` collate ${collation}`;\n    if (engine) sql += ` engine = ${engine}`;\n\n    if (this.single.comment) {\n      const comment = this.single.comment || '';\n      if (comment.length > 60)\n        this.client.logger.warn(\n          'The max length for a table comment is 60 characters'\n        );\n      sql += ` comment = '${comment}'`;\n    }\n\n    this.pushQuery(sql);\n  }\n\n  // Compiles the comment on the table.\n  comment(comment) {\n    this.pushQuery(`alter table ${this.tableName()} comment = '${comment}'`);\n  }\n\n  changeType() {\n    // alter table + table + ' modify ' + wrapped + '// type';\n  }\n\n  // Renames a column on the table.\n  renameColumn(from, to) {\n    const compiler = this;\n    const table = this.tableName();\n    const wrapped = this.formatter.wrap(from) + ' ' + this.formatter.wrap(to);\n\n    this.pushQuery({\n      sql:\n        `show fields from ${table} where field = ` +\n        this.client.parameter(from, this.tableBuilder, this.bindingsHolder),\n      output(resp) {\n        const column = resp[0];\n        const runner = this;\n        return compiler.getFKRefs(runner).then(([refs]) =>\n          new Promise((resolve, reject) => {\n            try {\n              if (!refs.length) {\n                resolve();\n              }\n              resolve(compiler.dropFKRefs(runner, refs));\n            } catch (e) {\n              reject(e);\n            }\n          })\n            .then(function () {\n              let sql = `alter table ${table} change ${wrapped} ${column.Type}`;\n\n              if (String(column.Null).toUpperCase() !== 'YES') {\n                sql += ` NOT NULL`;\n              } else {\n                // This doesn't matter for most cases except Timestamp, where this is important\n                sql += ` NULL`;\n              }\n              if (column.Default !== void 0 && column.Default !== null) {\n                sql += ` DEFAULT '${column.Default}'`;\n              }\n              // Add back the auto increment if the column had it, fix issue #2767\n              if (column.Extra == 'auto_increment') {\n                sql += ` AUTO_INCREMENT`;\n              }\n\n              return runner.query({\n                sql,\n              });\n            })\n            .then(function () {\n              if (!refs.length) {\n                return;\n              }\n              return compiler.createFKRefs(\n                runner,\n                refs.map(function (ref) {\n                  if (ref.REFERENCED_COLUMN_NAME === from) {\n                    ref.REFERENCED_COLUMN_NAME = to;\n                  }\n                  if (ref.COLUMN_NAME === from) {\n                    ref.COLUMN_NAME = to;\n                  }\n                  return ref;\n                })\n              );\n            })\n        );\n      },\n    });\n  }\n\n  getFKRefs(runner) {\n    const bindingsHolder = {\n      bindings: [],\n    };\n\n    const sql =\n      'SELECT KCU.CONSTRAINT_NAME, KCU.TABLE_NAME, KCU.COLUMN_NAME, ' +\n      '       KCU.REFERENCED_TABLE_NAME, KCU.REFERENCED_COLUMN_NAME, ' +\n      '       RC.UPDATE_RULE, RC.DELETE_RULE ' +\n      'FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU ' +\n      'JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS RC ' +\n      '       USING(CONSTRAINT_NAME)' +\n      'WHERE KCU.REFERENCED_TABLE_NAME = ' +\n      this.client.parameter(\n        this.tableNameRaw,\n        this.tableBuilder,\n        bindingsHolder\n      ) +\n      ' ' +\n      '  AND KCU.CONSTRAINT_SCHEMA = ' +\n      this.client.parameter(\n        this.client.database(),\n        this.tableBuilder,\n        bindingsHolder\n      ) +\n      ' ' +\n      '  AND RC.CONSTRAINT_SCHEMA = ' +\n      this.client.parameter(\n        this.client.database(),\n        this.tableBuilder,\n        bindingsHolder\n      );\n\n    return runner.query({\n      sql,\n      bindings: bindingsHolder.bindings,\n    });\n  }\n\n  dropFKRefs(runner, refs) {\n    const formatter = this.client.formatter(this.tableBuilder);\n\n    return Promise.all(\n      refs.map(function (ref) {\n        const constraintName = formatter.wrap(ref.CONSTRAINT_NAME);\n        const tableName = formatter.wrap(ref.TABLE_NAME);\n        return runner.query({\n          sql: `alter table ${tableName} drop foreign key ${constraintName}`,\n        });\n      })\n    );\n  }\n\n  createFKRefs(runner, refs) {\n    const formatter = this.client.formatter(this.tableBuilder);\n\n    return Promise.all(\n      refs.map(function (ref) {\n        const tableName = formatter.wrap(ref.TABLE_NAME);\n        const keyName = formatter.wrap(ref.CONSTRAINT_NAME);\n        const column = formatter.columnize(ref.COLUMN_NAME);\n        const references = formatter.columnize(ref.REFERENCED_COLUMN_NAME);\n        const inTable = formatter.wrap(ref.REFERENCED_TABLE_NAME);\n        const onUpdate = ` ON UPDATE ${ref.UPDATE_RULE}`;\n        const onDelete = ` ON DELETE ${ref.DELETE_RULE}`;\n\n        return runner.query({\n          sql:\n            `alter table ${tableName} add constraint ${keyName} ` +\n            'foreign key (' +\n            column +\n            ') references ' +\n            inTable +\n            ' (' +\n            references +\n            ')' +\n            onUpdate +\n            onDelete,\n        });\n      })\n    );\n  }\n\n  index(columns, indexName, indexType) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(\n      `alter table ${this.tableName()} add${\n        indexType ? ` ${indexType}` : ''\n      } index ${indexName}(${this.formatter.columnize(columns)})`\n    );\n  }\n\n  primary(columns, constraintName) {\n    constraintName = constraintName\n      ? this.formatter.wrap(constraintName)\n      : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    this.pushQuery(\n      `alter table ${this.tableName()} add primary key ${constraintName}(${this.formatter.columnize(\n        columns\n      )})`\n    );\n  }\n\n  unique(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('unique', this.tableNameRaw, columns);\n    this.pushQuery(\n      `alter table ${this.tableName()} add unique ${indexName}(${this.formatter.columnize(\n        columns\n      )})`\n    );\n  }\n\n  // Compile a drop index command.\n  dropIndex(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(`alter table ${this.tableName()} drop index ${indexName}`);\n  }\n\n  // Compile a drop foreign key command.\n  dropForeign(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('foreign', this.tableNameRaw, columns);\n    this.pushQuery(\n      `alter table ${this.tableName()} drop foreign key ${indexName}`\n    );\n  }\n\n  // Compile a drop primary key command.\n  dropPrimary() {\n    this.pushQuery(`alter table ${this.tableName()} drop primary key`);\n  }\n\n  // Compile a drop unique key command.\n  dropUnique(column, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('unique', this.tableNameRaw, column);\n    this.pushQuery(`alter table ${this.tableName()} drop index ${indexName}`);\n  }\n}\n\nTableCompiler_MySQL.prototype.addColumnsPrefix = 'add ';\nTableCompiler_MySQL.prototype.alterColumnsPrefix = 'modify ';\nTableCompiler_MySQL.prototype.dropColumnPrefix = 'drop ';\n\nmodule.exports = TableCompiler_MySQL;\n"]},"metadata":{},"sourceType":"script"}