{"ast":null,"code":"const Transaction = require('../../execution/transaction');\n\nconst {\n  timeout,\n  KnexTimeoutError\n} = require('../../util/timeout');\n\nconst debugTx = require('debug')('knex:tx'); // There's also a \"read only\", but that's not really an \"isolationLevel\"\n\n\nconst supportedIsolationLevels = ['read committed', 'serializable']; // Remove this if you make it work and set it to true\n\nconst isIsolationLevelEnabled = false;\nmodule.exports = class Oracle_Transaction extends Transaction {\n  // disable autocommit to allow correct behavior (default is true)\n  begin(conn) {\n    if (this.isolationLevel) {\n      if (isIsolationLevelEnabled) {\n        if (!supportedIsolationLevels.includes(this.isolationLevel)) {\n          this.client.logger.warn('Oracle only supports read committed and serializable transactions, ignoring the isolation level param');\n        } else {\n          // I tried this, but it didn't work\n          // Doc here: https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SET-TRANSACTION.html\n          return this.query(conn, `SET TRANSACTION ${this.isolationLevel}`);\n        }\n      } else {\n        this.client.logger.warn('Transaction isolation is not currently supported for Oracle');\n      }\n    }\n\n    return Promise.resolve();\n  }\n\n  async commit(conn, value) {\n    this._completed = true;\n\n    try {\n      await conn.commitAsync();\n\n      this._resolver(value);\n    } catch (err) {\n      this._rejecter(err);\n    }\n  }\n\n  release(conn, value) {\n    return this._resolver(value);\n  }\n\n  rollback(conn, err) {\n    this._completed = true;\n    debugTx('%s: rolling back', this.txid);\n    return timeout(conn.rollbackAsync(), 5000).catch(e => {\n      if (!(e instanceof KnexTimeoutError)) {\n        return Promise.reject(e);\n      }\n\n      this._rejecter(e);\n    }).then(() => {\n      if (err === undefined) {\n        if (this.doNotRejectOnRollback) {\n          this._resolver();\n\n          return;\n        }\n\n        err = new Error(`Transaction rejected with non-error: ${err}`);\n      }\n\n      this._rejecter(err);\n    });\n  }\n\n  savepoint(conn) {\n    return this.query(conn, `SAVEPOINT ${this.txid}`);\n  }\n\n  async acquireConnection(config, cb) {\n    const configConnection = config && config.connection;\n    const connection = configConnection || (await this.client.acquireConnection());\n\n    try {\n      connection.__knexTxId = this.txid;\n      connection.isTransaction = true;\n      return await cb(connection);\n    } finally {\n      debugTx('%s: releasing connection', this.txid);\n      connection.isTransaction = false;\n\n      try {\n        await connection.commitAsync();\n      } catch (err) {\n        this._rejecter(err);\n      } finally {\n        if (!configConnection) {\n          await this.client.releaseConnection(connection);\n        } else {\n          debugTx('%s: not releasing external connection', this.txid);\n        }\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/dialects/oracledb/transaction.js"],"names":["Transaction","require","timeout","KnexTimeoutError","debugTx","supportedIsolationLevels","isIsolationLevelEnabled","module","exports","Oracle_Transaction","begin","conn","isolationLevel","includes","client","logger","warn","query","Promise","resolve","commit","value","_completed","commitAsync","_resolver","err","_rejecter","release","rollback","txid","rollbackAsync","catch","e","reject","then","undefined","doNotRejectOnRollback","Error","savepoint","acquireConnection","config","cb","configConnection","connection","__knexTxId","isTransaction","releaseConnection"],"mappings":"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","sourcesContent":["const Transaction = require('../../execution/transaction');\nconst { timeout, KnexTimeoutError } = require('../../util/timeout');\nconst debugTx = require('debug')('knex:tx');\n\n// There's also a \"read only\", but that's not really an \"isolationLevel\"\nconst supportedIsolationLevels = ['read committed', 'serializable'];\n// Remove this if you make it work and set it to true\nconst isIsolationLevelEnabled = false;\n\nmodule.exports = class Oracle_Transaction extends Transaction {\n  // disable autocommit to allow correct behavior (default is true)\n  begin(conn) {\n    if (this.isolationLevel) {\n      if (isIsolationLevelEnabled) {\n        if (!supportedIsolationLevels.includes(this.isolationLevel)) {\n          this.client.logger.warn(\n            'Oracle only supports read committed and serializable transactions, ignoring the isolation level param'\n          );\n        } else {\n          // I tried this, but it didn't work\n          // Doc here: https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SET-TRANSACTION.html\n          return this.query(conn, `SET TRANSACTION ${this.isolationLevel}`);\n        }\n      } else {\n        this.client.logger.warn(\n          'Transaction isolation is not currently supported for Oracle'\n        );\n      }\n    }\n    return Promise.resolve();\n  }\n\n  async commit(conn, value) {\n    this._completed = true;\n    try {\n      await conn.commitAsync();\n      this._resolver(value);\n    } catch (err) {\n      this._rejecter(err);\n    }\n  }\n\n  release(conn, value) {\n    return this._resolver(value);\n  }\n\n  rollback(conn, err) {\n    this._completed = true;\n    debugTx('%s: rolling back', this.txid);\n    return timeout(conn.rollbackAsync(), 5000)\n      .catch((e) => {\n        if (!(e instanceof KnexTimeoutError)) {\n          return Promise.reject(e);\n        }\n        this._rejecter(e);\n      })\n      .then(() => {\n        if (err === undefined) {\n          if (this.doNotRejectOnRollback) {\n            this._resolver();\n            return;\n          }\n          err = new Error(`Transaction rejected with non-error: ${err}`);\n        }\n        this._rejecter(err);\n      });\n  }\n\n  savepoint(conn) {\n    return this.query(conn, `SAVEPOINT ${this.txid}`);\n  }\n\n  async acquireConnection(config, cb) {\n    const configConnection = config && config.connection;\n\n    const connection =\n      configConnection || (await this.client.acquireConnection());\n    try {\n      connection.__knexTxId = this.txid;\n      connection.isTransaction = true;\n      return await cb(connection);\n    } finally {\n      debugTx('%s: releasing connection', this.txid);\n      connection.isTransaction = false;\n      try {\n        await connection.commitAsync();\n      } catch (err) {\n        this._rejecter(err);\n      } finally {\n        if (!configConnection) {\n          await this.client.releaseConnection(connection);\n        } else {\n          debugTx('%s: not releasing external connection', this.txid);\n        }\n      }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}