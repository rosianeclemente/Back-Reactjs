{"ast":null,"code":"const {\n  columnize\n} = require('./wrappingFormatter');\n\nfunction replaceRawArrBindings(raw, client) {\n  const bindingsHolder = {\n    bindings: []\n  };\n  const builder = raw;\n  const expectedBindings = raw.bindings.length;\n  const values = raw.bindings;\n  let index = 0;\n  const sql = raw.sql.replace(/\\\\?\\?\\??/g, function (match) {\n    if (match === '\\\\?') {\n      return match;\n    }\n\n    const value = values[index++];\n\n    if (match === '??') {\n      return columnize(value, builder, client, bindingsHolder);\n    }\n\n    return client.parameter(value, builder, bindingsHolder);\n  });\n\n  if (expectedBindings !== index) {\n    throw new Error(`Expected ${expectedBindings} bindings, saw ${index}`);\n  }\n\n  return {\n    method: 'raw',\n    sql,\n    bindings: bindingsHolder.bindings\n  };\n}\n\nfunction replaceKeyBindings(raw, client) {\n  const bindingsHolder = {\n    bindings: []\n  };\n  const builder = raw;\n  const values = raw.bindings;\n  const regex = /\\\\?(:(\\w+):(?=::)|:(\\w+):(?!:)|:(\\w+))/g;\n  const sql = raw.sql.replace(regex, function (match, p1, p2, p3, p4) {\n    if (match !== p1) {\n      return p1;\n    }\n\n    const part = p2 || p3 || p4;\n    const key = match.trim();\n    const isIdentifier = key[key.length - 1] === ':';\n    const value = values[part];\n\n    if (value === undefined) {\n      if (Object.prototype.hasOwnProperty.call(values, part)) {\n        bindingsHolder.bindings.push(value);\n      }\n\n      return match;\n    }\n\n    if (isIdentifier) {\n      return match.replace(p1, columnize(value, builder, client, bindingsHolder));\n    }\n\n    return match.replace(p1, client.parameter(value, builder, bindingsHolder));\n  });\n  return {\n    method: 'raw',\n    sql,\n    bindings: bindingsHolder.bindings\n  };\n}\n\nmodule.exports = {\n  replaceKeyBindings,\n  replaceRawArrBindings\n};","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/formatter/rawFormatter.js"],"names":["columnize","require","replaceRawArrBindings","raw","client","bindingsHolder","bindings","builder","expectedBindings","length","values","index","sql","replace","match","value","parameter","Error","method","replaceKeyBindings","regex","p1","p2","p3","p4","part","key","trim","isIdentifier","undefined","Object","prototype","hasOwnProperty","call","push","module","exports"],"mappings":"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","sourcesContent":["const { columnize } = require('./wrappingFormatter');\n\nfunction replaceRawArrBindings(raw, client) {\n  const bindingsHolder = {\n    bindings: [],\n  };\n  const builder = raw;\n\n  const expectedBindings = raw.bindings.length;\n  const values = raw.bindings;\n  let index = 0;\n\n  const sql = raw.sql.replace(/\\\\?\\?\\??/g, function (match) {\n    if (match === '\\\\?') {\n      return match;\n    }\n\n    const value = values[index++];\n\n    if (match === '??') {\n      return columnize(value, builder, client, bindingsHolder);\n    }\n    return client.parameter(value, builder, bindingsHolder);\n  });\n\n  if (expectedBindings !== index) {\n    throw new Error(`Expected ${expectedBindings} bindings, saw ${index}`);\n  }\n\n  return {\n    method: 'raw',\n    sql,\n    bindings: bindingsHolder.bindings,\n  };\n}\n\nfunction replaceKeyBindings(raw, client) {\n  const bindingsHolder = {\n    bindings: [],\n  };\n  const builder = raw;\n\n  const values = raw.bindings;\n  const regex = /\\\\?(:(\\w+):(?=::)|:(\\w+):(?!:)|:(\\w+))/g;\n\n  const sql = raw.sql.replace(regex, function (match, p1, p2, p3, p4) {\n    if (match !== p1) {\n      return p1;\n    }\n\n    const part = p2 || p3 || p4;\n    const key = match.trim();\n    const isIdentifier = key[key.length - 1] === ':';\n    const value = values[part];\n\n    if (value === undefined) {\n      if (Object.prototype.hasOwnProperty.call(values, part)) {\n        bindingsHolder.bindings.push(value);\n      }\n\n      return match;\n    }\n\n    if (isIdentifier) {\n      return match.replace(\n        p1,\n        columnize(value, builder, client, bindingsHolder)\n      );\n    }\n\n    return match.replace(p1, client.parameter(value, builder, bindingsHolder));\n  });\n\n  return {\n    method: 'raw',\n    sql,\n    bindings: bindingsHolder.bindings,\n  };\n}\n\nmodule.exports = {\n  replaceKeyBindings,\n  replaceRawArrBindings,\n};\n"]},"metadata":{},"sourceType":"script"}