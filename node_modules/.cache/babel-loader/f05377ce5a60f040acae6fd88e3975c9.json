{"ast":null,"code":"// MySQL Column Compiler\n// -------\nconst ColumnCompiler = require('../../../schema/columncompiler');\n\nconst {\n  isObject\n} = require('../../../util/is');\n\nconst {\n  toNumber\n} = require('../../../util/helpers');\n\nconst commentEscapeRegex = /(?<!\\\\)'/g;\n\nclass ColumnCompiler_MySQL extends ColumnCompiler {\n  constructor(client, tableCompiler, columnBuilder) {\n    super(client, tableCompiler, columnBuilder);\n    this.modifiers = ['unsigned', 'nullable', 'defaultTo', 'comment', 'collate', 'first', 'after'];\n  } // Types\n  // ------\n\n\n  double(precision, scale) {\n    if (!precision) return 'double';\n    return `double(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n\n  integer(length) {\n    length = length ? `(${toNumber(length, 11)})` : '';\n    return `int${length}`;\n  }\n\n  tinyint(length) {\n    length = length ? `(${toNumber(length, 1)})` : '';\n    return `tinyint${length}`;\n  }\n\n  text(column) {\n    switch (column) {\n      case 'medium':\n      case 'mediumtext':\n        return 'mediumtext';\n\n      case 'long':\n      case 'longtext':\n        return 'longtext';\n\n      default:\n        return 'text';\n    }\n  }\n\n  mediumtext() {\n    return this.text('medium');\n  }\n\n  longtext() {\n    return this.text('long');\n  }\n\n  enu(allowed) {\n    return `enum('${allowed.join(\"', '\")}')`;\n  }\n\n  datetime(precision) {\n    if (isObject(precision)) {\n      ({\n        precision\n      } = precision);\n    }\n\n    return typeof precision === 'number' ? `datetime(${precision})` : 'datetime';\n  }\n\n  timestamp(precision) {\n    if (isObject(precision)) {\n      ({\n        precision\n      } = precision);\n    }\n\n    return typeof precision === 'number' ? `timestamp(${precision})` : 'timestamp';\n  }\n\n  time(precision) {\n    if (isObject(precision)) {\n      ({\n        precision\n      } = precision);\n    }\n\n    return typeof precision === 'number' ? `time(${precision})` : 'time';\n  }\n\n  bit(length) {\n    return length ? `bit(${toNumber(length)})` : 'bit';\n  }\n\n  binary(length) {\n    return length ? `varbinary(${toNumber(length)})` : 'blob';\n  }\n\n  json() {\n    return 'json';\n  }\n\n  jsonb() {\n    return 'json';\n  } // Modifiers\n  // ------\n\n\n  defaultTo(value) {\n    // MySQL defaults to null by default, but breaks down if you pass it explicitly\n    // Note that in MySQL versions up to 5.7, logic related to updating\n    // timestamps when no explicit value is passed is quite insane - https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp\n    if (value === null || value === undefined) {\n      return;\n    }\n\n    if ((this.type === 'json' || this.type === 'jsonb') && isObject(value)) {\n      // Default value for json will work only it is an expression\n      return `default ('${JSON.stringify(value)}')`;\n    }\n\n    const defaultVal = super.defaultTo.apply(this, arguments);\n\n    if (this.type !== 'blob' && this.type.indexOf('text') === -1) {\n      return defaultVal;\n    }\n\n    return '';\n  }\n\n  unsigned() {\n    return 'unsigned';\n  }\n\n  comment(comment) {\n    if (comment && comment.length > 255) {\n      this.client.logger.warn('Your comment is longer than the max comment length for MySQL');\n    }\n\n    return comment && `comment '${comment.replace(commentEscapeRegex, \"\\\\'\")}'`;\n  }\n\n  first() {\n    return 'first';\n  }\n\n  after(column) {\n    return `after ${this.formatter.wrap(column)}`;\n  }\n\n  collate(collation) {\n    return collation && `collate '${collation}'`;\n  }\n\n}\n\nColumnCompiler_MySQL.prototype.increments = ({\n  primaryKey = true\n} = {}) => 'int unsigned not null auto_increment' + (primaryKey ? ' primary key' : '');\n\nColumnCompiler_MySQL.prototype.bigincrements = ({\n  primaryKey = true\n} = {}) => 'bigint unsigned not null auto_increment' + (primaryKey ? ' primary key' : '');\n\nColumnCompiler_MySQL.prototype.bigint = 'bigint';\nColumnCompiler_MySQL.prototype.mediumint = 'mediumint';\nColumnCompiler_MySQL.prototype.smallint = 'smallint';\nmodule.exports = ColumnCompiler_MySQL;","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/dialects/mysql/schema/mysql-columncompiler.js"],"names":["ColumnCompiler","require","isObject","toNumber","commentEscapeRegex","ColumnCompiler_MySQL","constructor","client","tableCompiler","columnBuilder","modifiers","double","precision","scale","integer","length","tinyint","text","column","mediumtext","longtext","enu","allowed","join","datetime","timestamp","time","bit","binary","json","jsonb","defaultTo","value","undefined","type","JSON","stringify","defaultVal","apply","arguments","indexOf","unsigned","comment","logger","warn","replace","first","after","formatter","wrap","collate","collation","prototype","increments","primaryKey","bigincrements","bigint","mediumint","smallint","module","exports"],"mappings":"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","sourcesContent":["// MySQL Column Compiler\n// -------\nconst ColumnCompiler = require('../../../schema/columncompiler');\nconst { isObject } = require('../../../util/is');\nconst { toNumber } = require('../../../util/helpers');\n\nconst commentEscapeRegex = /(?<!\\\\)'/g;\n\nclass ColumnCompiler_MySQL extends ColumnCompiler {\n  constructor(client, tableCompiler, columnBuilder) {\n    super(client, tableCompiler, columnBuilder);\n    this.modifiers = [\n      'unsigned',\n      'nullable',\n      'defaultTo',\n      'comment',\n      'collate',\n      'first',\n      'after',\n    ];\n  }\n\n  // Types\n  // ------\n\n  double(precision, scale) {\n    if (!precision) return 'double';\n    return `double(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n\n  integer(length) {\n    length = length ? `(${toNumber(length, 11)})` : '';\n    return `int${length}`;\n  }\n\n  tinyint(length) {\n    length = length ? `(${toNumber(length, 1)})` : '';\n    return `tinyint${length}`;\n  }\n\n  text(column) {\n    switch (column) {\n      case 'medium':\n      case 'mediumtext':\n        return 'mediumtext';\n      case 'long':\n      case 'longtext':\n        return 'longtext';\n      default:\n        return 'text';\n    }\n  }\n\n  mediumtext() {\n    return this.text('medium');\n  }\n\n  longtext() {\n    return this.text('long');\n  }\n\n  enu(allowed) {\n    return `enum('${allowed.join(\"', '\")}')`;\n  }\n\n  datetime(precision) {\n    if (isObject(precision)) {\n      ({ precision } = precision);\n    }\n\n    return typeof precision === 'number'\n      ? `datetime(${precision})`\n      : 'datetime';\n  }\n\n  timestamp(precision) {\n    if (isObject(precision)) {\n      ({ precision } = precision);\n    }\n\n    return typeof precision === 'number'\n      ? `timestamp(${precision})`\n      : 'timestamp';\n  }\n\n  time(precision) {\n    if (isObject(precision)) {\n      ({ precision } = precision);\n    }\n\n    return typeof precision === 'number' ? `time(${precision})` : 'time';\n  }\n\n  bit(length) {\n    return length ? `bit(${toNumber(length)})` : 'bit';\n  }\n\n  binary(length) {\n    return length ? `varbinary(${toNumber(length)})` : 'blob';\n  }\n\n  json() {\n    return 'json';\n  }\n\n  jsonb() {\n    return 'json';\n  }\n\n  // Modifiers\n  // ------\n\n  defaultTo(value) {\n    // MySQL defaults to null by default, but breaks down if you pass it explicitly\n    // Note that in MySQL versions up to 5.7, logic related to updating\n    // timestamps when no explicit value is passed is quite insane - https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp\n    if (value === null || value === undefined) {\n      return;\n    }\n    if ((this.type === 'json' || this.type === 'jsonb') && isObject(value)) {\n      // Default value for json will work only it is an expression\n      return `default ('${JSON.stringify(value)}')`;\n    }\n    const defaultVal = super.defaultTo.apply(this, arguments);\n    if (this.type !== 'blob' && this.type.indexOf('text') === -1) {\n      return defaultVal;\n    }\n    return '';\n  }\n\n  unsigned() {\n    return 'unsigned';\n  }\n\n  comment(comment) {\n    if (comment && comment.length > 255) {\n      this.client.logger.warn(\n        'Your comment is longer than the max comment length for MySQL'\n      );\n    }\n    return comment && `comment '${comment.replace(commentEscapeRegex, \"\\\\'\")}'`;\n  }\n\n  first() {\n    return 'first';\n  }\n\n  after(column) {\n    return `after ${this.formatter.wrap(column)}`;\n  }\n\n  collate(collation) {\n    return collation && `collate '${collation}'`;\n  }\n}\n\nColumnCompiler_MySQL.prototype.increments = ({ primaryKey = true } = {}) =>\n  'int unsigned not null auto_increment' + (primaryKey ? ' primary key' : '');\nColumnCompiler_MySQL.prototype.bigincrements = ({ primaryKey = true } = {}) =>\n  'bigint unsigned not null auto_increment' +\n  (primaryKey ? ' primary key' : '');\nColumnCompiler_MySQL.prototype.bigint = 'bigint';\nColumnCompiler_MySQL.prototype.mediumint = 'mediumint';\nColumnCompiler_MySQL.prototype.smallint = 'smallint';\n\nmodule.exports = ColumnCompiler_MySQL;\n"]},"metadata":{},"sourceType":"script"}