{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst TimeoutError_1 = require(\"./TimeoutError\");\n\nconst utils_1 = require(\"./utils\");\n\nclass PendingOperation {\n  constructor(timeoutMillis) {\n    this.timeoutMillis = timeoutMillis;\n    this.deferred = utils_1.defer();\n    this.possibleTimeoutCause = null;\n    this.isRejected = false;\n    this.promise = timeout(this.deferred.promise, timeoutMillis).catch(err => {\n      if (err instanceof TimeoutError_1.TimeoutError) {\n        if (this.possibleTimeoutCause) {\n          err = new TimeoutError_1.TimeoutError(this.possibleTimeoutCause.message);\n        } else {\n          err = new TimeoutError_1.TimeoutError('operation timed out for an unknown reason');\n        }\n      }\n\n      this.isRejected = true;\n      return Promise.reject(err);\n    });\n  }\n\n  abort() {\n    this.reject(new Error('aborted'));\n  }\n\n  reject(err) {\n    this.deferred.reject(err);\n  }\n\n  resolve(value) {\n    this.deferred.resolve(value);\n  }\n\n}\n\nexports.PendingOperation = PendingOperation;\n\nfunction timeout(promise, time) {\n  return new Promise((resolve, reject) => {\n    const timeoutHandle = setTimeout(() => reject(new TimeoutError_1.TimeoutError()), time);\n    promise.then(result => {\n      clearTimeout(timeoutHandle);\n      resolve(result);\n    }).catch(err => {\n      clearTimeout(timeoutHandle);\n      reject(err);\n    });\n  });\n}","map":{"version":3,"sources":["/home/rosiane/back/node_modules/tarn/dist/PendingOperation.js"],"names":["Object","defineProperty","exports","value","TimeoutError_1","require","utils_1","PendingOperation","constructor","timeoutMillis","deferred","defer","possibleTimeoutCause","isRejected","promise","timeout","catch","err","TimeoutError","message","Promise","reject","abort","Error","resolve","time","timeoutHandle","setTimeout","then","result","clearTimeout"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,cAAc,GAAGC,OAAO,CAAC,gBAAD,CAA9B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAME,gBAAN,CAAuB;AACnBC,EAAAA,WAAW,CAACC,aAAD,EAAgB;AACvB,SAAKA,aAAL,GAAqBA,aAArB;AACA,SAAKC,QAAL,GAAgBJ,OAAO,CAACK,KAAR,EAAhB;AACA,SAAKC,oBAAL,GAA4B,IAA5B;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKC,OAAL,GAAeC,OAAO,CAAC,KAAKL,QAAL,CAAcI,OAAf,EAAwBL,aAAxB,CAAP,CAA8CO,KAA9C,CAAoDC,GAAG,IAAI;AACtE,UAAIA,GAAG,YAAYb,cAAc,CAACc,YAAlC,EAAgD;AAC5C,YAAI,KAAKN,oBAAT,EAA+B;AAC3BK,UAAAA,GAAG,GAAG,IAAIb,cAAc,CAACc,YAAnB,CAAgC,KAAKN,oBAAL,CAA0BO,OAA1D,CAAN;AACH,SAFD,MAGK;AACDF,UAAAA,GAAG,GAAG,IAAIb,cAAc,CAACc,YAAnB,CAAgC,2CAAhC,CAAN;AACH;AACJ;;AACD,WAAKL,UAAL,GAAkB,IAAlB;AACA,aAAOO,OAAO,CAACC,MAAR,CAAeJ,GAAf,CAAP;AACH,KAXc,CAAf;AAYH;;AACDK,EAAAA,KAAK,GAAG;AACJ,SAAKD,MAAL,CAAY,IAAIE,KAAJ,CAAU,SAAV,CAAZ;AACH;;AACDF,EAAAA,MAAM,CAACJ,GAAD,EAAM;AACR,SAAKP,QAAL,CAAcW,MAAd,CAAqBJ,GAArB;AACH;;AACDO,EAAAA,OAAO,CAACrB,KAAD,EAAQ;AACX,SAAKO,QAAL,CAAcc,OAAd,CAAsBrB,KAAtB;AACH;;AA3BkB;;AA6BvBD,OAAO,CAACK,gBAAR,GAA2BA,gBAA3B;;AACA,SAASQ,OAAT,CAAiBD,OAAjB,EAA0BW,IAA1B,EAAgC;AAC5B,SAAO,IAAIL,OAAJ,CAAY,CAACI,OAAD,EAAUH,MAAV,KAAqB;AACpC,UAAMK,aAAa,GAAGC,UAAU,CAAC,MAAMN,MAAM,CAAC,IAAIjB,cAAc,CAACc,YAAnB,EAAD,CAAb,EAAkDO,IAAlD,CAAhC;AACAX,IAAAA,OAAO,CACFc,IADL,CACUC,MAAM,IAAI;AAChBC,MAAAA,YAAY,CAACJ,aAAD,CAAZ;AACAF,MAAAA,OAAO,CAACK,MAAD,CAAP;AACH,KAJD,EAKKb,KALL,CAKWC,GAAG,IAAI;AACda,MAAAA,YAAY,CAACJ,aAAD,CAAZ;AACAL,MAAAA,MAAM,CAACJ,GAAD,CAAN;AACH,KARD;AASH,GAXM,CAAP;AAYH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst TimeoutError_1 = require(\"./TimeoutError\");\nconst utils_1 = require(\"./utils\");\nclass PendingOperation {\n    constructor(timeoutMillis) {\n        this.timeoutMillis = timeoutMillis;\n        this.deferred = utils_1.defer();\n        this.possibleTimeoutCause = null;\n        this.isRejected = false;\n        this.promise = timeout(this.deferred.promise, timeoutMillis).catch(err => {\n            if (err instanceof TimeoutError_1.TimeoutError) {\n                if (this.possibleTimeoutCause) {\n                    err = new TimeoutError_1.TimeoutError(this.possibleTimeoutCause.message);\n                }\n                else {\n                    err = new TimeoutError_1.TimeoutError('operation timed out for an unknown reason');\n                }\n            }\n            this.isRejected = true;\n            return Promise.reject(err);\n        });\n    }\n    abort() {\n        this.reject(new Error('aborted'));\n    }\n    reject(err) {\n        this.deferred.reject(err);\n    }\n    resolve(value) {\n        this.deferred.resolve(value);\n    }\n}\nexports.PendingOperation = PendingOperation;\nfunction timeout(promise, time) {\n    return new Promise((resolve, reject) => {\n        const timeoutHandle = setTimeout(() => reject(new TimeoutError_1.TimeoutError()), time);\n        promise\n            .then(result => {\n            clearTimeout(timeoutHandle);\n            resolve(result);\n        })\n            .catch(err => {\n            clearTimeout(timeoutHandle);\n            reject(err);\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"script"}