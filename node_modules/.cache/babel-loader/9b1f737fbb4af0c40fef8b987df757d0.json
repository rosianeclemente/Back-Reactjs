{"ast":null,"code":"const extend = require('lodash/extend');\n\nconst toArray = require('lodash/toArray');\n\nconst {\n  addQueryContext\n} = require('../util/helpers'); // The chainable interface off the original \"column\" method.\n\n\nclass ColumnBuilder {\n  constructor(client, tableBuilder, type, args) {\n    this.client = client;\n    this._method = 'add';\n    this._single = {};\n    this._modifiers = {};\n    this._statements = [];\n    this._type = columnAlias[type] || type;\n    this._args = args;\n    this._tableBuilder = tableBuilder; // If we're altering the table, extend the object\n    // with the available \"alter\" methods.\n\n    if (tableBuilder._method === 'alter') {\n      extend(this, AlterMethods);\n    }\n  } // Specify that the current column \"references\" a column,\n  // which may be tableName.column or just \"column\"\n\n\n  references(value) {\n    return this._tableBuilder.foreign.call(this._tableBuilder, this._args[0], undefined, this)._columnBuilder(this).references(value);\n  }\n\n} // All of the modifier methods that can be used to modify the current query.\n\n\nconst modifiers = ['default', 'defaultsTo', 'defaultTo', 'unsigned', 'nullable', 'first', 'after', 'comment', 'collate']; // Aliases for convenience.\n\nconst aliasMethod = {\n  default: 'defaultTo',\n  defaultsTo: 'defaultTo'\n}; // If we call any of the modifiers (index or otherwise) on the chainable, we pretend\n// as though we're calling `table.method(column)` directly.\n\nmodifiers.forEach(function (method) {\n  const key = aliasMethod[method] || method;\n\n  ColumnBuilder.prototype[method] = function () {\n    this._modifiers[key] = toArray(arguments);\n    return this;\n  };\n});\naddQueryContext(ColumnBuilder);\n\nColumnBuilder.prototype.notNull = ColumnBuilder.prototype.notNullable = function notNullable() {\n  return this.nullable(false);\n};\n\n['index', 'primary', 'unique'].forEach(function (method) {\n  ColumnBuilder.prototype[method] = function () {\n    if (this._type.toLowerCase().indexOf('increments') === -1) {\n      this._tableBuilder[method].apply(this._tableBuilder, [this._args[0]].concat(toArray(arguments)));\n    }\n\n    return this;\n  };\n});\nconst AlterMethods = {}; // Specify that the column is to be dropped. This takes precedence\n// over all other rules for the column.\n\nAlterMethods.drop = function () {\n  this._single.drop = true;\n  return this;\n}; // Specify the \"type\" that we're looking to set the\n// Knex takes no responsibility for any data-loss that may\n// occur when changing data types.\n\n\nAlterMethods.alterType = function (type) {\n  this._statements.push({\n    grouping: 'alterType',\n    value: type\n  });\n\n  return this;\n}; // Set column method to alter (default is add).\n\n\nAlterMethods.alter = function () {\n  this._method = 'alter';\n  return this;\n}; // Alias a few methods for clarity when processing.\n\n\nconst columnAlias = {\n  float: 'floating',\n  enum: 'enu',\n  boolean: 'bool',\n  string: 'varchar',\n  bigint: 'bigInteger'\n};\nmodule.exports = ColumnBuilder;","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/schema/columnbuilder.js"],"names":["extend","require","toArray","addQueryContext","ColumnBuilder","constructor","client","tableBuilder","type","args","_method","_single","_modifiers","_statements","_type","columnAlias","_args","_tableBuilder","AlterMethods","references","value","foreign","call","undefined","_columnBuilder","modifiers","aliasMethod","default","defaultsTo","forEach","method","key","prototype","arguments","notNull","notNullable","nullable","toLowerCase","indexOf","apply","concat","drop","alterType","push","grouping","alter","float","enum","boolean","string","bigint","module","exports"],"mappings":"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","sourcesContent":["const extend = require('lodash/extend');\nconst toArray = require('lodash/toArray');\nconst { addQueryContext } = require('../util/helpers');\n\n// The chainable interface off the original \"column\" method.\nclass ColumnBuilder {\n  constructor(client, tableBuilder, type, args) {\n    this.client = client;\n    this._method = 'add';\n    this._single = {};\n    this._modifiers = {};\n    this._statements = [];\n    this._type = columnAlias[type] || type;\n    this._args = args;\n    this._tableBuilder = tableBuilder;\n\n    // If we're altering the table, extend the object\n    // with the available \"alter\" methods.\n    if (tableBuilder._method === 'alter') {\n      extend(this, AlterMethods);\n    }\n  }\n\n  // Specify that the current column \"references\" a column,\n  // which may be tableName.column or just \"column\"\n  references(value) {\n    return this._tableBuilder.foreign\n      .call(this._tableBuilder, this._args[0], undefined, this)\n      ._columnBuilder(this)\n      .references(value);\n  }\n}\n\n// All of the modifier methods that can be used to modify the current query.\nconst modifiers = [\n  'default',\n  'defaultsTo',\n  'defaultTo',\n  'unsigned',\n  'nullable',\n  'first',\n  'after',\n  'comment',\n  'collate',\n];\n\n// Aliases for convenience.\nconst aliasMethod = {\n  default: 'defaultTo',\n  defaultsTo: 'defaultTo',\n};\n\n// If we call any of the modifiers (index or otherwise) on the chainable, we pretend\n// as though we're calling `table.method(column)` directly.\nmodifiers.forEach(function (method) {\n  const key = aliasMethod[method] || method;\n  ColumnBuilder.prototype[method] = function () {\n    this._modifiers[key] = toArray(arguments);\n    return this;\n  };\n});\n\naddQueryContext(ColumnBuilder);\n\nColumnBuilder.prototype.notNull = ColumnBuilder.prototype.notNullable = function notNullable() {\n  return this.nullable(false);\n};\n\n['index', 'primary', 'unique'].forEach(function (method) {\n  ColumnBuilder.prototype[method] = function () {\n    if (this._type.toLowerCase().indexOf('increments') === -1) {\n      this._tableBuilder[method].apply(\n        this._tableBuilder,\n        [this._args[0]].concat(toArray(arguments))\n      );\n    }\n    return this;\n  };\n});\n\nconst AlterMethods = {};\n\n// Specify that the column is to be dropped. This takes precedence\n// over all other rules for the column.\nAlterMethods.drop = function () {\n  this._single.drop = true;\n\n  return this;\n};\n\n// Specify the \"type\" that we're looking to set the\n// Knex takes no responsibility for any data-loss that may\n// occur when changing data types.\nAlterMethods.alterType = function (type) {\n  this._statements.push({\n    grouping: 'alterType',\n    value: type,\n  });\n\n  return this;\n};\n\n// Set column method to alter (default is add).\nAlterMethods.alter = function () {\n  this._method = 'alter';\n\n  return this;\n};\n\n// Alias a few methods for clarity when processing.\nconst columnAlias = {\n  float: 'floating',\n  enum: 'enu',\n  boolean: 'bool',\n  string: 'varchar',\n  bigint: 'bigInteger',\n};\n\nmodule.exports = ColumnBuilder;\n"]},"metadata":{},"sourceType":"script"}