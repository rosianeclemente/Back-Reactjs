{"ast":null,"code":"function compileCreateTable(ast, wrap = v => v) {\n  return createTable(ast, wrap);\n}\n\nfunction compileCreateIndex(ast, wrap = v => v) {\n  return createIndex(ast, wrap);\n}\n\nfunction createTable(ast, wrap) {\n  return `CREATE${temporary(ast, wrap)} TABLE${exists(ast, wrap)} ${schema(ast, wrap)}${table(ast, wrap)} (${columnDefinitionList(ast, wrap)}${tableConstraintList(ast, wrap)})${rowid(ast, wrap)}`;\n}\n\nfunction temporary(ast, wrap) {\n  return ast.temporary ? ' TEMP' : '';\n}\n\nfunction rowid(ast, wrap) {\n  return ast.rowid ? ' WITHOUT ROWID' : '';\n}\n\nfunction columnDefinitionList(ast, wrap) {\n  return ast.columns.map(column => columnDefinition(column, wrap)).join(', ');\n}\n\nfunction columnDefinition(ast, wrap) {\n  return `${identifier(ast.name, wrap)}${typeName(ast, wrap)}${columnConstraintList(ast.constraints, wrap)}`;\n}\n\nfunction typeName(ast, wrap) {\n  return ast.type !== null ? ` ${ast.type}` : '';\n}\n\nfunction columnConstraintList(ast, wrap) {\n  return `${primaryColumnConstraint(ast, wrap)}${notnullColumnConstraint(ast, wrap)}${nullColumnConstraint(ast, wrap)}${uniqueColumnConstraint(ast, wrap)}${checkColumnConstraint(ast, wrap)}${defaultColumnConstraint(ast, wrap)}${collateColumnConstraint(ast, wrap)}${referencesColumnConstraint(ast, wrap)}${asColumnConstraint(ast, wrap)}`;\n}\n\nfunction primaryColumnConstraint(ast, wrap) {\n  return ast.primary !== null ? ` ${constraintName(ast.primary, wrap)}PRIMARY KEY${order(ast.primary, wrap)}${conflictClause(ast.primary, wrap)}${autoincrement(ast.primary, wrap)}` : '';\n}\n\nfunction autoincrement(ast, wrap) {\n  return ast.autoincrement ? ' AUTOINCREMENT' : '';\n}\n\nfunction notnullColumnConstraint(ast, wrap) {\n  return ast.notnull !== null ? ` ${constraintName(ast.notnull, wrap)}NOT NULL${conflictClause(ast.notnull, wrap)}` : '';\n}\n\nfunction nullColumnConstraint(ast, wrap) {\n  return ast.null !== null ? ` ${constraintName(ast.null, wrap)}NULL${conflictClause(ast.null, wrap)}` : '';\n}\n\nfunction uniqueColumnConstraint(ast, wrap) {\n  return ast.unique !== null ? ` ${constraintName(ast.unique, wrap)}UNIQUE${conflictClause(ast.unique, wrap)}` : '';\n}\n\nfunction checkColumnConstraint(ast, wrap) {\n  return ast.check !== null ? ` ${constraintName(ast.check, wrap)}CHECK (${expression(ast.check.expression, wrap)})` : '';\n}\n\nfunction defaultColumnConstraint(ast, wrap) {\n  return ast.default !== null ? ` ${constraintName(ast.default, wrap)}DEFAULT ${!ast.default.expression ? ast.default.value : `(${expression(ast.default.value, wrap)})`}` : '';\n}\n\nfunction collateColumnConstraint(ast, wrap) {\n  return ast.collate !== null ? ` ${constraintName(ast.collate, wrap)}COLLATE ${ast.collate.collation}` : '';\n}\n\nfunction referencesColumnConstraint(ast, wrap) {\n  return ast.references !== null ? ` ${constraintName(ast.references, wrap)}${foreignKeyClause(ast.references, wrap)}` : '';\n}\n\nfunction asColumnConstraint(ast, wrap) {\n  return ast.as !== null ? ` ${constraintName(ast.as, wrap)}${ast.as.generated ? 'GENERATED ALWAYS ' : ''}AS (${expression(ast.as.expression, wrap)})${ast.as.mode !== null ? ` ${ast.as.mode}` : ''}` : '';\n}\n\nfunction tableConstraintList(ast, wrap) {\n  return ast.constraints.reduce((constraintList, constraint) => `${constraintList}, ${tableConstraint(constraint, wrap)}`, '');\n}\n\nfunction tableConstraint(ast, wrap) {\n  switch (ast.type) {\n    case 'PRIMARY KEY':\n      return primaryTableConstraint(ast, wrap);\n\n    case 'UNIQUE':\n      return uniqueTableConstraint(ast, wrap);\n\n    case 'CHECK':\n      return checkTableConstraint(ast, wrap);\n\n    case 'FOREIGN KEY':\n      return foreignTableConstraint(ast, wrap);\n  }\n}\n\nfunction primaryTableConstraint(ast, wrap) {\n  return `${constraintName(ast, wrap)}PRIMARY KEY (${indexedColumnList(ast, wrap)})${conflictClause(ast, wrap)}`;\n}\n\nfunction uniqueTableConstraint(ast, wrap) {\n  return `${constraintName(ast, wrap)}UNIQUE (${indexedColumnList(ast, wrap)})${conflictClause(ast, wrap)}`;\n}\n\nfunction conflictClause(ast, wrap) {\n  return ast.conflict !== null ? ` ON CONFLICT ${ast.conflict}` : '';\n}\n\nfunction checkTableConstraint(ast, wrap) {\n  return `${constraintName(ast, wrap)}CHECK (${expression(ast.expression, wrap)})`;\n}\n\nfunction foreignTableConstraint(ast, wrap) {\n  return `${constraintName(ast, wrap)}FOREIGN KEY (${columnNameList(ast, wrap)}) ${foreignKeyClause(ast.references, wrap)}`;\n}\n\nfunction foreignKeyClause(ast, wrap) {\n  return `REFERENCES ${table(ast, wrap)}${columnNameListOptional(ast, wrap)}${deleteUpdateMatchList(ast, wrap)}${deferrable(ast.deferrable, wrap)}`;\n}\n\nfunction columnNameListOptional(ast, wrap) {\n  return ast.columns.length > 0 ? ` (${columnNameList(ast, wrap)})` : '';\n}\n\nfunction columnNameList(ast, wrap) {\n  return ast.columns.map(column => identifier(column, wrap)).join(', ');\n}\n\nfunction deleteUpdateMatchList(ast, wrap) {\n  return `${deleteReference(ast, wrap)}${updateReference(ast, wrap)}${matchReference(ast, wrap)}`;\n}\n\nfunction deleteReference(ast, wrap) {\n  return ast.delete !== null ? ` ON DELETE ${ast.delete}` : '';\n}\n\nfunction updateReference(ast, wrap) {\n  return ast.update !== null ? ` ON UPDATE ${ast.update}` : '';\n}\n\nfunction matchReference(ast, wrap) {\n  return ast.match !== null ? ` MATCH ${ast.match}` : '';\n}\n\nfunction deferrable(ast, wrap) {\n  return ast !== null ? ` ${ast.not ? 'NOT ' : ''}DEFERRABLE${ast.initially !== null ? ` INITIALLY ${ast.initially}` : ''}` : '';\n}\n\nfunction constraintName(ast, wrap) {\n  return ast.name !== null ? `CONSTRAINT ${identifier(ast.name, wrap)} ` : '';\n}\n\nfunction createIndex(ast, wrap) {\n  return `CREATE${unique(ast, wrap)} INDEX${exists(ast, wrap)} ${schema(ast, wrap)}${index(ast, wrap)} on ${table(ast, wrap)} (${indexedColumnList(ast, wrap)})${where(ast, wrap)}`;\n}\n\nfunction unique(ast, wrap) {\n  return ast.unique ? ' UNIQUE' : '';\n}\n\nfunction exists(ast, wrap) {\n  return ast.exists ? ' IF NOT EXISTS' : '';\n}\n\nfunction schema(ast, wrap) {\n  return ast.schema !== null ? `${identifier(ast.schema, wrap)}.` : '';\n}\n\nfunction index(ast, wrap) {\n  return identifier(ast.index, wrap);\n}\n\nfunction table(ast, wrap) {\n  return identifier(ast.table, wrap);\n}\n\nfunction where(ast, wrap) {\n  return ast.where !== null ? ` where ${expression(ast.where)}` : '';\n}\n\nfunction indexedColumnList(ast, wrap) {\n  return ast.columns.map(column => !column.expression ? indexedColumn(column, wrap) : indexedColumnExpression(column, wrap)).join(', ');\n}\n\nfunction indexedColumn(ast, wrap) {\n  return `${identifier(ast.name, wrap)}${collation(ast, wrap)}${order(ast, wrap)}`;\n}\n\nfunction indexedColumnExpression(ast, wrap) {\n  return `${indexedExpression(ast.name, wrap)}${collation(ast, wrap)}${order(ast, wrap)}`;\n}\n\nfunction collation(ast, wrap) {\n  return ast.collation !== null ? ` COLLATE ${ast.collation}` : '';\n}\n\nfunction order(ast, wrap) {\n  return ast.order !== null ? ` ${ast.order}` : '';\n}\n\nfunction indexedExpression(ast, wrap) {\n  return expression(ast, wrap);\n}\n\nfunction expression(ast, wrap) {\n  return ast.reduce((expr, e) => Array.isArray(e) ? `${expr}(${expression(e)})` : !expr ? e : `${expr} ${e}`, '');\n}\n\nfunction identifier(ast, wrap) {\n  return wrap(ast);\n}\n\nmodule.exports = {\n  compileCreateTable,\n  compileCreateIndex\n};","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/dialects/sqlite3/schema/internal/compiler.js"],"names":["compileCreateTable","ast","wrap","v","createTable","compileCreateIndex","createIndex","temporary","exists","schema","table","columnDefinitionList","tableConstraintList","rowid","columns","map","column","columnDefinition","join","identifier","name","typeName","columnConstraintList","constraints","type","primaryColumnConstraint","notnullColumnConstraint","nullColumnConstraint","uniqueColumnConstraint","checkColumnConstraint","defaultColumnConstraint","collateColumnConstraint","referencesColumnConstraint","asColumnConstraint","primary","constraintName","order","conflictClause","autoincrement","notnull","null","unique","check","expression","default","value","collate","collation","references","foreignKeyClause","as","generated","mode","reduce","constraintList","constraint","tableConstraint","primaryTableConstraint","uniqueTableConstraint","checkTableConstraint","foreignTableConstraint","indexedColumnList","conflict","columnNameList","columnNameListOptional","deleteUpdateMatchList","deferrable","length","deleteReference","updateReference","matchReference","delete","update","match","not","initially","index","where","indexedColumn","indexedColumnExpression","indexedExpression","expr","e","Array","isArray","module","exports"],"mappings":"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","sourcesContent":["function compileCreateTable(ast, wrap = (v) => v) {\n  return createTable(ast, wrap);\n}\n\nfunction compileCreateIndex(ast, wrap = (v) => v) {\n  return createIndex(ast, wrap);\n}\n\nfunction createTable(ast, wrap) {\n  return `CREATE${temporary(ast, wrap)} TABLE${exists(ast, wrap)} ${schema(\n    ast,\n    wrap\n  )}${table(ast, wrap)} (${columnDefinitionList(\n    ast,\n    wrap\n  )}${tableConstraintList(ast, wrap)})${rowid(ast, wrap)}`;\n}\n\nfunction temporary(ast, wrap) {\n  return ast.temporary ? ' TEMP' : '';\n}\n\nfunction rowid(ast, wrap) {\n  return ast.rowid ? ' WITHOUT ROWID' : '';\n}\n\nfunction columnDefinitionList(ast, wrap) {\n  return ast.columns.map((column) => columnDefinition(column, wrap)).join(', ');\n}\n\nfunction columnDefinition(ast, wrap) {\n  return `${identifier(ast.name, wrap)}${typeName(\n    ast,\n    wrap\n  )}${columnConstraintList(ast.constraints, wrap)}`;\n}\n\nfunction typeName(ast, wrap) {\n  return ast.type !== null ? ` ${ast.type}` : '';\n}\n\nfunction columnConstraintList(ast, wrap) {\n  return `${primaryColumnConstraint(ast, wrap)}${notnullColumnConstraint(\n    ast,\n    wrap\n  )}${nullColumnConstraint(ast, wrap)}${uniqueColumnConstraint(\n    ast,\n    wrap\n  )}${checkColumnConstraint(ast, wrap)}${defaultColumnConstraint(\n    ast,\n    wrap\n  )}${collateColumnConstraint(ast, wrap)}${referencesColumnConstraint(\n    ast,\n    wrap\n  )}${asColumnConstraint(ast, wrap)}`;\n}\n\nfunction primaryColumnConstraint(ast, wrap) {\n  return ast.primary !== null\n    ? ` ${constraintName(ast.primary, wrap)}PRIMARY KEY${order(\n        ast.primary,\n        wrap\n      )}${conflictClause(ast.primary, wrap)}${autoincrement(ast.primary, wrap)}`\n    : '';\n}\n\nfunction autoincrement(ast, wrap) {\n  return ast.autoincrement ? ' AUTOINCREMENT' : '';\n}\n\nfunction notnullColumnConstraint(ast, wrap) {\n  return ast.notnull !== null\n    ? ` ${constraintName(ast.notnull, wrap)}NOT NULL${conflictClause(\n        ast.notnull,\n        wrap\n      )}`\n    : '';\n}\n\nfunction nullColumnConstraint(ast, wrap) {\n  return ast.null !== null\n    ? ` ${constraintName(ast.null, wrap)}NULL${conflictClause(ast.null, wrap)}`\n    : '';\n}\n\nfunction uniqueColumnConstraint(ast, wrap) {\n  return ast.unique !== null\n    ? ` ${constraintName(ast.unique, wrap)}UNIQUE${conflictClause(\n        ast.unique,\n        wrap\n      )}`\n    : '';\n}\n\nfunction checkColumnConstraint(ast, wrap) {\n  return ast.check !== null\n    ? ` ${constraintName(ast.check, wrap)}CHECK (${expression(\n        ast.check.expression,\n        wrap\n      )})`\n    : '';\n}\n\nfunction defaultColumnConstraint(ast, wrap) {\n  return ast.default !== null\n    ? ` ${constraintName(ast.default, wrap)}DEFAULT ${\n        !ast.default.expression\n          ? ast.default.value\n          : `(${expression(ast.default.value, wrap)})`\n      }`\n    : '';\n}\n\nfunction collateColumnConstraint(ast, wrap) {\n  return ast.collate !== null\n    ? ` ${constraintName(ast.collate, wrap)}COLLATE ${ast.collate.collation}`\n    : '';\n}\n\nfunction referencesColumnConstraint(ast, wrap) {\n  return ast.references !== null\n    ? ` ${constraintName(ast.references, wrap)}${foreignKeyClause(\n        ast.references,\n        wrap\n      )}`\n    : '';\n}\n\nfunction asColumnConstraint(ast, wrap) {\n  return ast.as !== null\n    ? ` ${constraintName(ast.as, wrap)}${\n        ast.as.generated ? 'GENERATED ALWAYS ' : ''\n      }AS (${expression(ast.as.expression, wrap)})${\n        ast.as.mode !== null ? ` ${ast.as.mode}` : ''\n      }`\n    : '';\n}\n\nfunction tableConstraintList(ast, wrap) {\n  return ast.constraints.reduce(\n    (constraintList, constraint) =>\n      `${constraintList}, ${tableConstraint(constraint, wrap)}`,\n    ''\n  );\n}\n\nfunction tableConstraint(ast, wrap) {\n  switch (ast.type) {\n    case 'PRIMARY KEY':\n      return primaryTableConstraint(ast, wrap);\n    case 'UNIQUE':\n      return uniqueTableConstraint(ast, wrap);\n    case 'CHECK':\n      return checkTableConstraint(ast, wrap);\n    case 'FOREIGN KEY':\n      return foreignTableConstraint(ast, wrap);\n  }\n}\n\nfunction primaryTableConstraint(ast, wrap) {\n  return `${constraintName(ast, wrap)}PRIMARY KEY (${indexedColumnList(\n    ast,\n    wrap\n  )})${conflictClause(ast, wrap)}`;\n}\n\nfunction uniqueTableConstraint(ast, wrap) {\n  return `${constraintName(ast, wrap)}UNIQUE (${indexedColumnList(\n    ast,\n    wrap\n  )})${conflictClause(ast, wrap)}`;\n}\n\nfunction conflictClause(ast, wrap) {\n  return ast.conflict !== null ? ` ON CONFLICT ${ast.conflict}` : '';\n}\n\nfunction checkTableConstraint(ast, wrap) {\n  return `${constraintName(ast, wrap)}CHECK (${expression(\n    ast.expression,\n    wrap\n  )})`;\n}\n\nfunction foreignTableConstraint(ast, wrap) {\n  return `${constraintName(ast, wrap)}FOREIGN KEY (${columnNameList(\n    ast,\n    wrap\n  )}) ${foreignKeyClause(ast.references, wrap)}`;\n}\n\nfunction foreignKeyClause(ast, wrap) {\n  return `REFERENCES ${table(ast, wrap)}${columnNameListOptional(\n    ast,\n    wrap\n  )}${deleteUpdateMatchList(ast, wrap)}${deferrable(ast.deferrable, wrap)}`;\n}\n\nfunction columnNameListOptional(ast, wrap) {\n  return ast.columns.length > 0 ? ` (${columnNameList(ast, wrap)})` : '';\n}\n\nfunction columnNameList(ast, wrap) {\n  return ast.columns.map((column) => identifier(column, wrap)).join(', ');\n}\n\nfunction deleteUpdateMatchList(ast, wrap) {\n  return `${deleteReference(ast, wrap)}${updateReference(\n    ast,\n    wrap\n  )}${matchReference(ast, wrap)}`;\n}\n\nfunction deleteReference(ast, wrap) {\n  return ast.delete !== null ? ` ON DELETE ${ast.delete}` : '';\n}\n\nfunction updateReference(ast, wrap) {\n  return ast.update !== null ? ` ON UPDATE ${ast.update}` : '';\n}\n\nfunction matchReference(ast, wrap) {\n  return ast.match !== null ? ` MATCH ${ast.match}` : '';\n}\n\nfunction deferrable(ast, wrap) {\n  return ast !== null\n    ? ` ${ast.not ? 'NOT ' : ''}DEFERRABLE${\n        ast.initially !== null ? ` INITIALLY ${ast.initially}` : ''\n      }`\n    : '';\n}\n\nfunction constraintName(ast, wrap) {\n  return ast.name !== null ? `CONSTRAINT ${identifier(ast.name, wrap)} ` : '';\n}\n\nfunction createIndex(ast, wrap) {\n  return `CREATE${unique(ast, wrap)} INDEX${exists(ast, wrap)} ${schema(\n    ast,\n    wrap\n  )}${index(ast, wrap)} on ${table(ast, wrap)} (${indexedColumnList(\n    ast,\n    wrap\n  )})${where(ast, wrap)}`;\n}\n\nfunction unique(ast, wrap) {\n  return ast.unique ? ' UNIQUE' : '';\n}\n\nfunction exists(ast, wrap) {\n  return ast.exists ? ' IF NOT EXISTS' : '';\n}\n\nfunction schema(ast, wrap) {\n  return ast.schema !== null ? `${identifier(ast.schema, wrap)}.` : '';\n}\n\nfunction index(ast, wrap) {\n  return identifier(ast.index, wrap);\n}\n\nfunction table(ast, wrap) {\n  return identifier(ast.table, wrap);\n}\n\nfunction where(ast, wrap) {\n  return ast.where !== null ? ` where ${expression(ast.where)}` : '';\n}\n\nfunction indexedColumnList(ast, wrap) {\n  return ast.columns\n    .map((column) =>\n      !column.expression\n        ? indexedColumn(column, wrap)\n        : indexedColumnExpression(column, wrap)\n    )\n    .join(', ');\n}\n\nfunction indexedColumn(ast, wrap) {\n  return `${identifier(ast.name, wrap)}${collation(ast, wrap)}${order(\n    ast,\n    wrap\n  )}`;\n}\n\nfunction indexedColumnExpression(ast, wrap) {\n  return `${indexedExpression(ast.name, wrap)}${collation(ast, wrap)}${order(\n    ast,\n    wrap\n  )}`;\n}\n\nfunction collation(ast, wrap) {\n  return ast.collation !== null ? ` COLLATE ${ast.collation}` : '';\n}\n\nfunction order(ast, wrap) {\n  return ast.order !== null ? ` ${ast.order}` : '';\n}\n\nfunction indexedExpression(ast, wrap) {\n  return expression(ast, wrap);\n}\n\nfunction expression(ast, wrap) {\n  return ast.reduce(\n    (expr, e) =>\n      Array.isArray(e)\n        ? `${expr}(${expression(e)})`\n        : !expr\n        ? e\n        : `${expr} ${e}`,\n    ''\n  );\n}\n\nfunction identifier(ast, wrap) {\n  return wrap(ast);\n}\n\nmodule.exports = {\n  compileCreateTable,\n  compileCreateIndex,\n};\n"]},"metadata":{},"sourceType":"script"}