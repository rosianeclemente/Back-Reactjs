{"ast":null,"code":"/* eslint max-len: 0 */\n// Redshift Table Builder & Compiler\n// -------\nconst has = require('lodash/has');\n\nconst TableCompiler_PG = require('../../postgres/schema/pg-tablecompiler');\n\nclass TableCompiler_Redshift extends TableCompiler_PG {\n  constructor() {\n    super(...arguments);\n  }\n\n  index(columns, indexName, indexType) {\n    this.client.logger.warn('Redshift does not support the creation of indexes.');\n  }\n\n  dropIndex(columns, indexName) {\n    this.client.logger.warn('Redshift does not support the deletion of indexes.');\n  } // TODO: have to disable setting not null on columns that already exist...\n  // Adds the \"create\" query to the query sequence.\n\n\n  createQuery(columns, ifNot) {\n    const createStatement = ifNot ? 'create table if not exists ' : 'create table ';\n    let sql = createStatement + this.tableName() + ' (' + columns.sql.join(', ') + ')';\n    if (this.single.inherits) sql += ` like (${this.formatter.wrap(this.single.inherits)})`;\n    this.pushQuery({\n      sql,\n      bindings: columns.bindings\n    });\n    const hasComment = has(this.single, 'comment');\n    if (hasComment) this.comment(this.single.comment);\n  }\n\n  primary(columns, constraintName) {\n    const self = this;\n    constraintName = constraintName ? self.formatter.wrap(constraintName) : self.formatter.wrap(`${this.tableNameRaw}_pkey`);\n\n    if (columns.constructor !== Array) {\n      columns = [columns];\n    }\n\n    const thiscolumns = self.grouped.columns;\n\n    if (thiscolumns) {\n      for (let i = 0; i < columns.length; i++) {\n        let exists = thiscolumns.find(tcb => tcb.grouping === 'columns' && tcb.builder && tcb.builder._method === 'add' && tcb.builder._args && tcb.builder._args.indexOf(columns[i]) > -1);\n\n        if (exists) {\n          exists = exists.builder;\n        }\n\n        const nullable = !(exists && exists._modifiers && exists._modifiers['nullable'] && exists._modifiers['nullable'][0] === false);\n\n        if (nullable) {\n          if (exists) {\n            return this.client.logger.warn('Redshift does not allow primary keys to contain nullable columns.');\n          } else {\n            return this.client.logger.warn('Redshift does not allow primary keys to contain nonexistent columns.');\n          }\n        }\n      }\n    }\n\n    return self.pushQuery(`alter table ${self.tableName()} add constraint ${constraintName} primary key (${self.formatter.columnize(columns)})`);\n  } // Compiles column add. Redshift can only add one column per ALTER TABLE, so core addColumns doesn't work.  #2545\n\n\n  addColumns(columns, prefix, colCompilers) {\n    if (prefix === this.alterColumnsPrefix) {\n      super.addColumns(columns, prefix, colCompilers);\n    } else {\n      prefix = prefix || this.addColumnsPrefix;\n      colCompilers = colCompilers || this.getColumns();\n\n      for (const col of colCompilers) {\n        const quotedTableName = this.tableName();\n        const colCompiled = col.compileColumn();\n        this.pushQuery({\n          sql: `alter table ${quotedTableName} ${prefix}${colCompiled}`,\n          bindings: []\n        });\n      }\n    }\n  }\n\n}\n\nmodule.exports = TableCompiler_Redshift;","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/dialects/redshift/schema/redshift-tablecompiler.js"],"names":["has","require","TableCompiler_PG","TableCompiler_Redshift","constructor","arguments","index","columns","indexName","indexType","client","logger","warn","dropIndex","createQuery","ifNot","createStatement","sql","tableName","join","single","inherits","formatter","wrap","pushQuery","bindings","hasComment","comment","primary","constraintName","self","tableNameRaw","Array","thiscolumns","grouped","i","length","exists","find","tcb","grouping","builder","_method","_args","indexOf","nullable","_modifiers","columnize","addColumns","prefix","colCompilers","alterColumnsPrefix","addColumnsPrefix","getColumns","col","quotedTableName","colCompiled","compileColumn","module","exports"],"mappings":"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","sourcesContent":["/* eslint max-len: 0 */\n\n// Redshift Table Builder & Compiler\n// -------\n\nconst has = require('lodash/has');\nconst TableCompiler_PG = require('../../postgres/schema/pg-tablecompiler');\n\nclass TableCompiler_Redshift extends TableCompiler_PG {\n  constructor() {\n    super(...arguments);\n  }\n\n  index(columns, indexName, indexType) {\n    this.client.logger.warn(\n      'Redshift does not support the creation of indexes.'\n    );\n  }\n\n  dropIndex(columns, indexName) {\n    this.client.logger.warn(\n      'Redshift does not support the deletion of indexes.'\n    );\n  }\n\n  // TODO: have to disable setting not null on columns that already exist...\n\n  // Adds the \"create\" query to the query sequence.\n  createQuery(columns, ifNot) {\n    const createStatement = ifNot\n      ? 'create table if not exists '\n      : 'create table ';\n    let sql =\n      createStatement + this.tableName() + ' (' + columns.sql.join(', ') + ')';\n    if (this.single.inherits)\n      sql += ` like (${this.formatter.wrap(this.single.inherits)})`;\n    this.pushQuery({\n      sql,\n      bindings: columns.bindings,\n    });\n    const hasComment = has(this.single, 'comment');\n    if (hasComment) this.comment(this.single.comment);\n  }\n\n  primary(columns, constraintName) {\n    const self = this;\n    constraintName = constraintName\n      ? self.formatter.wrap(constraintName)\n      : self.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    if (columns.constructor !== Array) {\n      columns = [columns];\n    }\n    const thiscolumns = self.grouped.columns;\n\n    if (thiscolumns) {\n      for (let i = 0; i < columns.length; i++) {\n        let exists = thiscolumns.find(\n          (tcb) =>\n            tcb.grouping === 'columns' &&\n            tcb.builder &&\n            tcb.builder._method === 'add' &&\n            tcb.builder._args &&\n            tcb.builder._args.indexOf(columns[i]) > -1\n        );\n        if (exists) {\n          exists = exists.builder;\n        }\n        const nullable = !(\n          exists &&\n          exists._modifiers &&\n          exists._modifiers['nullable'] &&\n          exists._modifiers['nullable'][0] === false\n        );\n        if (nullable) {\n          if (exists) {\n            return this.client.logger.warn(\n              'Redshift does not allow primary keys to contain nullable columns.'\n            );\n          } else {\n            return this.client.logger.warn(\n              'Redshift does not allow primary keys to contain nonexistent columns.'\n            );\n          }\n        }\n      }\n    }\n    return self.pushQuery(\n      `alter table ${self.tableName()} add constraint ${constraintName} primary key (${self.formatter.columnize(\n        columns\n      )})`\n    );\n  }\n\n  // Compiles column add. Redshift can only add one column per ALTER TABLE, so core addColumns doesn't work.  #2545\n  addColumns(columns, prefix, colCompilers) {\n    if (prefix === this.alterColumnsPrefix) {\n      super.addColumns(columns, prefix, colCompilers);\n    } else {\n      prefix = prefix || this.addColumnsPrefix;\n      colCompilers = colCompilers || this.getColumns();\n      for (const col of colCompilers) {\n        const quotedTableName = this.tableName();\n        const colCompiled = col.compileColumn();\n\n        this.pushQuery({\n          sql: `alter table ${quotedTableName} ${prefix}${colCompiled}`,\n          bindings: [],\n        });\n      }\n    }\n  }\n}\n\nmodule.exports = TableCompiler_Redshift;\n"]},"metadata":{},"sourceType":"script"}