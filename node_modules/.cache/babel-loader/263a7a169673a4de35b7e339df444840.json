{"ast":null,"code":"// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped\n// optimize the gzip compression for this alphabet.\nconst urlAlphabet = 'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';\nconst numberAlphabet = '0123456789';\n/**\n * Generate URL-friendly unique ID. This method uses the non-secure\n * predictable random generator with bigger collision probability.\n * Based on https://github.com/ai/nanoid\n *\n * ```js\n * model.id = nanoid() //=> \"Uakgb_J5m9g-0JDMbcJqL\"\n * ```\n *\n * @param size Size of the ID. The default size is 21.\n * @returns A random string.\n */\n\nfunction nanoid(size = 21) {\n  let id = ''; // A compact alternative for `for (var i = 0; i < step; i++)`.\n\n  let i = size;\n\n  while (i--) {\n    // `| 0` is more compact and faster than `Math.floor()`.\n    id += urlAlphabet[Math.random() * 64 | 0];\n  }\n\n  return id;\n}\n\nfunction nanonum(size = 21) {\n  let id = '';\n  let i = size;\n\n  while (i--) {\n    id += numberAlphabet[Math.random() * 10 | 0];\n  }\n\n  return id;\n}\n\nmodule.exports = {\n  nanoid,\n  nanonum\n};","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/util/nanoid.js"],"names":["urlAlphabet","numberAlphabet","nanoid","size","id","i","Math","random","nanonum","module","exports"],"mappings":"AAAA;AACA;AACA,MAAMA,WAAW,GACf,kEADF;AAGA,MAAMC,cAAc,GAAG,YAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,IAAI,GAAG,EAAvB,EAA2B;AACzB,MAAIC,EAAE,GAAG,EAAT,CADyB,CAEzB;;AACA,MAAIC,CAAC,GAAGF,IAAR;;AACA,SAAOE,CAAC,EAAR,EAAY;AACV;AACAD,IAAAA,EAAE,IAAIJ,WAAW,CAAEM,IAAI,CAACC,MAAL,KAAgB,EAAjB,GAAuB,CAAxB,CAAjB;AACD;;AACD,SAAOH,EAAP;AACD;;AAED,SAASI,OAAT,CAAiBL,IAAI,GAAG,EAAxB,EAA4B;AAC1B,MAAIC,EAAE,GAAG,EAAT;AACA,MAAIC,CAAC,GAAGF,IAAR;;AACA,SAAOE,CAAC,EAAR,EAAY;AACVD,IAAAA,EAAE,IAAIH,cAAc,CAAEK,IAAI,CAACC,MAAL,KAAgB,EAAjB,GAAuB,CAAxB,CAApB;AACD;;AACD,SAAOH,EAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiB;AAAER,EAAAA,MAAF;AAAUM,EAAAA;AAAV,CAAjB","sourcesContent":["// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped\n// optimize the gzip compression for this alphabet.\nconst urlAlphabet =\n  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';\n\nconst numberAlphabet = '0123456789';\n\n/**\n * Generate URL-friendly unique ID. This method uses the non-secure\n * predictable random generator with bigger collision probability.\n * Based on https://github.com/ai/nanoid\n *\n * ```js\n * model.id = nanoid() //=> \"Uakgb_J5m9g-0JDMbcJqL\"\n * ```\n *\n * @param size Size of the ID. The default size is 21.\n * @returns A random string.\n */\nfunction nanoid(size = 21) {\n  let id = '';\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  let i = size;\n  while (i--) {\n    // `| 0` is more compact and faster than `Math.floor()`.\n    id += urlAlphabet[(Math.random() * 64) | 0];\n  }\n  return id;\n}\n\nfunction nanonum(size = 21) {\n  let id = '';\n  let i = size;\n  while (i--) {\n    id += numberAlphabet[(Math.random() * 10) | 0];\n  }\n  return id;\n}\n\nmodule.exports = { nanoid, nanonum };\n"]},"metadata":{},"sourceType":"script"}