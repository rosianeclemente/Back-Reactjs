{"ast":null,"code":"// MSSQL Client\n// -------\nconst flatten = require('lodash/flatten');\n\nconst map = require('lodash/map');\n\nconst values = require('lodash/values');\n\nconst isNil = require('lodash/isNil');\n\nconst Client = require('../../client');\n\nconst MSSQL_Formatter = require('./mssql-formatter');\n\nconst Transaction = require('./transaction');\n\nconst QueryCompiler = require('./query/mssql-querycompiler');\n\nconst SchemaCompiler = require('./schema/mssql-compiler');\n\nconst TableCompiler = require('./schema/mssql-tablecompiler');\n\nconst ColumnCompiler = require('./schema/mssql-columncompiler');\n\nconst QueryBuilder = require('../../query/querybuilder');\n\nconst debug = require('debug')('knex:mssql');\n\nconst SQL_INT4 = {\n  MIN: -2147483648,\n  MAX: 2147483647\n};\nconst SQL_BIGINT_SAFE = {\n  MIN: -9007199254740991,\n  MAX: 9007199254740991\n}; // Always initialize with the \"QueryBuilder\" and \"QueryCompiler\" objects, which\n// extend the base 'lib/query/builder' and 'lib/query/compiler', respectively.\n\nclass Client_MSSQL extends Client {\n  constructor(config = {}) {\n    super(config);\n  }\n  /**\n   * @param {import('knex').Config} options\n   */\n\n\n  _generateConnection() {\n    const settings = this.connectionSettings;\n    settings.options = settings.options || {};\n    /** @type {import('tedious').ConnectionConfig} */\n\n    const cfg = {\n      authentication: {\n        type: settings.type || 'default',\n        options: {\n          userName: settings.userName || settings.user,\n          password: settings.password,\n          domain: settings.domain,\n          token: settings.token,\n          clientId: settings.clientId,\n          clientSecret: settings.clientSecret,\n          tenantId: settings.tenantId,\n          msiEndpoint: settings.msiEndpoint\n        }\n      },\n      server: settings.server || settings.host,\n      options: {\n        database: settings.database,\n        encrypt: settings.encrypt || false,\n        port: settings.port || 1433,\n        connectTimeout: settings.connectionTimeout || settings.timeout || 15000,\n        requestTimeout: !isNil(settings.requestTimeout) ? settings.requestTimeout : 15000,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        useColumnNames: false,\n        tdsVersion: settings.options.tdsVersion || '7_4',\n        appName: settings.options.appName || 'knex',\n        ...settings.options\n      }\n    }; // tedious always connect via tcp when port is specified\n\n    if (cfg.options.instanceName) delete cfg.options.port;\n    if (isNaN(cfg.options.requestTimeout)) cfg.options.requestTimeout = 15000;\n    if (cfg.options.requestTimeout === Infinity) cfg.options.requestTimeout = 0;\n    if (cfg.options.requestTimeout < 0) cfg.options.requestTimeout = 0;\n\n    if (settings.debug) {\n      cfg.options.debug = {\n        packet: true,\n        token: true,\n        data: true,\n        payload: true\n      };\n    }\n\n    return cfg;\n  }\n\n  _driver() {\n    const tds = require('tedious');\n\n    return tds;\n  }\n\n  formatter() {\n    return new MSSQL_Formatter(this, ...arguments);\n  }\n\n  transaction() {\n    return new Transaction(this, ...arguments);\n  }\n\n  queryCompiler() {\n    return new QueryCompiler(this, ...arguments);\n  }\n\n  schemaCompiler() {\n    return new SchemaCompiler(this, ...arguments);\n  }\n\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n\n  queryBuilder() {\n    const b = new QueryBuilder(this);\n    return b;\n  }\n\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n\n  wrapIdentifierImpl(value) {\n    if (value === '*') {\n      return '*';\n    }\n\n    return `[${value.replace(/[[\\]]+/g, '')}]`;\n  } // Get a raw connection, called by the `pool` whenever a new\n  // connection needs to be added to the pool.\n\n\n  acquireRawConnection() {\n    return new Promise((resolver, rejecter) => {\n      debug('connection::connection new connection requested');\n\n      const Driver = this._driver();\n\n      const settings = Object.assign({}, this._generateConnection());\n      const connection = new Driver.Connection(settings);\n      connection.connect(err => {\n        if (err) {\n          debug('connection::connect error: %s', err.message);\n          return rejecter(err);\n        }\n\n        debug('connection::connect connected to server');\n        connection.connected = true;\n        connection.on('error', e => {\n          debug('connection::error message=%s', e.message);\n          connection.__knex__disposed = e;\n          connection.connected = false;\n        });\n        connection.once('end', () => {\n          connection.connected = false;\n          connection.__knex__disposed = 'Connection to server was terminated.';\n          debug('connection::end connection ended.');\n        });\n        return resolver(connection);\n      });\n    });\n  }\n\n  validateConnection(connection) {\n    return connection && connection.connected;\n  } // Used to explicitly close a connection, called internally by the pool\n  // when a connection times out or the pool is shutdown.\n\n\n  destroyRawConnection(connection) {\n    debug('connection::destroy');\n    return new Promise(resolve => {\n      connection.once('end', () => {\n        resolve();\n      });\n      connection.close();\n    });\n  } // Position the bindings for the query.\n\n\n  positionBindings(sql) {\n    let questionCount = -1;\n    return sql.replace(/\\\\?\\?/g, match => {\n      if (match === '\\\\?') {\n        return '?';\n      }\n\n      questionCount += 1;\n      return `@p${questionCount}`;\n    });\n  }\n\n  _chomp(connection) {\n    if (connection.state.name === 'LoggedIn') {\n      const nextRequest = this.requestQueue.pop();\n\n      if (nextRequest) {\n        debug('connection::query executing query, %d more in queue', this.requestQueue.length);\n        connection.execSql(nextRequest);\n      }\n    }\n  }\n\n  _enqueueRequest(request, connection) {\n    this.requestQueue.push(request);\n\n    this._chomp(connection);\n  }\n\n  _makeRequest(query, callback) {\n    const Driver = this._driver();\n\n    const sql = typeof query === 'string' ? query : query.sql;\n    let rowCount = 0;\n    if (!sql) throw new Error('The query is empty');\n    debug('request::request sql=%s', sql);\n    const request = new Driver.Request(sql, (err, remoteRowCount) => {\n      if (err) {\n        debug('request::error message=%s', err.message);\n        return callback(err);\n      }\n\n      rowCount = remoteRowCount;\n      debug('request::callback rowCount=%d', rowCount);\n    });\n    request.on('prepared', () => {\n      debug('request %s::request prepared', this.id);\n    });\n    request.on('done', (rowCount, more) => {\n      debug('request::done rowCount=%d more=%s', rowCount, more);\n    });\n    request.on('doneProc', (rowCount, more) => {\n      debug('request::doneProc id=%s rowCount=%d more=%s', request.id, rowCount, more);\n    });\n    request.on('doneInProc', (rowCount, more) => {\n      debug('request::doneInProc id=%s rowCount=%d more=%s', request.id, rowCount, more);\n    });\n    request.once('requestCompleted', () => {\n      debug('request::completed id=%s', request.id);\n      return callback(null, rowCount);\n    });\n    request.on('error', err => {\n      debug('request::error id=%s message=%s', request.id, err.message);\n      return callback(err);\n    });\n    return request;\n  } // Grab a connection, run the query via the MSSQL streaming interface,\n  // and pass that through to the stream we've sent back to the client.\n\n\n  _stream(connection, query,\n  /** @type {NodeJS.ReadWriteStream} */\n  stream) {\n    return new Promise((resolve, reject) => {\n      const request = this._makeRequest(query, err => {\n        if (err) {\n          stream.emit('error', err);\n          return reject(err);\n        }\n\n        resolve();\n      });\n\n      request.on('row', row => {\n        stream.write(row.reduce((prev, curr) => ({ ...prev,\n          [curr.metadata.colName]: curr.value\n        }), {}));\n      });\n      request.on('error', err => {\n        stream.emit('error', err);\n        reject(err);\n      });\n      request.once('requestCompleted', () => {\n        stream.end();\n        resolve();\n      });\n\n      this._assignBindings(request, query.bindings);\n\n      this._enqueueRequest(request, connection);\n    });\n  }\n\n  _assignBindings(request, bindings) {\n    if (Array.isArray(bindings)) {\n      for (let i = 0; i < bindings.length; i++) {\n        const binding = bindings[i];\n\n        this._setReqInput(request, i, binding);\n      }\n    }\n  }\n\n  _scaleForBinding(binding) {\n    if (binding % 1 === 0) {\n      throw new Error(`The binding value ${binding} must be a decimal number.`);\n    }\n\n    return {\n      scale: 10\n    };\n  }\n\n  _typeForBinding(binding) {\n    const Driver = this._driver();\n\n    switch (typeof binding) {\n      case 'string':\n        return Driver.TYPES.NVarChar;\n\n      case 'boolean':\n        return Driver.TYPES.Bit;\n\n      case 'number':\n        {\n          if (binding % 1 !== 0) {\n            return Driver.TYPES.Float;\n          }\n\n          if (binding < SQL_INT4.MIN || binding > SQL_INT4.MAX) {\n            if (binding < SQL_BIGINT_SAFE.MIN || binding > SQL_BIGINT_SAFE.MAX) {\n              throw new Error(`Bigint must be safe integer or must be passed as string, saw ${binding}`);\n            }\n\n            return Driver.TYPES.BigInt;\n          }\n\n          return Driver.TYPES.Int;\n        }\n\n      default:\n        {\n          // if (binding === null || typeof binding === 'undefined') {\n          //   return tedious.TYPES.Null;\n          // }\n          if (binding instanceof Date) {\n            return Driver.TYPES.DateTime;\n          }\n\n          if (binding instanceof Buffer) {\n            return Driver.TYPES.VarBinary;\n          }\n\n          return Driver.TYPES.NVarChar;\n        }\n    }\n  } // Runs the query on the specified connection, providing the bindings\n  // and any other necessary prep work.\n\n\n  _query(connection, query) {\n    return new Promise((resolve, reject) => {\n      const rows = [];\n\n      const request = this._makeRequest(query, (err, count) => {\n        if (err) {\n          return reject(err);\n        }\n\n        query.response = rows;\n        process.nextTick(() => this._chomp(connection));\n        resolve(query);\n      });\n\n      request.on('row', row => {\n        debug('request::row');\n        rows.push(row);\n      });\n\n      this._assignBindings(request, query.bindings);\n\n      this._enqueueRequest(request, connection);\n    });\n  } // sets a request input parameter. Detects bigints and decimals and sets type appropriately.\n\n\n  _setReqInput(req, i, binding) {\n    const tediousType = this._typeForBinding(binding);\n\n    const bindingName = 'p'.concat(i);\n    let options;\n\n    if (typeof binding === 'number' && binding % 1 !== 0) {\n      options = this._scaleForBinding(binding);\n    }\n\n    debug('request::binding pos=%d type=%s value=%s', i, tediousType.name, binding);\n\n    if (Buffer.isBuffer(binding)) {\n      options = {\n        length: 'max'\n      };\n    }\n\n    req.addParameter(bindingName, tediousType, binding, options);\n  } // Process the response as returned from the query.\n\n\n  processResponse(query, runner) {\n    if (query == null) return;\n    let {\n      response\n    } = query;\n    const {\n      method\n    } = query;\n\n    if (query.output) {\n      return query.output.call(runner, response);\n    }\n\n    response = response.map(row => row.reduce((columns, r) => {\n      const colName = r.metadata.colName;\n\n      if (columns[colName]) {\n        if (!Array.isArray(columns[colName])) {\n          columns[colName] = [columns[colName]];\n        }\n\n        columns[colName].push(r.value);\n      } else {\n        columns[colName] = r.value;\n      }\n\n      return columns;\n    }, {}));\n    if (query.output) return query.output.call(runner, response);\n\n    switch (method) {\n      case 'select':\n        return response;\n\n      case 'first':\n        return response[0];\n\n      case 'pluck':\n        return map(response, query.pluck);\n\n      case 'insert':\n      case 'del':\n      case 'update':\n      case 'counter':\n        if (query.returning) {\n          if (query.returning === '@@rowcount') {\n            return response[0][''];\n          }\n\n          if (Array.isArray(query.returning) && query.returning.length > 1 || query.returning[0] === '*') {\n            return response;\n          } // return an array with values if only one returning value was specified\n\n\n          return flatten(map(response, values));\n        }\n\n        return response;\n\n      default:\n        return response;\n    }\n  }\n\n}\n\nObject.assign(Client_MSSQL.prototype, {\n  requestQueue: [],\n  dialect: 'mssql',\n  driverName: 'mssql'\n});\nmodule.exports = Client_MSSQL;","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/dialects/mssql/index.js"],"names":["flatten","require","map","values","isNil","Client","MSSQL_Formatter","Transaction","QueryCompiler","SchemaCompiler","TableCompiler","ColumnCompiler","QueryBuilder","debug","SQL_INT4","MIN","MAX","SQL_BIGINT_SAFE","Client_MSSQL","constructor","config","_generateConnection","settings","connectionSettings","options","cfg","authentication","type","userName","user","password","domain","token","clientId","clientSecret","tenantId","msiEndpoint","server","host","database","encrypt","port","connectTimeout","connectionTimeout","timeout","requestTimeout","rowCollectionOnDone","rowCollectionOnRequestCompletion","useColumnNames","tdsVersion","appName","instanceName","isNaN","Infinity","packet","data","payload","_driver","tds","formatter","arguments","transaction","queryCompiler","schemaCompiler","tableCompiler","queryBuilder","b","columnCompiler","wrapIdentifierImpl","value","replace","acquireRawConnection","Promise","resolver","rejecter","Driver","Object","assign","connection","Connection","connect","err","message","connected","on","e","__knex__disposed","once","validateConnection","destroyRawConnection","resolve","close","positionBindings","sql","questionCount","match","_chomp","state","name","nextRequest","requestQueue","pop","length","execSql","_enqueueRequest","request","push","_makeRequest","query","callback","rowCount","Error","Request","remoteRowCount","id","more","_stream","stream","reject","emit","row","write","reduce","prev","curr","metadata","colName","end","_assignBindings","bindings","Array","isArray","i","binding","_setReqInput","_scaleForBinding","scale","_typeForBinding","TYPES","NVarChar","Bit","Float","BigInt","Int","Date","DateTime","Buffer","VarBinary","_query","rows","count","response","process","nextTick","req","tediousType","bindingName","concat","isBuffer","addParameter","processResponse","runner","method","output","call","columns","r","pluck","returning","prototype","dialect","driverName","module","exports"],"mappings":"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","sourcesContent":["// MSSQL Client\n// -------\nconst flatten = require('lodash/flatten');\nconst map = require('lodash/map');\nconst values = require('lodash/values');\nconst isNil = require('lodash/isNil');\n\nconst Client = require('../../client');\nconst MSSQL_Formatter = require('./mssql-formatter');\nconst Transaction = require('./transaction');\nconst QueryCompiler = require('./query/mssql-querycompiler');\nconst SchemaCompiler = require('./schema/mssql-compiler');\nconst TableCompiler = require('./schema/mssql-tablecompiler');\nconst ColumnCompiler = require('./schema/mssql-columncompiler');\nconst QueryBuilder = require('../../query/querybuilder');\n\nconst debug = require('debug')('knex:mssql');\n\nconst SQL_INT4 = { MIN: -2147483648, MAX: 2147483647 };\nconst SQL_BIGINT_SAFE = { MIN: -9007199254740991, MAX: 9007199254740991 };\n\n// Always initialize with the \"QueryBuilder\" and \"QueryCompiler\" objects, which\n// extend the base 'lib/query/builder' and 'lib/query/compiler', respectively.\nclass Client_MSSQL extends Client {\n  constructor(config = {}) {\n    super(config);\n  }\n\n  /**\n   * @param {import('knex').Config} options\n   */\n  _generateConnection() {\n    const settings = this.connectionSettings;\n    settings.options = settings.options || {};\n\n    /** @type {import('tedious').ConnectionConfig} */\n    const cfg = {\n      authentication: {\n        type: settings.type || 'default',\n        options: {\n          userName: settings.userName || settings.user,\n          password: settings.password,\n          domain: settings.domain,\n          token: settings.token,\n          clientId: settings.clientId,\n          clientSecret: settings.clientSecret,\n          tenantId: settings.tenantId,\n          msiEndpoint: settings.msiEndpoint,\n        },\n      },\n      server: settings.server || settings.host,\n      options: {\n        database: settings.database,\n        encrypt: settings.encrypt || false,\n        port: settings.port || 1433,\n        connectTimeout: settings.connectionTimeout || settings.timeout || 15000,\n        requestTimeout: !isNil(settings.requestTimeout)\n          ? settings.requestTimeout\n          : 15000,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        useColumnNames: false,\n        tdsVersion: settings.options.tdsVersion || '7_4',\n        appName: settings.options.appName || 'knex',\n        ...settings.options,\n      },\n    };\n\n    // tedious always connect via tcp when port is specified\n    if (cfg.options.instanceName) delete cfg.options.port;\n\n    if (isNaN(cfg.options.requestTimeout)) cfg.options.requestTimeout = 15000;\n    if (cfg.options.requestTimeout === Infinity) cfg.options.requestTimeout = 0;\n    if (cfg.options.requestTimeout < 0) cfg.options.requestTimeout = 0;\n\n    if (settings.debug) {\n      cfg.options.debug = {\n        packet: true,\n        token: true,\n        data: true,\n        payload: true,\n      };\n    }\n\n    return cfg;\n  }\n\n  _driver() {\n    const tds = require('tedious');\n\n    return tds;\n  }\n\n  formatter() {\n    return new MSSQL_Formatter(this, ...arguments);\n  }\n\n  transaction() {\n    return new Transaction(this, ...arguments);\n  }\n\n  queryCompiler() {\n    return new QueryCompiler(this, ...arguments);\n  }\n\n  schemaCompiler() {\n    return new SchemaCompiler(this, ...arguments);\n  }\n\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n\n  queryBuilder() {\n    const b = new QueryBuilder(this);\n    return b;\n  }\n\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n\n  wrapIdentifierImpl(value) {\n    if (value === '*') {\n      return '*';\n    }\n\n    return `[${value.replace(/[[\\]]+/g, '')}]`;\n  }\n\n  // Get a raw connection, called by the `pool` whenever a new\n  // connection needs to be added to the pool.\n  acquireRawConnection() {\n    return new Promise((resolver, rejecter) => {\n      debug('connection::connection new connection requested');\n      const Driver = this._driver();\n      const settings = Object.assign({}, this._generateConnection());\n\n      const connection = new Driver.Connection(settings);\n\n      connection.connect((err) => {\n        if (err) {\n          debug('connection::connect error: %s', err.message);\n          return rejecter(err);\n        }\n\n        debug('connection::connect connected to server');\n\n        connection.connected = true;\n        connection.on('error', (e) => {\n          debug('connection::error message=%s', e.message);\n          connection.__knex__disposed = e;\n          connection.connected = false;\n        });\n\n        connection.once('end', () => {\n          connection.connected = false;\n          connection.__knex__disposed = 'Connection to server was terminated.';\n          debug('connection::end connection ended.');\n        });\n\n        return resolver(connection);\n      });\n    });\n  }\n\n  validateConnection(connection) {\n    return connection && connection.connected;\n  }\n\n  // Used to explicitly close a connection, called internally by the pool\n  // when a connection times out or the pool is shutdown.\n  destroyRawConnection(connection) {\n    debug('connection::destroy');\n\n    return new Promise((resolve) => {\n      connection.once('end', () => {\n        resolve();\n      });\n\n      connection.close();\n    });\n  }\n\n  // Position the bindings for the query.\n  positionBindings(sql) {\n    let questionCount = -1;\n    return sql.replace(/\\\\?\\?/g, (match) => {\n      if (match === '\\\\?') {\n        return '?';\n      }\n\n      questionCount += 1;\n      return `@p${questionCount}`;\n    });\n  }\n\n  _chomp(connection) {\n    if (connection.state.name === 'LoggedIn') {\n      const nextRequest = this.requestQueue.pop();\n      if (nextRequest) {\n        debug(\n          'connection::query executing query, %d more in queue',\n          this.requestQueue.length\n        );\n\n        connection.execSql(nextRequest);\n      }\n    }\n  }\n\n  _enqueueRequest(request, connection) {\n    this.requestQueue.push(request);\n    this._chomp(connection);\n  }\n\n  _makeRequest(query, callback) {\n    const Driver = this._driver();\n    const sql = typeof query === 'string' ? query : query.sql;\n    let rowCount = 0;\n\n    if (!sql) throw new Error('The query is empty');\n\n    debug('request::request sql=%s', sql);\n\n    const request = new Driver.Request(sql, (err, remoteRowCount) => {\n      if (err) {\n        debug('request::error message=%s', err.message);\n        return callback(err);\n      }\n\n      rowCount = remoteRowCount;\n      debug('request::callback rowCount=%d', rowCount);\n    });\n\n    request.on('prepared', () => {\n      debug('request %s::request prepared', this.id);\n    });\n\n    request.on('done', (rowCount, more) => {\n      debug('request::done rowCount=%d more=%s', rowCount, more);\n    });\n\n    request.on('doneProc', (rowCount, more) => {\n      debug(\n        'request::doneProc id=%s rowCount=%d more=%s',\n        request.id,\n        rowCount,\n        more\n      );\n    });\n\n    request.on('doneInProc', (rowCount, more) => {\n      debug(\n        'request::doneInProc id=%s rowCount=%d more=%s',\n        request.id,\n        rowCount,\n        more\n      );\n    });\n\n    request.once('requestCompleted', () => {\n      debug('request::completed id=%s', request.id);\n      return callback(null, rowCount);\n    });\n\n    request.on('error', (err) => {\n      debug('request::error id=%s message=%s', request.id, err.message);\n      return callback(err);\n    });\n\n    return request;\n  }\n\n  // Grab a connection, run the query via the MSSQL streaming interface,\n  // and pass that through to the stream we've sent back to the client.\n  _stream(connection, query, /** @type {NodeJS.ReadWriteStream} */ stream) {\n    return new Promise((resolve, reject) => {\n      const request = this._makeRequest(query, (err) => {\n        if (err) {\n          stream.emit('error', err);\n          return reject(err);\n        }\n\n        resolve();\n      });\n\n      request.on('row', (row) => {\n        stream.write(\n          row.reduce(\n            (prev, curr) => ({\n              ...prev,\n              [curr.metadata.colName]: curr.value,\n            }),\n            {}\n          )\n        );\n      });\n      request.on('error', (err) => {\n        stream.emit('error', err);\n        reject(err);\n      });\n      request.once('requestCompleted', () => {\n        stream.end();\n        resolve();\n      });\n\n      this._assignBindings(request, query.bindings);\n      this._enqueueRequest(request, connection);\n    });\n  }\n\n  _assignBindings(request, bindings) {\n    if (Array.isArray(bindings)) {\n      for (let i = 0; i < bindings.length; i++) {\n        const binding = bindings[i];\n        this._setReqInput(request, i, binding);\n      }\n    }\n  }\n\n  _scaleForBinding(binding) {\n    if (binding % 1 === 0) {\n      throw new Error(`The binding value ${binding} must be a decimal number.`);\n    }\n\n    return { scale: 10 };\n  }\n\n  _typeForBinding(binding) {\n    const Driver = this._driver();\n\n    switch (typeof binding) {\n      case 'string':\n        return Driver.TYPES.NVarChar;\n      case 'boolean':\n        return Driver.TYPES.Bit;\n      case 'number': {\n        if (binding % 1 !== 0) {\n          return Driver.TYPES.Float;\n        }\n\n        if (binding < SQL_INT4.MIN || binding > SQL_INT4.MAX) {\n          if (binding < SQL_BIGINT_SAFE.MIN || binding > SQL_BIGINT_SAFE.MAX) {\n            throw new Error(\n              `Bigint must be safe integer or must be passed as string, saw ${binding}`\n            );\n          }\n\n          return Driver.TYPES.BigInt;\n        }\n\n        return Driver.TYPES.Int;\n      }\n      default: {\n        // if (binding === null || typeof binding === 'undefined') {\n        //   return tedious.TYPES.Null;\n        // }\n\n        if (binding instanceof Date) {\n          return Driver.TYPES.DateTime;\n        }\n\n        if (binding instanceof Buffer) {\n          return Driver.TYPES.VarBinary;\n        }\n\n        return Driver.TYPES.NVarChar;\n      }\n    }\n  }\n\n  // Runs the query on the specified connection, providing the bindings\n  // and any other necessary prep work.\n  _query(connection, query) {\n    return new Promise((resolve, reject) => {\n      const rows = [];\n      const request = this._makeRequest(query, (err, count) => {\n        if (err) {\n          return reject(err);\n        }\n\n        query.response = rows;\n\n        process.nextTick(() => this._chomp(connection));\n\n        resolve(query);\n      });\n\n      request.on('row', (row) => {\n        debug('request::row');\n        rows.push(row);\n      });\n\n      this._assignBindings(request, query.bindings);\n      this._enqueueRequest(request, connection);\n    });\n  }\n\n  // sets a request input parameter. Detects bigints and decimals and sets type appropriately.\n  _setReqInput(req, i, binding) {\n    const tediousType = this._typeForBinding(binding);\n    const bindingName = 'p'.concat(i);\n    let options;\n\n    if (typeof binding === 'number' && binding % 1 !== 0) {\n      options = this._scaleForBinding(binding);\n    }\n\n    debug(\n      'request::binding pos=%d type=%s value=%s',\n      i,\n      tediousType.name,\n      binding\n    );\n\n    if (Buffer.isBuffer(binding)) {\n      options = {\n        length: 'max',\n      };\n    }\n\n    req.addParameter(bindingName, tediousType, binding, options);\n  }\n\n  // Process the response as returned from the query.\n  processResponse(query, runner) {\n    if (query == null) return;\n    let { response } = query;\n    const { method } = query;\n\n    if (query.output) {\n      return query.output.call(runner, response);\n    }\n\n    response = response.map((row) =>\n      row.reduce((columns, r) => {\n        const colName = r.metadata.colName;\n\n        if (columns[colName]) {\n          if (!Array.isArray(columns[colName])) {\n            columns[colName] = [columns[colName]];\n          }\n\n          columns[colName].push(r.value);\n        } else {\n          columns[colName] = r.value;\n        }\n\n        return columns;\n      }, {})\n    );\n\n    if (query.output) return query.output.call(runner, response);\n    switch (method) {\n      case 'select':\n        return response;\n      case 'first':\n        return response[0];\n      case 'pluck':\n        return map(response, query.pluck);\n      case 'insert':\n      case 'del':\n      case 'update':\n      case 'counter':\n        if (query.returning) {\n          if (query.returning === '@@rowcount') {\n            return response[0][''];\n          }\n\n          if (\n            (Array.isArray(query.returning) && query.returning.length > 1) ||\n            query.returning[0] === '*'\n          ) {\n            return response;\n          }\n          // return an array with values if only one returning value was specified\n          return flatten(map(response, values));\n        }\n        return response;\n      default:\n        return response;\n    }\n  }\n}\n\nObject.assign(Client_MSSQL.prototype, {\n  requestQueue: [],\n\n  dialect: 'mssql',\n\n  driverName: 'mssql',\n});\n\nmodule.exports = Client_MSSQL;\n"]},"metadata":{},"sourceType":"script"}