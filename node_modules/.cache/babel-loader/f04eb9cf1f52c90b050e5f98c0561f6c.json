{"ast":null,"code":"/* eslint max-len:0 */\nconst utils = require('../utils');\n\nconst TableCompiler = require('../../../schema/tablecompiler');\n\nconst helpers = require('../../../util/helpers');\n\nconst Trigger = require('./internal/trigger'); // Table Compiler\n// ------\n\n\nclass TableCompiler_Oracle extends TableCompiler {\n  constructor() {\n    super(...arguments);\n  }\n\n  addColumns(columns, prefix) {\n    if (columns.sql.length > 0) {\n      prefix = prefix || this.addColumnsPrefix;\n      const columnSql = columns.sql;\n      const alter = this.lowerCase ? 'alter table ' : 'ALTER TABLE ';\n      let sql = `${alter}${this.tableName()} ${prefix}`;\n\n      if (columns.sql.length > 1) {\n        sql += `(${columnSql.join(', ')})`;\n      } else {\n        sql += columnSql.join(', ');\n      }\n\n      this.pushQuery({\n        sql,\n        bindings: columns.bindings\n      });\n    }\n  } // Compile a rename column command.\n\n\n  renameColumn(from, to) {\n    // Remove quotes around tableName\n    const tableName = this.tableName().slice(1, -1);\n    return this.pushQuery(Trigger.renameColumnTrigger(this.client.logger, tableName, from, to));\n  }\n\n  compileAdd(builder) {\n    const table = this.formatter.wrap(builder);\n    const columns = this.prefixArray('add column', this.getColumns(builder));\n    return this.pushQuery({\n      sql: `alter table ${table} ${columns.join(', ')}`\n    });\n  } // Adds the \"create\" query to the query sequence.\n\n\n  createQuery(columns, ifNot) {\n    const sql = `create table ${this.tableName()} (${columns.sql.join(', ')})`;\n    this.pushQuery({\n      // catch \"name is already used by an existing object\" for workaround for \"if not exists\"\n      sql: ifNot ? utils.wrapSqlWithCatch(sql, -955) : sql,\n      bindings: columns.bindings\n    });\n    if (this.single.comment) this.comment(this.single.comment);\n  } // Compiles the comment on the table.\n\n\n  comment(comment) {\n    this.pushQuery(`comment on table ${this.tableName()} is '${comment}'`);\n  }\n\n  dropColumn() {\n    const columns = helpers.normalizeArr.apply(null, arguments);\n    this.pushQuery(`alter table ${this.tableName()} drop (${this.formatter.columnize(columns)})`);\n  }\n\n  changeType() {// alter table + table + ' modify ' + wrapped + '// type';\n  }\n\n  _indexCommand(type, tableName, columns) {\n    return this.formatter.wrap(utils.generateCombinedName(this.client.logger, type, tableName, columns));\n  }\n\n  primary(columns, constraintName) {\n    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    this.pushQuery(`alter table ${this.tableName()} add constraint ${constraintName} primary key (${this.formatter.columnize(columns)})`);\n  }\n\n  dropPrimary(constraintName) {\n    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(this.tableNameRaw + '_pkey');\n    this.pushQuery(`alter table ${this.tableName()} drop constraint ${constraintName}`);\n  }\n\n  index(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(`create index ${indexName} on ${this.tableName()}` + ' (' + this.formatter.columnize(columns) + ')');\n  }\n\n  dropIndex(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(`drop index ${indexName}`);\n  }\n\n  unique(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, columns);\n    this.pushQuery(`alter table ${this.tableName()} add constraint ${indexName}` + ' unique (' + this.formatter.columnize(columns) + ')');\n  }\n\n  dropUnique(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, columns);\n    this.pushQuery(`alter table ${this.tableName()} drop constraint ${indexName}`);\n  }\n\n  dropForeign(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('foreign', this.tableNameRaw, columns);\n    this.pushQuery(`alter table ${this.tableName()} drop constraint ${indexName}`);\n  }\n\n}\n\nTableCompiler_Oracle.prototype.addColumnsPrefix = 'add ';\nTableCompiler_Oracle.prototype.alterColumnsPrefix = 'modify ';\nmodule.exports = TableCompiler_Oracle;","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/dialects/oracle/schema/oracle-tablecompiler.js"],"names":["utils","require","TableCompiler","helpers","Trigger","TableCompiler_Oracle","constructor","arguments","addColumns","columns","prefix","sql","length","addColumnsPrefix","columnSql","alter","lowerCase","tableName","join","pushQuery","bindings","renameColumn","from","to","slice","renameColumnTrigger","client","logger","compileAdd","builder","table","formatter","wrap","prefixArray","getColumns","createQuery","ifNot","wrapSqlWithCatch","single","comment","dropColumn","normalizeArr","apply","columnize","changeType","_indexCommand","type","generateCombinedName","primary","constraintName","tableNameRaw","dropPrimary","index","indexName","dropIndex","unique","dropUnique","dropForeign","prototype","alterColumnsPrefix","module","exports"],"mappings":"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","sourcesContent":["/* eslint max-len:0 */\n\nconst utils = require('../utils');\nconst TableCompiler = require('../../../schema/tablecompiler');\nconst helpers = require('../../../util/helpers');\nconst Trigger = require('./internal/trigger');\n\n// Table Compiler\n// ------\n\nclass TableCompiler_Oracle extends TableCompiler {\n  constructor() {\n    super(...arguments);\n  }\n\n  addColumns(columns, prefix) {\n    if (columns.sql.length > 0) {\n      prefix = prefix || this.addColumnsPrefix;\n\n      const columnSql = columns.sql;\n      const alter = this.lowerCase ? 'alter table ' : 'ALTER TABLE ';\n\n      let sql = `${alter}${this.tableName()} ${prefix}`;\n      if (columns.sql.length > 1) {\n        sql += `(${columnSql.join(', ')})`;\n      } else {\n        sql += columnSql.join(', ');\n      }\n\n      this.pushQuery({\n        sql,\n        bindings: columns.bindings,\n      });\n    }\n  }\n\n  // Compile a rename column command.\n  renameColumn(from, to) {\n    // Remove quotes around tableName\n    const tableName = this.tableName().slice(1, -1);\n    return this.pushQuery(\n      Trigger.renameColumnTrigger(this.client.logger, tableName, from, to)\n    );\n  }\n\n  compileAdd(builder) {\n    const table = this.formatter.wrap(builder);\n    const columns = this.prefixArray('add column', this.getColumns(builder));\n    return this.pushQuery({\n      sql: `alter table ${table} ${columns.join(', ')}`,\n    });\n  }\n\n  // Adds the \"create\" query to the query sequence.\n  createQuery(columns, ifNot) {\n    const sql = `create table ${this.tableName()} (${columns.sql.join(', ')})`;\n    this.pushQuery({\n      // catch \"name is already used by an existing object\" for workaround for \"if not exists\"\n      sql: ifNot ? utils.wrapSqlWithCatch(sql, -955) : sql,\n      bindings: columns.bindings,\n    });\n    if (this.single.comment) this.comment(this.single.comment);\n  }\n\n  // Compiles the comment on the table.\n  comment(comment) {\n    this.pushQuery(`comment on table ${this.tableName()} is '${comment}'`);\n  }\n\n  dropColumn() {\n    const columns = helpers.normalizeArr.apply(null, arguments);\n    this.pushQuery(\n      `alter table ${this.tableName()} drop (${this.formatter.columnize(\n        columns\n      )})`\n    );\n  }\n\n  changeType() {\n    // alter table + table + ' modify ' + wrapped + '// type';\n  }\n\n  _indexCommand(type, tableName, columns) {\n    return this.formatter.wrap(\n      utils.generateCombinedName(this.client.logger, type, tableName, columns)\n    );\n  }\n\n  primary(columns, constraintName) {\n    constraintName = constraintName\n      ? this.formatter.wrap(constraintName)\n      : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    this.pushQuery(\n      `alter table ${this.tableName()} add constraint ${constraintName} primary key (${this.formatter.columnize(\n        columns\n      )})`\n    );\n  }\n\n  dropPrimary(constraintName) {\n    constraintName = constraintName\n      ? this.formatter.wrap(constraintName)\n      : this.formatter.wrap(this.tableNameRaw + '_pkey');\n    this.pushQuery(\n      `alter table ${this.tableName()} drop constraint ${constraintName}`\n    );\n  }\n\n  index(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(\n      `create index ${indexName} on ${this.tableName()}` +\n        ' (' +\n        this.formatter.columnize(columns) +\n        ')'\n    );\n  }\n\n  dropIndex(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(`drop index ${indexName}`);\n  }\n\n  unique(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('unique', this.tableNameRaw, columns);\n    this.pushQuery(\n      `alter table ${this.tableName()} add constraint ${indexName}` +\n        ' unique (' +\n        this.formatter.columnize(columns) +\n        ')'\n    );\n  }\n\n  dropUnique(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('unique', this.tableNameRaw, columns);\n    this.pushQuery(\n      `alter table ${this.tableName()} drop constraint ${indexName}`\n    );\n  }\n\n  dropForeign(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('foreign', this.tableNameRaw, columns);\n    this.pushQuery(\n      `alter table ${this.tableName()} drop constraint ${indexName}`\n    );\n  }\n}\n\nTableCompiler_Oracle.prototype.addColumnsPrefix = 'add ';\nTableCompiler_Oracle.prototype.alterColumnsPrefix = 'modify ';\n\nmodule.exports = TableCompiler_Oracle;\n"]},"metadata":{},"sourceType":"script"}