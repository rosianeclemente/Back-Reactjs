{"ast":null,"code":"const {\n  FsMigrations,\n  DEFAULT_LOAD_EXTENSIONS\n} = require('./sources/fs-migrations');\n\nconst Logger = require('../../logger');\n\nconst defaultLogger = new Logger();\nconst CONFIG_DEFAULT = Object.freeze({\n  extension: 'js',\n  loadExtensions: DEFAULT_LOAD_EXTENSIONS,\n  tableName: 'knex_migrations',\n  schemaName: null,\n  directory: './migrations',\n  disableTransactions: false,\n  disableMigrationsListValidation: false,\n  sortDirsSeparately: false\n});\n\nfunction getMergedConfig(config, currentConfig, logger = defaultLogger) {\n  // config is the user specified config, mergedConfig has defaults and current config\n  // applied to it.\n  const mergedConfig = Object.assign({}, CONFIG_DEFAULT, currentConfig || {}, config);\n\n  if (config && ( // If user specifies any FS related config,\n  // clear specified migrationSource to avoid ambiguity\n  config.directory || config.sortDirsSeparately !== undefined || config.loadExtensions)) {\n    if (config.migrationSource) {\n      logger.warn('FS-related option specified for migration configuration. This resets migrationSource to default FsMigrations');\n    }\n\n    mergedConfig.migrationSource = null;\n  } // If the user has not specified any configs, we need to\n  // default to fs migrations to maintain compatibility\n\n\n  if (!mergedConfig.migrationSource) {\n    mergedConfig.migrationSource = new FsMigrations(mergedConfig.directory, mergedConfig.sortDirsSeparately, mergedConfig.loadExtensions);\n  }\n\n  return mergedConfig;\n}\n\nmodule.exports = {\n  getMergedConfig\n};","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/migrations/migrate/configuration-merger.js"],"names":["FsMigrations","DEFAULT_LOAD_EXTENSIONS","require","Logger","defaultLogger","CONFIG_DEFAULT","Object","freeze","extension","loadExtensions","tableName","schemaName","directory","disableTransactions","disableMigrationsListValidation","sortDirsSeparately","getMergedConfig","config","currentConfig","logger","mergedConfig","assign","undefined","migrationSource","warn","module","exports"],"mappings":"AAAA,MAAM;AACJA,EAAAA,YADI;AAEJC,EAAAA;AAFI,IAGFC,OAAO,CAAC,yBAAD,CAHX;;AAIA,MAAMC,MAAM,GAAGD,OAAO,CAAC,cAAD,CAAtB;;AACA,MAAME,aAAa,GAAG,IAAID,MAAJ,EAAtB;AAEA,MAAME,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAc;AACnCC,EAAAA,SAAS,EAAE,IADwB;AAEnCC,EAAAA,cAAc,EAAER,uBAFmB;AAGnCS,EAAAA,SAAS,EAAE,iBAHwB;AAInCC,EAAAA,UAAU,EAAE,IAJuB;AAKnCC,EAAAA,SAAS,EAAE,cALwB;AAMnCC,EAAAA,mBAAmB,EAAE,KANc;AAOnCC,EAAAA,+BAA+B,EAAE,KAPE;AAQnCC,EAAAA,kBAAkB,EAAE;AARe,CAAd,CAAvB;;AAWA,SAASC,eAAT,CAAyBC,MAAzB,EAAiCC,aAAjC,EAAgDC,MAAM,GAAGf,aAAzD,EAAwE;AACtE;AACA;AACA,QAAMgB,YAAY,GAAGd,MAAM,CAACe,MAAP,CACnB,EADmB,EAEnBhB,cAFmB,EAGnBa,aAAa,IAAI,EAHE,EAInBD,MAJmB,CAArB;;AAOA,MACEA,MAAM,MACN;AACA;AACCA,EAAAA,MAAM,CAACL,SAAP,IACCK,MAAM,CAACF,kBAAP,KAA8BO,SAD/B,IAECL,MAAM,CAACR,cALH,CADR,EAOE;AACA,QAAIQ,MAAM,CAACM,eAAX,EAA4B;AAC1BJ,MAAAA,MAAM,CAACK,IAAP,CACE,8GADF;AAGD;;AACDJ,IAAAA,YAAY,CAACG,eAAb,GAA+B,IAA/B;AACD,GAxBqE,CA0BtE;AACA;;;AACA,MAAI,CAACH,YAAY,CAACG,eAAlB,EAAmC;AACjCH,IAAAA,YAAY,CAACG,eAAb,GAA+B,IAAIvB,YAAJ,CAC7BoB,YAAY,CAACR,SADgB,EAE7BQ,YAAY,CAACL,kBAFgB,EAG7BK,YAAY,CAACX,cAHgB,CAA/B;AAKD;;AAED,SAAOW,YAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiB;AACfV,EAAAA;AADe,CAAjB","sourcesContent":["const {\n  FsMigrations,\n  DEFAULT_LOAD_EXTENSIONS,\n} = require('./sources/fs-migrations');\nconst Logger = require('../../logger');\nconst defaultLogger = new Logger();\n\nconst CONFIG_DEFAULT = Object.freeze({\n  extension: 'js',\n  loadExtensions: DEFAULT_LOAD_EXTENSIONS,\n  tableName: 'knex_migrations',\n  schemaName: null,\n  directory: './migrations',\n  disableTransactions: false,\n  disableMigrationsListValidation: false,\n  sortDirsSeparately: false,\n});\n\nfunction getMergedConfig(config, currentConfig, logger = defaultLogger) {\n  // config is the user specified config, mergedConfig has defaults and current config\n  // applied to it.\n  const mergedConfig = Object.assign(\n    {},\n    CONFIG_DEFAULT,\n    currentConfig || {},\n    config\n  );\n\n  if (\n    config &&\n    // If user specifies any FS related config,\n    // clear specified migrationSource to avoid ambiguity\n    (config.directory ||\n      config.sortDirsSeparately !== undefined ||\n      config.loadExtensions)\n  ) {\n    if (config.migrationSource) {\n      logger.warn(\n        'FS-related option specified for migration configuration. This resets migrationSource to default FsMigrations'\n      );\n    }\n    mergedConfig.migrationSource = null;\n  }\n\n  // If the user has not specified any configs, we need to\n  // default to fs migrations to maintain compatibility\n  if (!mergedConfig.migrationSource) {\n    mergedConfig.migrationSource = new FsMigrations(\n      mergedConfig.directory,\n      mergedConfig.sortDirsSeparately,\n      mergedConfig.loadExtensions\n    );\n  }\n\n  return mergedConfig;\n}\n\nmodule.exports = {\n  getMergedConfig,\n};\n"]},"metadata":{},"sourceType":"script"}