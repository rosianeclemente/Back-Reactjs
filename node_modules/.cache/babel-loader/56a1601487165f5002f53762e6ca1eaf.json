{"ast":null,"code":"// MSSQL Column Compiler\n// -------\nconst ColumnCompiler = require('../../../schema/columncompiler');\n\nconst {\n  toNumber\n} = require('../../../util/helpers');\n\nconst {\n  formatDefault\n} = require('../../../formatter/formatterUtils');\n\nclass ColumnCompiler_MSSQL extends ColumnCompiler {\n  constructor(client, tableCompiler, columnBuilder) {\n    super(client, tableCompiler, columnBuilder);\n    this.modifiers = ['nullable', 'defaultTo', 'first', 'after', 'comment'];\n  } // Types\n  // ------\n\n\n  double(precision, scale) {\n    return 'float';\n  }\n\n  floating(precision, scale) {\n    // ignore precicion / scale which is mysql specific stuff\n    return `float`;\n  }\n\n  integer() {\n    // mssql does not support length\n    return 'int';\n  }\n\n  tinyint() {\n    // mssql does not support length\n    return 'tinyint';\n  }\n\n  varchar(length) {\n    return `nvarchar(${toNumber(length, 255)})`;\n  }\n\n  timestamp({\n    useTz = false\n  } = {}) {\n    return useTz ? 'datetimeoffset' : 'datetime2';\n  }\n\n  bit(length) {\n    if (length > 1) {\n      this.client.logger.warn('Bit field is exactly 1 bit length for MSSQL');\n    }\n\n    return 'bit';\n  }\n\n  binary(length) {\n    return length ? `varbinary(${toNumber(length)})` : 'varbinary(max)';\n  } // Modifiers\n  // ------\n\n\n  first() {\n    this.client.logger.warn('Column first modifier not available for MSSQL');\n    return '';\n  }\n\n  after(column) {\n    this.client.logger.warn('Column after modifier not available for MSSQL');\n    return '';\n  }\n\n  defaultTo(value, {\n    constraintName\n  } = {}) {\n    const formattedValue = formatDefault(value, this.type, this.client);\n    constraintName = typeof constraintName !== 'undefined' ? constraintName : `${this.tableCompiler.tableNameRaw}_${this.getColumnName()}_default`.toLowerCase();\n\n    if (this.columnBuilder._method === 'alter') {\n      this.pushAdditional(function () {\n        this.pushQuery(`ALTER TABLE ${this.tableCompiler.tableName()} ADD CONSTRAINT ${this.formatter.wrap(constraintName)} DEFAULT ${formattedValue} FOR ${this.formatter.wrap(this.getColumnName())}`);\n      });\n      return '';\n    }\n\n    if (!constraintName) {\n      return `DEFAULT ${formattedValue}`;\n    }\n\n    return `CONSTRAINT ${this.formatter.wrap(constraintName)} DEFAULT ${formattedValue}`;\n  }\n\n  comment(comment) {\n    // XXX: This is a byte limit, not character, so we cannot definitively say they'll exceed the limit without database collation info.\n    // (Yes, even if the column has its own collation, the sqlvariant still uses the database collation.)\n    // I'm not sure we even need to raise a warning, as MSSQL will return an error when the limit is exceeded itself.\n    if (comment && comment.length > 7500 / 2) {\n      this.client.logger.warn('Your comment might be longer than the max comment length for MSSQL of 7,500 bytes.');\n    }\n\n    return '';\n  }\n\n}\n\nColumnCompiler_MSSQL.prototype.increments = ({\n  primaryKey = true\n} = {}) => 'int identity(1,1) not null' + (primaryKey ? ' primary key' : '');\n\nColumnCompiler_MSSQL.prototype.bigincrements = ({\n  primaryKey = true\n} = {}) => 'bigint identity(1,1) not null' + (primaryKey ? ' primary key' : '');\n\nColumnCompiler_MSSQL.prototype.bigint = 'bigint';\nColumnCompiler_MSSQL.prototype.mediumint = 'int';\nColumnCompiler_MSSQL.prototype.smallint = 'smallint';\nColumnCompiler_MSSQL.prototype.text = 'nvarchar(max)';\nColumnCompiler_MSSQL.prototype.mediumtext = 'nvarchar(max)';\nColumnCompiler_MSSQL.prototype.longtext = 'nvarchar(max)';\nColumnCompiler_MSSQL.prototype.json = 'nvarchar(max)'; // TODO: mssql supports check constraints as of SQL Server 2008\n// so make enu here more like postgres\n\nColumnCompiler_MSSQL.prototype.enu = 'nvarchar(100)';\nColumnCompiler_MSSQL.prototype.uuid = 'uniqueidentifier';\nColumnCompiler_MSSQL.prototype.datetime = 'datetime2';\nColumnCompiler_MSSQL.prototype.bool = 'bit';\nmodule.exports = ColumnCompiler_MSSQL;","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/dialects/mssql/schema/mssql-columncompiler.js"],"names":["ColumnCompiler","require","toNumber","formatDefault","ColumnCompiler_MSSQL","constructor","client","tableCompiler","columnBuilder","modifiers","double","precision","scale","floating","integer","tinyint","varchar","length","timestamp","useTz","bit","logger","warn","binary","first","after","column","defaultTo","value","constraintName","formattedValue","type","tableNameRaw","getColumnName","toLowerCase","_method","pushAdditional","pushQuery","tableName","formatter","wrap","comment","prototype","increments","primaryKey","bigincrements","bigint","mediumint","smallint","text","mediumtext","longtext","json","enu","uuid","datetime","bool","module","exports"],"mappings":"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","sourcesContent":["// MSSQL Column Compiler\n// -------\nconst ColumnCompiler = require('../../../schema/columncompiler');\nconst { toNumber } = require('../../../util/helpers');\nconst { formatDefault } = require('../../../formatter/formatterUtils');\n\nclass ColumnCompiler_MSSQL extends ColumnCompiler {\n  constructor(client, tableCompiler, columnBuilder) {\n    super(client, tableCompiler, columnBuilder);\n    this.modifiers = ['nullable', 'defaultTo', 'first', 'after', 'comment'];\n  }\n\n  // Types\n  // ------\n\n  double(precision, scale) {\n    return 'float';\n  }\n\n  floating(precision, scale) {\n    // ignore precicion / scale which is mysql specific stuff\n    return `float`;\n  }\n\n  integer() {\n    // mssql does not support length\n    return 'int';\n  }\n\n  tinyint() {\n    // mssql does not support length\n    return 'tinyint';\n  }\n\n  varchar(length) {\n    return `nvarchar(${toNumber(length, 255)})`;\n  }\n\n  timestamp({ useTz = false } = {}) {\n    return useTz ? 'datetimeoffset' : 'datetime2';\n  }\n\n  bit(length) {\n    if (length > 1) {\n      this.client.logger.warn('Bit field is exactly 1 bit length for MSSQL');\n    }\n    return 'bit';\n  }\n\n  binary(length) {\n    return length ? `varbinary(${toNumber(length)})` : 'varbinary(max)';\n  }\n\n  // Modifiers\n  // ------\n\n  first() {\n    this.client.logger.warn('Column first modifier not available for MSSQL');\n    return '';\n  }\n\n  after(column) {\n    this.client.logger.warn('Column after modifier not available for MSSQL');\n    return '';\n  }\n\n  defaultTo(value, { constraintName } = {}) {\n    const formattedValue = formatDefault(value, this.type, this.client);\n    constraintName =\n      typeof constraintName !== 'undefined'\n        ? constraintName\n        : `${\n            this.tableCompiler.tableNameRaw\n          }_${this.getColumnName()}_default`.toLowerCase();\n    if (this.columnBuilder._method === 'alter') {\n      this.pushAdditional(function () {\n        this.pushQuery(\n          `ALTER TABLE ${this.tableCompiler.tableName()} ADD CONSTRAINT ${this.formatter.wrap(\n            constraintName\n          )} DEFAULT ${formattedValue} FOR ${this.formatter.wrap(\n            this.getColumnName()\n          )}`\n        );\n      });\n      return '';\n    }\n    if (!constraintName) {\n      return `DEFAULT ${formattedValue}`;\n    }\n    return `CONSTRAINT ${this.formatter.wrap(\n      constraintName\n    )} DEFAULT ${formattedValue}`;\n  }\n\n  comment(comment) {\n    // XXX: This is a byte limit, not character, so we cannot definitively say they'll exceed the limit without database collation info.\n    // (Yes, even if the column has its own collation, the sqlvariant still uses the database collation.)\n    // I'm not sure we even need to raise a warning, as MSSQL will return an error when the limit is exceeded itself.\n    if (comment && comment.length > 7500 / 2) {\n      this.client.logger.warn(\n        'Your comment might be longer than the max comment length for MSSQL of 7,500 bytes.'\n      );\n    }\n    return '';\n  }\n}\n\nColumnCompiler_MSSQL.prototype.increments = ({ primaryKey = true } = {}) =>\n  'int identity(1,1) not null' + (primaryKey ? ' primary key' : '');\nColumnCompiler_MSSQL.prototype.bigincrements = ({ primaryKey = true } = {}) =>\n  'bigint identity(1,1) not null' + (primaryKey ? ' primary key' : '');\nColumnCompiler_MSSQL.prototype.bigint = 'bigint';\nColumnCompiler_MSSQL.prototype.mediumint = 'int';\nColumnCompiler_MSSQL.prototype.smallint = 'smallint';\nColumnCompiler_MSSQL.prototype.text = 'nvarchar(max)';\nColumnCompiler_MSSQL.prototype.mediumtext = 'nvarchar(max)';\nColumnCompiler_MSSQL.prototype.longtext = 'nvarchar(max)';\nColumnCompiler_MSSQL.prototype.json = 'nvarchar(max)';\n\n// TODO: mssql supports check constraints as of SQL Server 2008\n// so make enu here more like postgres\nColumnCompiler_MSSQL.prototype.enu = 'nvarchar(100)';\nColumnCompiler_MSSQL.prototype.uuid = 'uniqueidentifier';\nColumnCompiler_MSSQL.prototype.datetime = 'datetime2';\nColumnCompiler_MSSQL.prototype.bool = 'bit';\n\nmodule.exports = ColumnCompiler_MSSQL;\n"]},"metadata":{},"sourceType":"script"}