{"ast":null,"code":"// Raw\n// -------\nconst {\n  EventEmitter\n} = require('events');\n\nconst debug = require('debug');\n\nconst assign = require('lodash/assign');\n\nconst isPlainObject = require('lodash/isPlainObject');\n\nconst reduce = require('lodash/reduce');\n\nconst {\n  replaceRawArrBindings,\n  replaceKeyBindings\n} = require('./formatter/rawFormatter');\n\nconst helpers = require('./util/helpers');\n\nconst saveAsyncStack = require('./util/save-async-stack');\n\nconst {\n  nanoid\n} = require('./util/nanoid');\n\nconst {\n  isNumber,\n  isObject\n} = require('./util/is');\n\nconst {\n  augmentWithBuilderInterface\n} = require('./builder-interface-augmenter');\n\nconst debugBindings = debug('knex:bindings');\n\nclass Raw extends EventEmitter {\n  constructor(client) {\n    super();\n    this.client = client;\n    this.sql = '';\n    this.bindings = []; // Todo: Deprecate\n\n    this._wrappedBefore = undefined;\n    this._wrappedAfter = undefined;\n\n    if (client && client.config) {\n      this._debug = client.config.debug;\n      saveAsyncStack(this, 4);\n    }\n  }\n\n  set(sql, bindings) {\n    this.sql = sql;\n    this.bindings = isObject(bindings) && !bindings.toSQL || bindings === undefined ? bindings : [bindings];\n    return this;\n  }\n\n  timeout(ms, {\n    cancel\n  } = {}) {\n    if (isNumber(ms) && ms > 0) {\n      this._timeout = ms;\n\n      if (cancel) {\n        this.client.assertCanCancelQuery();\n        this._cancelOnTimeout = true;\n      }\n    }\n\n    return this;\n  } // Wraps the current sql with `before` and `after`.\n\n\n  wrap(before, after) {\n    this._wrappedBefore = before;\n    this._wrappedAfter = after;\n    return this;\n  } // Calls `toString` on the Knex object.\n\n\n  toString() {\n    return this.toQuery();\n  } // Returns the raw sql for the query.\n\n\n  toSQL(method, tz) {\n    let obj;\n\n    if (Array.isArray(this.bindings)) {\n      obj = replaceRawArrBindings(this, this.client);\n    } else if (this.bindings && isPlainObject(this.bindings)) {\n      obj = replaceKeyBindings(this, this.client);\n    } else {\n      obj = {\n        method: 'raw',\n        sql: this.sql,\n        bindings: this.bindings === undefined ? [] : [this.bindings]\n      };\n    }\n\n    if (this._wrappedBefore) {\n      obj.sql = this._wrappedBefore + obj.sql;\n    }\n\n    if (this._wrappedAfter) {\n      obj.sql = obj.sql + this._wrappedAfter;\n    }\n\n    obj.options = reduce(this._options, assign, {});\n\n    if (this._timeout) {\n      obj.timeout = this._timeout;\n\n      if (this._cancelOnTimeout) {\n        obj.cancelOnTimeout = this._cancelOnTimeout;\n      }\n    }\n\n    obj.bindings = obj.bindings || [];\n\n    if (helpers.containsUndefined(obj.bindings)) {\n      const undefinedBindingIndices = helpers.getUndefinedIndices(this.bindings);\n      debugBindings(obj.bindings);\n      throw new Error(`Undefined binding(s) detected for keys [${undefinedBindingIndices}] when compiling RAW query: ${obj.sql}`);\n    }\n\n    obj.__knexQueryUid = nanoid();\n    Object.defineProperties(obj, {\n      toNative: {\n        value: () => ({\n          sql: this.client.positionBindings(obj.sql),\n          bindings: this.client.prepBindings(obj.bindings)\n        }),\n        enumerable: false\n      }\n    });\n    return obj;\n  }\n\n} // Workaround to avoid circular dependency between wrappingFormatter.unwrapRaw and rawFormatter\n\n\nRaw.prototype.isRawInstance = true; // Allow the `Raw` object to be utilized with full access to the relevant\n// promise API.\n\naugmentWithBuilderInterface(Raw);\nhelpers.addQueryContext(Raw);\nmodule.exports = Raw;","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/raw.js"],"names":["EventEmitter","require","debug","assign","isPlainObject","reduce","replaceRawArrBindings","replaceKeyBindings","helpers","saveAsyncStack","nanoid","isNumber","isObject","augmentWithBuilderInterface","debugBindings","Raw","constructor","client","sql","bindings","_wrappedBefore","undefined","_wrappedAfter","config","_debug","set","toSQL","timeout","ms","cancel","_timeout","assertCanCancelQuery","_cancelOnTimeout","wrap","before","after","toString","toQuery","method","tz","obj","Array","isArray","options","_options","cancelOnTimeout","containsUndefined","undefinedBindingIndices","getUndefinedIndices","Error","__knexQueryUid","Object","defineProperties","toNative","value","positionBindings","prepBindings","enumerable","prototype","isRawInstance","addQueryContext","module","exports"],"mappings":"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","sourcesContent":["// Raw\n// -------\nconst { EventEmitter } = require('events');\nconst debug = require('debug');\nconst assign = require('lodash/assign');\nconst isPlainObject = require('lodash/isPlainObject');\nconst reduce = require('lodash/reduce');\n\nconst {\n  replaceRawArrBindings,\n  replaceKeyBindings,\n} = require('./formatter/rawFormatter');\nconst helpers = require('./util/helpers');\nconst saveAsyncStack = require('./util/save-async-stack');\nconst { nanoid } = require('./util/nanoid');\nconst { isNumber, isObject } = require('./util/is');\nconst {\n  augmentWithBuilderInterface,\n} = require('./builder-interface-augmenter');\n\nconst debugBindings = debug('knex:bindings');\n\nclass Raw extends EventEmitter {\n  constructor(client) {\n    super();\n\n    this.client = client;\n\n    this.sql = '';\n    this.bindings = [];\n\n    // Todo: Deprecate\n    this._wrappedBefore = undefined;\n    this._wrappedAfter = undefined;\n    if (client && client.config) {\n      this._debug = client.config.debug;\n      saveAsyncStack(this, 4);\n    }\n  }\n  set(sql, bindings) {\n    this.sql = sql;\n    this.bindings =\n      (isObject(bindings) && !bindings.toSQL) || bindings === undefined\n        ? bindings\n        : [bindings];\n\n    return this;\n  }\n\n  timeout(ms, { cancel } = {}) {\n    if (isNumber(ms) && ms > 0) {\n      this._timeout = ms;\n      if (cancel) {\n        this.client.assertCanCancelQuery();\n        this._cancelOnTimeout = true;\n      }\n    }\n    return this;\n  }\n\n  // Wraps the current sql with `before` and `after`.\n  wrap(before, after) {\n    this._wrappedBefore = before;\n    this._wrappedAfter = after;\n    return this;\n  }\n\n  // Calls `toString` on the Knex object.\n  toString() {\n    return this.toQuery();\n  }\n\n  // Returns the raw sql for the query.\n  toSQL(method, tz) {\n    let obj;\n    if (Array.isArray(this.bindings)) {\n      obj = replaceRawArrBindings(this, this.client);\n    } else if (this.bindings && isPlainObject(this.bindings)) {\n      obj = replaceKeyBindings(this, this.client);\n    } else {\n      obj = {\n        method: 'raw',\n        sql: this.sql,\n        bindings: this.bindings === undefined ? [] : [this.bindings],\n      };\n    }\n\n    if (this._wrappedBefore) {\n      obj.sql = this._wrappedBefore + obj.sql;\n    }\n    if (this._wrappedAfter) {\n      obj.sql = obj.sql + this._wrappedAfter;\n    }\n\n    obj.options = reduce(this._options, assign, {});\n\n    if (this._timeout) {\n      obj.timeout = this._timeout;\n      if (this._cancelOnTimeout) {\n        obj.cancelOnTimeout = this._cancelOnTimeout;\n      }\n    }\n\n    obj.bindings = obj.bindings || [];\n    if (helpers.containsUndefined(obj.bindings)) {\n      const undefinedBindingIndices = helpers.getUndefinedIndices(\n        this.bindings\n      );\n      debugBindings(obj.bindings);\n      throw new Error(\n        `Undefined binding(s) detected for keys [${undefinedBindingIndices}] when compiling RAW query: ${obj.sql}`\n      );\n    }\n\n    obj.__knexQueryUid = nanoid();\n\n    Object.defineProperties(obj, {\n      toNative: {\n        value: () => ({\n          sql: this.client.positionBindings(obj.sql),\n          bindings: this.client.prepBindings(obj.bindings),\n        }),\n        enumerable: false,\n      },\n    });\n\n    return obj;\n  }\n}\n\n// Workaround to avoid circular dependency between wrappingFormatter.unwrapRaw and rawFormatter\nRaw.prototype.isRawInstance = true;\n\n// Allow the `Raw` object to be utilized with full access to the relevant\n// promise API.\naugmentWithBuilderInterface(Raw);\nhelpers.addQueryContext(Raw);\n\nmodule.exports = Raw;\n"]},"metadata":{},"sourceType":"script"}