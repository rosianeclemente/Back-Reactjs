{"ast":null,"code":"// Column Compiler\n// Used for designating column definitions\n// during the table \"create\" / \"alter\" statements.\n// -------\nconst helpers = require('./internal/helpers');\n\nconst groupBy = require('lodash/groupBy');\n\nconst first = require('lodash/first');\n\nconst has = require('lodash/has');\n\nconst tail = require('lodash/tail');\n\nconst {\n  toNumber\n} = require('../util/helpers');\n\nconst {\n  formatDefault\n} = require('../formatter/formatterUtils');\n\nclass ColumnCompiler {\n  constructor(client, tableCompiler, columnBuilder) {\n    this.client = client;\n    this.tableCompiler = tableCompiler;\n    this.columnBuilder = columnBuilder;\n    this._commonBuilder = this.columnBuilder;\n    this.args = columnBuilder._args;\n    this.type = columnBuilder._type.toLowerCase();\n    this.grouped = groupBy(columnBuilder._statements, 'grouping');\n    this.modified = columnBuilder._modifiers;\n    this.isIncrements = this.type.indexOf('increments') !== -1;\n    this.formatter = client.formatter(columnBuilder);\n    this.bindings = [];\n    this.formatter.bindings = this.bindings;\n    this.bindingsHolder = this;\n    this.sequence = [];\n    this.modifiers = [];\n  }\n\n  defaults(label) {\n    if (Object.prototype.hasOwnProperty.call(this._defaultMap, label)) {\n      return this._defaultMap[label].bind(this)();\n    } else {\n      throw new Error(`There is no default for the specified identifier ${label}`);\n    }\n  } // To convert to sql, we first go through and build the\n  // column as it would be in the insert statement\n\n\n  toSQL() {\n    this.pushQuery(this.compileColumn());\n\n    if (this.sequence.additional) {\n      this.sequence = this.sequence.concat(this.sequence.additional);\n    }\n\n    return this.sequence;\n  } // Compiles a column.\n\n\n  compileColumn() {\n    return this.formatter.wrap(this.getColumnName()) + ' ' + this.getColumnType() + this.getModifiers();\n  } // Assumes the autoincrementing key is named `id` if not otherwise specified.\n\n\n  getColumnName() {\n    const value = first(this.args);\n    return value || this.defaults('columnName');\n  }\n\n  getColumnType() {\n    // Column type is cached so side effects (such as in pg native enums) are only run once\n    if (!this._columnType) {\n      const type = this[this.type];\n      this._columnType = typeof type === 'function' ? type.apply(this, tail(this.args)) : type;\n    }\n\n    return this._columnType;\n  }\n\n  getModifiers() {\n    const modifiers = [];\n\n    for (let i = 0, l = this.modifiers.length; i < l; i++) {\n      const modifier = this.modifiers[i]; //Cannot allow 'nullable' modifiers on increments types\n\n      if (!this.isIncrements || this.isIncrements && modifier === 'comment') {\n        if (has(this.modified, modifier)) {\n          const val = this[modifier].apply(this, this.modified[modifier]);\n          if (val) modifiers.push(val);\n        }\n      }\n    }\n\n    return modifiers.length > 0 ? ` ${modifiers.join(' ')}` : '';\n  } // Types\n  // ------\n\n\n  varchar(length) {\n    return `varchar(${toNumber(length, 255)})`;\n  }\n\n  floating(precision, scale) {\n    return `float(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n\n  decimal(precision, scale) {\n    if (precision === null) {\n      throw new Error('Specifying no precision on decimal columns is not supported for that SQL dialect.');\n    }\n\n    return `decimal(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  } // Used to support custom types\n\n\n  specifictype(type) {\n    return type;\n  } // Modifiers\n  // -------\n\n\n  nullable(nullable) {\n    return nullable === false ? 'not null' : 'null';\n  }\n\n  notNullable() {\n    return this.nullable(false);\n  }\n\n  defaultTo(value) {\n    return `default ${formatDefault(value, this.type, this.client)}`;\n  }\n\n}\n\nColumnCompiler.prototype.binary = 'blob';\nColumnCompiler.prototype.bool = 'boolean';\nColumnCompiler.prototype.date = 'date';\nColumnCompiler.prototype.datetime = 'datetime';\nColumnCompiler.prototype.time = 'time';\nColumnCompiler.prototype.timestamp = 'timestamp';\nColumnCompiler.prototype.enu = 'varchar';\nColumnCompiler.prototype.bit = ColumnCompiler.prototype.json = 'text';\nColumnCompiler.prototype.uuid = 'char(36)';\n\nColumnCompiler.prototype.increments = ({\n  primaryKey = true\n} = {}) => 'integer not null' + (primaryKey ? ' primary key' : '') + ' autoincrement';\n\nColumnCompiler.prototype.bigincrements = ({\n  primaryKey = true\n} = {}) => 'integer not null' + (primaryKey ? ' primary key' : '') + ' autoincrement';\n\nColumnCompiler.prototype.integer = ColumnCompiler.prototype.smallint = ColumnCompiler.prototype.mediumint = 'integer';\nColumnCompiler.prototype.biginteger = 'bigint';\nColumnCompiler.prototype.text = 'text';\nColumnCompiler.prototype.tinyint = 'tinyint';\nColumnCompiler.prototype.pushQuery = helpers.pushQuery;\nColumnCompiler.prototype.pushAdditional = helpers.pushAdditional;\nColumnCompiler.prototype.unshiftQuery = helpers.unshiftQuery;\nColumnCompiler.prototype._defaultMap = {\n  columnName: function () {\n    if (!this.isIncrements) {\n      throw new Error(`You did not specify a column name for the ${this.type} column.`);\n    }\n\n    return 'id';\n  }\n};\nmodule.exports = ColumnCompiler;","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/schema/columncompiler.js"],"names":["helpers","require","groupBy","first","has","tail","toNumber","formatDefault","ColumnCompiler","constructor","client","tableCompiler","columnBuilder","_commonBuilder","args","_args","type","_type","toLowerCase","grouped","_statements","modified","_modifiers","isIncrements","indexOf","formatter","bindings","bindingsHolder","sequence","modifiers","defaults","label","Object","prototype","hasOwnProperty","call","_defaultMap","bind","Error","toSQL","pushQuery","compileColumn","additional","concat","wrap","getColumnName","getColumnType","getModifiers","value","_columnType","apply","i","l","length","modifier","val","push","join","varchar","floating","precision","scale","decimal","specifictype","nullable","notNullable","defaultTo","binary","bool","date","datetime","time","timestamp","enu","bit","json","uuid","increments","primaryKey","bigincrements","integer","smallint","mediumint","biginteger","text","tinyint","pushAdditional","unshiftQuery","columnName","module","exports"],"mappings":"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","sourcesContent":["// Column Compiler\n// Used for designating column definitions\n// during the table \"create\" / \"alter\" statements.\n// -------\nconst helpers = require('./internal/helpers');\nconst groupBy = require('lodash/groupBy');\nconst first = require('lodash/first');\nconst has = require('lodash/has');\nconst tail = require('lodash/tail');\nconst { toNumber } = require('../util/helpers');\nconst { formatDefault } = require('../formatter/formatterUtils');\n\nclass ColumnCompiler {\n  constructor(client, tableCompiler, columnBuilder) {\n    this.client = client;\n    this.tableCompiler = tableCompiler;\n    this.columnBuilder = columnBuilder;\n    this._commonBuilder = this.columnBuilder;\n    this.args = columnBuilder._args;\n    this.type = columnBuilder._type.toLowerCase();\n    this.grouped = groupBy(columnBuilder._statements, 'grouping');\n    this.modified = columnBuilder._modifiers;\n    this.isIncrements = this.type.indexOf('increments') !== -1;\n\n    this.formatter = client.formatter(columnBuilder);\n    this.bindings = [];\n    this.formatter.bindings = this.bindings;\n    this.bindingsHolder = this;\n\n    this.sequence = [];\n    this.modifiers = [];\n  }\n\n  defaults(label) {\n    if (Object.prototype.hasOwnProperty.call(this._defaultMap, label)) {\n      return this._defaultMap[label].bind(this)();\n    } else {\n      throw new Error(\n        `There is no default for the specified identifier ${label}`\n      );\n    }\n  }\n\n  // To convert to sql, we first go through and build the\n  // column as it would be in the insert statement\n  toSQL() {\n    this.pushQuery(this.compileColumn());\n    if (this.sequence.additional) {\n      this.sequence = this.sequence.concat(this.sequence.additional);\n    }\n    return this.sequence;\n  }\n\n  // Compiles a column.\n  compileColumn() {\n    return (\n      this.formatter.wrap(this.getColumnName()) +\n      ' ' +\n      this.getColumnType() +\n      this.getModifiers()\n    );\n  }\n\n  // Assumes the autoincrementing key is named `id` if not otherwise specified.\n  getColumnName() {\n    const value = first(this.args);\n    return value || this.defaults('columnName');\n  }\n\n  getColumnType() {\n    // Column type is cached so side effects (such as in pg native enums) are only run once\n    if (!this._columnType) {\n      const type = this[this.type];\n      this._columnType =\n        typeof type === 'function' ? type.apply(this, tail(this.args)) : type;\n    }\n\n    return this._columnType;\n  }\n\n  getModifiers() {\n    const modifiers = [];\n\n    for (let i = 0, l = this.modifiers.length; i < l; i++) {\n      const modifier = this.modifiers[i];\n\n      //Cannot allow 'nullable' modifiers on increments types\n      if (!this.isIncrements || (this.isIncrements && modifier === 'comment')) {\n        if (has(this.modified, modifier)) {\n          const val = this[modifier].apply(this, this.modified[modifier]);\n          if (val) modifiers.push(val);\n        }\n      }\n    }\n\n    return modifiers.length > 0 ? ` ${modifiers.join(' ')}` : '';\n  }\n\n  // Types\n  // ------\n  varchar(length) {\n    return `varchar(${toNumber(length, 255)})`;\n  }\n\n  floating(precision, scale) {\n    return `float(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n\n  decimal(precision, scale) {\n    if (precision === null) {\n      throw new Error(\n        'Specifying no precision on decimal columns is not supported for that SQL dialect.'\n      );\n    }\n    return `decimal(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n\n  // Used to support custom types\n  specifictype(type) {\n    return type;\n  }\n\n  // Modifiers\n  // -------\n\n  nullable(nullable) {\n    return nullable === false ? 'not null' : 'null';\n  }\n\n  notNullable() {\n    return this.nullable(false);\n  }\n\n  defaultTo(value) {\n    return `default ${formatDefault(value, this.type, this.client)}`;\n  }\n}\n\nColumnCompiler.prototype.binary = 'blob';\nColumnCompiler.prototype.bool = 'boolean';\nColumnCompiler.prototype.date = 'date';\nColumnCompiler.prototype.datetime = 'datetime';\nColumnCompiler.prototype.time = 'time';\nColumnCompiler.prototype.timestamp = 'timestamp';\nColumnCompiler.prototype.enu = 'varchar';\nColumnCompiler.prototype.bit = ColumnCompiler.prototype.json = 'text';\nColumnCompiler.prototype.uuid = 'char(36)';\nColumnCompiler.prototype.increments = ({ primaryKey = true } = {}) =>\n  'integer not null' + (primaryKey ? ' primary key' : '') + ' autoincrement';\nColumnCompiler.prototype.bigincrements = ({ primaryKey = true } = {}) =>\n  'integer not null' + (primaryKey ? ' primary key' : '') + ' autoincrement';\nColumnCompiler.prototype.integer = ColumnCompiler.prototype.smallint = ColumnCompiler.prototype.mediumint =\n  'integer';\nColumnCompiler.prototype.biginteger = 'bigint';\nColumnCompiler.prototype.text = 'text';\nColumnCompiler.prototype.tinyint = 'tinyint';\n\nColumnCompiler.prototype.pushQuery = helpers.pushQuery;\nColumnCompiler.prototype.pushAdditional = helpers.pushAdditional;\nColumnCompiler.prototype.unshiftQuery = helpers.unshiftQuery;\n\nColumnCompiler.prototype._defaultMap = {\n  columnName: function () {\n    if (!this.isIncrements) {\n      throw new Error(\n        `You did not specify a column name for the ${this.type} column.`\n      );\n    }\n    return 'id';\n  },\n};\n\nmodule.exports = ColumnCompiler;\n"]},"metadata":{},"sourceType":"script"}