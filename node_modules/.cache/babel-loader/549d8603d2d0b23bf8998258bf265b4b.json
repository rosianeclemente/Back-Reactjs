{"ast":null,"code":"const utils = require('../../utils');\n\nconst trigger = {\n  renameColumnTrigger: function (logger, tableName, columnName, to) {\n    const triggerName = utils.generateCombinedName(logger, 'autoinc_trg', tableName);\n    const sequenceName = utils.generateCombinedName(logger, 'seq', tableName);\n    return `DECLARE ` + `PK_NAME VARCHAR(200); ` + `IS_AUTOINC NUMBER := 0; ` + `BEGIN` + `  EXECUTE IMMEDIATE ('ALTER TABLE \"${tableName}\" RENAME COLUMN \"${columnName}\" TO \"${to}\"');` + `  SELECT COUNT(*) INTO IS_AUTOINC from \"USER_TRIGGERS\" where trigger_name = '${triggerName}';` + `  IF (IS_AUTOINC > 0) THEN` + `    SELECT cols.column_name INTO PK_NAME` + `    FROM all_constraints cons, all_cons_columns cols` + `    WHERE cons.constraint_type = 'P'` + `    AND cons.constraint_name = cols.constraint_name` + `    AND cons.owner = cols.owner` + `    AND cols.table_name = '${tableName}';` + `    IF ('${to}' = PK_NAME) THEN` + `      EXECUTE IMMEDIATE ('DROP TRIGGER \"${triggerName}\"');` + `      EXECUTE IMMEDIATE ('create or replace trigger \"${triggerName}\"` + `      BEFORE INSERT on \"${tableName}\" for each row` + `        declare` + `        checking number := 1;` + `        begin` + `          if (:new.\"${to}\" is null) then` + `            while checking >= 1 loop` + `              select \"${sequenceName}\".nextval into :new.\"${to}\" from dual;` + `              select count(\"${to}\") into checking from \"${tableName}\"` + `              where \"${to}\" = :new.\"${to}\";` + `            end loop;` + `          end if;` + `        end;');` + `    end if;` + `  end if;` + `END;`;\n  },\n  createAutoIncrementTrigger: function (logger, tableName) {\n    const triggerName = utils.generateCombinedName(logger, 'autoinc_trg', tableName);\n    const sequenceName = utils.generateCombinedName(logger, 'seq', tableName);\n    return `DECLARE ` + `PK_NAME VARCHAR(200); ` + `BEGIN` + `  EXECUTE IMMEDIATE ('CREATE SEQUENCE \"${sequenceName}\"');` + `  SELECT cols.column_name INTO PK_NAME` + `  FROM all_constraints cons, all_cons_columns cols` + `  WHERE cons.constraint_type = 'P'` + `  AND cons.constraint_name = cols.constraint_name` + `  AND cons.owner = cols.owner` + `  AND cols.table_name = '${tableName}';` + `  execute immediate ('create or replace trigger \"${triggerName}\"` + `  BEFORE INSERT on \"${tableName}\"` + `  for each row` + `  declare` + `  checking number := 1;` + `  begin` + `    if (:new.\"' || PK_NAME || '\" is null) then` + `      while checking >= 1 loop` + `        select \"${sequenceName}\".nextval into :new.\"' || PK_NAME || '\" from dual;` + `        select count(\"' || PK_NAME || '\") into checking from \"${tableName}\"` + `        where \"' || PK_NAME || '\" = :new.\"' || PK_NAME || '\";` + `      end loop;` + `    end if;` + `  end;'); ` + `END;`;\n  },\n  renameTableAndAutoIncrementTrigger: function (logger, tableName, to) {\n    const triggerName = utils.generateCombinedName(logger, 'autoinc_trg', tableName);\n    const sequenceName = utils.generateCombinedName(logger, 'seq', tableName);\n    const toTriggerName = utils.generateCombinedName(logger, 'autoinc_trg', to);\n    const toSequenceName = utils.generateCombinedName(logger, 'seq', to);\n    return `DECLARE ` + `PK_NAME VARCHAR(200); ` + `IS_AUTOINC NUMBER := 0; ` + `BEGIN` + `  EXECUTE IMMEDIATE ('RENAME \"${tableName}\" TO \"${to}\"');` + `  SELECT COUNT(*) INTO IS_AUTOINC from \"USER_TRIGGERS\" where trigger_name = '${triggerName}';` + `  IF (IS_AUTOINC > 0) THEN` + `    EXECUTE IMMEDIATE ('DROP TRIGGER \"${triggerName}\"');` + `    EXECUTE IMMEDIATE ('RENAME \"${sequenceName}\" TO \"${toSequenceName}\"');` + `    SELECT cols.column_name INTO PK_NAME` + `    FROM all_constraints cons, all_cons_columns cols` + `    WHERE cons.constraint_type = 'P'` + `    AND cons.constraint_name = cols.constraint_name` + `    AND cons.owner = cols.owner` + `    AND cols.table_name = '${to}';` + `    EXECUTE IMMEDIATE ('create or replace trigger \"${toTriggerName}\"` + `    BEFORE INSERT on \"${to}\" for each row` + `      declare` + `      checking number := 1;` + `      begin` + `        if (:new.\"' || PK_NAME || '\" is null) then` + `          while checking >= 1 loop` + `            select \"${toSequenceName}\".nextval into :new.\"' || PK_NAME || '\" from dual;` + `            select count(\"' || PK_NAME || '\") into checking from \"${to}\"` + `            where \"' || PK_NAME || '\" = :new.\"' || PK_NAME || '\";` + `          end loop;` + `        end if;` + `      end;');` + `  end if;` + `END;`;\n  }\n};\nmodule.exports = trigger;","map":{"version":3,"sources":["/home/rosiane/back/node_modules/knex/lib/dialects/oracle/schema/internal/trigger.js"],"names":["utils","require","trigger","renameColumnTrigger","logger","tableName","columnName","to","triggerName","generateCombinedName","sequenceName","createAutoIncrementTrigger","renameTableAndAutoIncrementTrigger","toTriggerName","toSequenceName","module","exports"],"mappings":"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","sourcesContent":["const utils = require('../../utils');\n\nconst trigger = {\n  renameColumnTrigger: function (logger, tableName, columnName, to) {\n    const triggerName = utils.generateCombinedName(\n      logger,\n      'autoinc_trg',\n      tableName\n    );\n    const sequenceName = utils.generateCombinedName(logger, 'seq', tableName);\n    return (\n      `DECLARE ` +\n      `PK_NAME VARCHAR(200); ` +\n      `IS_AUTOINC NUMBER := 0; ` +\n      `BEGIN` +\n      `  EXECUTE IMMEDIATE ('ALTER TABLE \"${tableName}\" RENAME COLUMN \"${columnName}\" TO \"${to}\"');` +\n      `  SELECT COUNT(*) INTO IS_AUTOINC from \"USER_TRIGGERS\" where trigger_name = '${triggerName}';` +\n      `  IF (IS_AUTOINC > 0) THEN` +\n      `    SELECT cols.column_name INTO PK_NAME` +\n      `    FROM all_constraints cons, all_cons_columns cols` +\n      `    WHERE cons.constraint_type = 'P'` +\n      `    AND cons.constraint_name = cols.constraint_name` +\n      `    AND cons.owner = cols.owner` +\n      `    AND cols.table_name = '${tableName}';` +\n      `    IF ('${to}' = PK_NAME) THEN` +\n      `      EXECUTE IMMEDIATE ('DROP TRIGGER \"${triggerName}\"');` +\n      `      EXECUTE IMMEDIATE ('create or replace trigger \"${triggerName}\"` +\n      `      BEFORE INSERT on \"${tableName}\" for each row` +\n      `        declare` +\n      `        checking number := 1;` +\n      `        begin` +\n      `          if (:new.\"${to}\" is null) then` +\n      `            while checking >= 1 loop` +\n      `              select \"${sequenceName}\".nextval into :new.\"${to}\" from dual;` +\n      `              select count(\"${to}\") into checking from \"${tableName}\"` +\n      `              where \"${to}\" = :new.\"${to}\";` +\n      `            end loop;` +\n      `          end if;` +\n      `        end;');` +\n      `    end if;` +\n      `  end if;` +\n      `END;`\n    );\n  },\n\n  createAutoIncrementTrigger: function (logger, tableName) {\n    const triggerName = utils.generateCombinedName(\n      logger,\n      'autoinc_trg',\n      tableName\n    );\n    const sequenceName = utils.generateCombinedName(logger, 'seq', tableName);\n    return (\n      `DECLARE ` +\n      `PK_NAME VARCHAR(200); ` +\n      `BEGIN` +\n      `  EXECUTE IMMEDIATE ('CREATE SEQUENCE \"${sequenceName}\"');` +\n      `  SELECT cols.column_name INTO PK_NAME` +\n      `  FROM all_constraints cons, all_cons_columns cols` +\n      `  WHERE cons.constraint_type = 'P'` +\n      `  AND cons.constraint_name = cols.constraint_name` +\n      `  AND cons.owner = cols.owner` +\n      `  AND cols.table_name = '${tableName}';` +\n      `  execute immediate ('create or replace trigger \"${triggerName}\"` +\n      `  BEFORE INSERT on \"${tableName}\"` +\n      `  for each row` +\n      `  declare` +\n      `  checking number := 1;` +\n      `  begin` +\n      `    if (:new.\"' || PK_NAME || '\" is null) then` +\n      `      while checking >= 1 loop` +\n      `        select \"${sequenceName}\".nextval into :new.\"' || PK_NAME || '\" from dual;` +\n      `        select count(\"' || PK_NAME || '\") into checking from \"${tableName}\"` +\n      `        where \"' || PK_NAME || '\" = :new.\"' || PK_NAME || '\";` +\n      `      end loop;` +\n      `    end if;` +\n      `  end;'); ` +\n      `END;`\n    );\n  },\n\n  renameTableAndAutoIncrementTrigger: function (logger, tableName, to) {\n    const triggerName = utils.generateCombinedName(\n      logger,\n      'autoinc_trg',\n      tableName\n    );\n    const sequenceName = utils.generateCombinedName(logger, 'seq', tableName);\n    const toTriggerName = utils.generateCombinedName(logger, 'autoinc_trg', to);\n    const toSequenceName = utils.generateCombinedName(logger, 'seq', to);\n    return (\n      `DECLARE ` +\n      `PK_NAME VARCHAR(200); ` +\n      `IS_AUTOINC NUMBER := 0; ` +\n      `BEGIN` +\n      `  EXECUTE IMMEDIATE ('RENAME \"${tableName}\" TO \"${to}\"');` +\n      `  SELECT COUNT(*) INTO IS_AUTOINC from \"USER_TRIGGERS\" where trigger_name = '${triggerName}';` +\n      `  IF (IS_AUTOINC > 0) THEN` +\n      `    EXECUTE IMMEDIATE ('DROP TRIGGER \"${triggerName}\"');` +\n      `    EXECUTE IMMEDIATE ('RENAME \"${sequenceName}\" TO \"${toSequenceName}\"');` +\n      `    SELECT cols.column_name INTO PK_NAME` +\n      `    FROM all_constraints cons, all_cons_columns cols` +\n      `    WHERE cons.constraint_type = 'P'` +\n      `    AND cons.constraint_name = cols.constraint_name` +\n      `    AND cons.owner = cols.owner` +\n      `    AND cols.table_name = '${to}';` +\n      `    EXECUTE IMMEDIATE ('create or replace trigger \"${toTriggerName}\"` +\n      `    BEFORE INSERT on \"${to}\" for each row` +\n      `      declare` +\n      `      checking number := 1;` +\n      `      begin` +\n      `        if (:new.\"' || PK_NAME || '\" is null) then` +\n      `          while checking >= 1 loop` +\n      `            select \"${toSequenceName}\".nextval into :new.\"' || PK_NAME || '\" from dual;` +\n      `            select count(\"' || PK_NAME || '\") into checking from \"${to}\"` +\n      `            where \"' || PK_NAME || '\" = :new.\"' || PK_NAME || '\";` +\n      `          end loop;` +\n      `        end if;` +\n      `      end;');` +\n      `  end if;` +\n      `END;`\n    );\n  },\n};\n\nmodule.exports = trigger;\n"]},"metadata":{},"sourceType":"script"}