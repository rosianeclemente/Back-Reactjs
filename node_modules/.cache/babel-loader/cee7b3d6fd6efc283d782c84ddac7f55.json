{"ast":null,"code":"const ColumnCompiler_Oracle = require('../../oracle/schema/oracle-columncompiler');\n\nconst {\n  isObject\n} = require('../../../util/is');\n\nclass ColumnCompiler_Oracledb extends ColumnCompiler_Oracle {\n  constructor() {\n    super(...arguments);\n  }\n\n  datetime(withoutTz) {\n    let useTz;\n\n    if (isObject(withoutTz)) {\n      ({\n        useTz\n      } = withoutTz);\n    } else {\n      useTz = !withoutTz;\n    }\n\n    return useTz ? 'timestamp with local time zone' : 'timestamp';\n  }\n\n  timestamp(withoutTz) {\n    let useTz;\n\n    if (isObject(withoutTz)) {\n      ({\n        useTz\n      } = withoutTz);\n    } else {\n      useTz = !withoutTz;\n    }\n\n    return useTz ? 'timestamp with local time zone' : 'timestamp';\n  }\n\n}\n\nColumnCompiler_Oracledb.prototype.time = 'timestamp with local time zone';\nmodule.exports = ColumnCompiler_Oracledb;","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/dialects/oracledb/schema/oracledb-columncompiler.js"],"names":["ColumnCompiler_Oracle","require","isObject","ColumnCompiler_Oracledb","constructor","arguments","datetime","withoutTz","useTz","timestamp","prototype","time","module","exports"],"mappings":"AAAA,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,2CAAD,CAArC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeD,OAAO,CAAC,kBAAD,CAA5B;;AAEA,MAAME,uBAAN,SAAsCH,qBAAtC,CAA4D;AAC1DI,EAAAA,WAAW,GAAG;AACZ,UAAM,GAAGC,SAAT;AACD;;AAEDC,EAAAA,QAAQ,CAACC,SAAD,EAAY;AAClB,QAAIC,KAAJ;;AACA,QAAIN,QAAQ,CAACK,SAAD,CAAZ,EAAyB;AACvB,OAAC;AAAEC,QAAAA;AAAF,UAAYD,SAAb;AACD,KAFD,MAEO;AACLC,MAAAA,KAAK,GAAG,CAACD,SAAT;AACD;;AACD,WAAOC,KAAK,GAAG,gCAAH,GAAsC,WAAlD;AACD;;AAEDC,EAAAA,SAAS,CAACF,SAAD,EAAY;AACnB,QAAIC,KAAJ;;AACA,QAAIN,QAAQ,CAACK,SAAD,CAAZ,EAAyB;AACvB,OAAC;AAAEC,QAAAA;AAAF,UAAYD,SAAb;AACD,KAFD,MAEO;AACLC,MAAAA,KAAK,GAAG,CAACD,SAAT;AACD;;AACD,WAAOC,KAAK,GAAG,gCAAH,GAAsC,WAAlD;AACD;;AAvByD;;AA0B5DL,uBAAuB,CAACO,SAAxB,CAAkCC,IAAlC,GAAyC,gCAAzC;AAEAC,MAAM,CAACC,OAAP,GAAiBV,uBAAjB","sourcesContent":["const ColumnCompiler_Oracle = require('../../oracle/schema/oracle-columncompiler');\nconst { isObject } = require('../../../util/is');\n\nclass ColumnCompiler_Oracledb extends ColumnCompiler_Oracle {\n  constructor() {\n    super(...arguments);\n  }\n\n  datetime(withoutTz) {\n    let useTz;\n    if (isObject(withoutTz)) {\n      ({ useTz } = withoutTz);\n    } else {\n      useTz = !withoutTz;\n    }\n    return useTz ? 'timestamp with local time zone' : 'timestamp';\n  }\n\n  timestamp(withoutTz) {\n    let useTz;\n    if (isObject(withoutTz)) {\n      ({ useTz } = withoutTz);\n    } else {\n      useTz = !withoutTz;\n    }\n    return useTz ? 'timestamp with local time zone' : 'timestamp';\n  }\n}\n\nColumnCompiler_Oracledb.prototype.time = 'timestamp with local time zone';\n\nmodule.exports = ColumnCompiler_Oracledb;\n"]},"metadata":{},"sourceType":"script"}