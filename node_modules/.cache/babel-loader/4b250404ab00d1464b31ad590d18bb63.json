{"ast":null,"code":"const connection = require('../database/connections');\n\nconst {\n  index\n} = require('./OngsControllers');\n\nmodule.exports = {\n  async index(request, response) {\n    const {\n      page = 1\n    } = request.query;\n    const [count] = await connection('incidents').count();\n    const incidents = await connection('incidents').join('ongs', 'ongs.id', '=', 'incidents.ong_id').limit(5).offset((page - 1) * 5).select(['incidents.*', 'ongs.name', 'ongs.email', 'ongs.whatsapp', 'ongs.city', 'ongs.uf']);\n    response.header('X-Total-Count', count['count(*)']);\n    return response.json(incidents);\n  },\n\n  async create(request, response) {\n    const {\n      title,\n      description,\n      value\n    } = request.body;\n    const ong_id = request.headers.authorization;\n    const [id] = await connection('incidents').insert({\n      title,\n      description,\n      value,\n      ong_id\n    });\n    return response.json({\n      id\n    });\n  },\n\n  async delete(request, response) {\n    const {\n      id\n    } = request.params;\n    const ong_id = request.headers.authorization;\n    const incident = await connection('incidents').where('id', id).select('ong_id').first();\n\n    if (incident.ong_id != ong_id) {\n      return response.status(401).json({\n        error: 'Operation not permitted.'\n      });\n    }\n\n    await connection('incidents').where('id', id).delete();\n    return response.status(204).send();\n  }\n\n};","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/src/controllers/IncidentController.js"],"names":["connection","require","index","module","exports","request","response","page","query","count","incidents","join","limit","offset","select","header","json","create","title","description","value","body","ong_id","headers","authorization","id","insert","delete","params","incident","where","first","status","error","send"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,yBAAD,CAA1B;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAWD,OAAO,CAAC,mBAAD,CAAxB;;AAEAE,MAAM,CAACC,OAAP,GAAiB;AAEb,QAAMF,KAAN,CAAYG,OAAZ,EAAqBC,QAArB,EAA+B;AAC3B,UAAM;AAAEC,MAAAA,IAAI,GAAG;AAAT,QAAcF,OAAO,CAACG,KAA5B;AAEA,UAAM,CAACC,KAAD,IAAU,MAAMT,UAAU,CAAC,WAAD,CAAV,CAAwBS,KAAxB,EAAtB;AAEA,UAAMC,SAAS,GAAG,MAAMV,UAAU,CAAC,WAAD,CAAV,CACvBW,IADuB,CAClB,MADkB,EACX,SADW,EACA,GADA,EACK,kBADL,EAEvBC,KAFuB,CAEjB,CAFiB,EAGvBC,MAHuB,CAGhB,CAACN,IAAI,GAAE,CAAP,IAAY,CAHI,EAIvBO,MAJuB,CAIhB,CAAC,aAAD,EACR,WADQ,EAER,YAFQ,EAGR,eAHQ,EAIR,WAJQ,EAKR,SALQ,CAJgB,CAAxB;AAWAR,IAAAA,QAAQ,CAACS,MAAT,CAAgB,eAAhB,EAAiCN,KAAK,CAAC,UAAD,CAAtC;AAEA,WAAOH,QAAQ,CAACU,IAAT,CAAcN,SAAd,CAAP;AACH,GArBY;;AAsBb,QAAMO,MAAN,CAAaZ,OAAb,EAAsBC,QAAtB,EAA+B;AAC3B,UAAM;AAAEY,MAAAA,KAAF;AAASC,MAAAA,WAAT;AAAsBC,MAAAA;AAAtB,QAA+Bf,OAAO,CAACgB,IAA7C;AACA,UAAMC,MAAM,GAAGjB,OAAO,CAACkB,OAAR,CAAgBC,aAA/B;AAEA,UAAM,CAACC,EAAD,IAAO,MAAMzB,UAAU,CAAE,WAAF,CAAV,CAAyB0B,MAAzB,CAAgC;AAC/CR,MAAAA,KAD+C;AAE/CC,MAAAA,WAF+C;AAG/CC,MAAAA,KAH+C;AAI/CE,MAAAA;AAJ+C,KAAhC,CAAnB;AAMA,WAAOhB,QAAQ,CAACU,IAAT,CAAc;AAAES,MAAAA;AAAF,KAAd,CAAP;AACH,GAjCY;;AAkCb,QAAME,MAAN,CAAatB,OAAb,EAAsBC,QAAtB,EAA+B;AAC3B,UAAM;AAAEmB,MAAAA;AAAF,QAASpB,OAAO,CAACuB,MAAvB;AACA,UAAMN,MAAM,GAAGjB,OAAO,CAACkB,OAAR,CAAgBC,aAA/B;AAEA,UAAMK,QAAQ,GAAG,MAAM7B,UAAU,CAAC,WAAD,CAAV,CACtB8B,KADsB,CAChB,IADgB,EACVL,EADU,EAEtBX,MAFsB,CAEf,QAFe,EAGtBiB,KAHsB,EAAvB;;AAKA,QAAIF,QAAQ,CAACP,MAAT,IAAmBA,MAAvB,EAA+B;AAC3B,aAAOhB,QAAQ,CAAC0B,MAAT,CAAgB,GAAhB,EAAqBhB,IAArB,CAA0B;AAAEiB,QAAAA,KAAK,EAAE;AAAT,OAA1B,CAAP;AAEH;;AACD,UAAMjC,UAAU,CAAC,WAAD,CAAV,CAAwB8B,KAAxB,CAA8B,IAA9B,EAAoCL,EAApC,EAAwCE,MAAxC,EAAN;AAEA,WAAOrB,QAAQ,CAAC0B,MAAT,CAAgB,GAAhB,EAAqBE,IAArB,EAAP;AAEH;;AAnDY,CAAjB","sourcesContent":["const connection = require('../database/connections');\nconst {index}  = require('./OngsControllers');\n\nmodule.exports = {\n\n    async index(request, response) {\n        const { page = 1} = request.query;\n\n        const [count] = await connection('incidents').count();\n\n        const incidents = await connection('incidents')\n        .join('ongs','ongs.id', '=', 'incidents.ong_id' )\n        .limit(5)\n        .offset((page -1) * 5)\n        .select(['incidents.*', \n        'ongs.name', \n        'ongs.email', \n        'ongs.whatsapp', \n        'ongs.city', \n        'ongs.uf']); \n\n        response.header('X-Total-Count', count['count(*)']);\n\n        return response.json(incidents);\n    },\n    async create(request, response){\n        const { title, description, value} = request.body;\n        const ong_id = request.headers.authorization;\n\n        const [id] = await connection ('incidents').insert({\n            title,\n            description,\n            value,\n            ong_id,\n        });\n        return response.json({ id });\n    },\n    async delete(request, response){\n        const { id } = request.params;\n        const ong_id = request.headers.authorization;\n\n        const incident = await connection('incidents')\n        .where('id', id)\n        .select('ong_id')\n        .first();\n\n        if (incident.ong_id != ong_id) {\n            return response.status(401).json({ error: 'Operation not permitted.'});\n\n        }\n        await connection('incidents').where('id', id).delete();\n\n        return response.status(204).send();\n\n    }\n};"]},"metadata":{},"sourceType":"module"}