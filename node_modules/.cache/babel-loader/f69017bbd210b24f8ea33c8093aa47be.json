{"ast":null,"code":"const path = require('path');\n\nconst {\n  writeJsFileUsingTemplate\n} = require('../util/template');\n\nconst {\n  getMergedConfig\n} = require('./configuration-merger');\n\nconst {\n  ensureDirectoryExists\n} = require('../util/fs');\n\nconst {\n  yyyymmddhhmmss\n} = require('../util/timestamp');\n\nclass MigrationGenerator {\n  constructor(migrationConfig, logger) {\n    this.config = getMergedConfig(migrationConfig, undefined, logger);\n  } // Creates a new migration, with a given name.\n\n\n  async make(name, config, logger) {\n    this.config = getMergedConfig(config, this.config, logger);\n\n    if (!name) {\n      return Promise.reject(new Error('A name must be specified for the generated migration'));\n    }\n\n    await this._ensureFolder();\n    const createdMigrationFilePath = await this._writeNewMigration(name);\n    return createdMigrationFilePath;\n  } // Ensures a folder for the migrations exist, dependent on the migration\n  // config settings.\n\n\n  _ensureFolder() {\n    const dirs = this._absoluteConfigDirs();\n\n    const promises = dirs.map(ensureDirectoryExists);\n    return Promise.all(promises);\n  }\n\n  _getStubPath() {\n    return this.config.stub || path.join(__dirname, 'stub', this.config.extension + '.stub');\n  }\n\n  _getNewMigrationName(name) {\n    if (name[0] === '-') name = name.slice(1);\n    return yyyymmddhhmmss() + '_' + name + '.' + this.config.extension;\n  }\n\n  _getNewMigrationPath(name) {\n    const fileName = this._getNewMigrationName(name);\n\n    const dirs = this._absoluteConfigDirs();\n\n    const dir = dirs.slice(-1)[0]; // Get last specified directory\n\n    return path.join(dir, fileName);\n  } // Write a new migration to disk, using the config and generated filename,\n  // passing any `variables` given in the config to the template.\n\n\n  async _writeNewMigration(name) {\n    const migrationPath = this._getNewMigrationPath(name);\n\n    await writeJsFileUsingTemplate(migrationPath, this._getStubPath(), {\n      variable: 'd'\n    }, this.config.variables || {});\n    return migrationPath;\n  }\n\n  _absoluteConfigDirs() {\n    const directories = Array.isArray(this.config.directory) ? this.config.directory : [this.config.directory];\n    return directories.map(directory => {\n      if (!directory) {\n        console.warn('Failed to resolve config file, knex cannot determine where to generate migrations');\n      }\n\n      return path.resolve(process.cwd(), directory);\n    });\n  }\n\n}\n\nmodule.exports = MigrationGenerator;","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/migrations/migrate/MigrationGenerator.js"],"names":["path","require","writeJsFileUsingTemplate","getMergedConfig","ensureDirectoryExists","yyyymmddhhmmss","MigrationGenerator","constructor","migrationConfig","logger","config","undefined","make","name","Promise","reject","Error","_ensureFolder","createdMigrationFilePath","_writeNewMigration","dirs","_absoluteConfigDirs","promises","map","all","_getStubPath","stub","join","__dirname","extension","_getNewMigrationName","slice","_getNewMigrationPath","fileName","dir","migrationPath","variable","variables","directories","Array","isArray","directory","console","warn","resolve","process","cwd","module","exports"],"mappings":"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","sourcesContent":["const path = require('path');\nconst { writeJsFileUsingTemplate } = require('../util/template');\nconst { getMergedConfig } = require('./configuration-merger');\nconst { ensureDirectoryExists } = require('../util/fs');\nconst { yyyymmddhhmmss } = require('../util/timestamp');\n\nclass MigrationGenerator {\n  constructor(migrationConfig, logger) {\n    this.config = getMergedConfig(migrationConfig, undefined, logger);\n  }\n\n  // Creates a new migration, with a given name.\n  async make(name, config, logger) {\n    this.config = getMergedConfig(config, this.config, logger);\n    if (!name) {\n      return Promise.reject(\n        new Error('A name must be specified for the generated migration')\n      );\n    }\n    await this._ensureFolder();\n    const createdMigrationFilePath = await this._writeNewMigration(name);\n    return createdMigrationFilePath;\n  }\n\n  // Ensures a folder for the migrations exist, dependent on the migration\n  // config settings.\n  _ensureFolder() {\n    const dirs = this._absoluteConfigDirs();\n\n    const promises = dirs.map(ensureDirectoryExists);\n\n    return Promise.all(promises);\n  }\n\n  _getStubPath() {\n    return (\n      this.config.stub ||\n      path.join(__dirname, 'stub', this.config.extension + '.stub')\n    );\n  }\n\n  _getNewMigrationName(name) {\n    if (name[0] === '-') name = name.slice(1);\n    return yyyymmddhhmmss() + '_' + name + '.' + this.config.extension;\n  }\n\n  _getNewMigrationPath(name) {\n    const fileName = this._getNewMigrationName(name);\n    const dirs = this._absoluteConfigDirs();\n    const dir = dirs.slice(-1)[0]; // Get last specified directory\n    return path.join(dir, fileName);\n  }\n\n  // Write a new migration to disk, using the config and generated filename,\n  // passing any `variables` given in the config to the template.\n  async _writeNewMigration(name) {\n    const migrationPath = this._getNewMigrationPath(name);\n    await writeJsFileUsingTemplate(\n      migrationPath,\n      this._getStubPath(),\n      { variable: 'd' },\n      this.config.variables || {}\n    );\n    return migrationPath;\n  }\n\n  _absoluteConfigDirs() {\n    const directories = Array.isArray(this.config.directory)\n      ? this.config.directory\n      : [this.config.directory];\n    return directories.map((directory) => {\n      if (!directory) {\n        console.warn(\n          'Failed to resolve config file, knex cannot determine where to generate migrations'\n        );\n      }\n      return path.resolve(process.cwd(), directory);\n    });\n  }\n}\n\nmodule.exports = MigrationGenerator;\n"]},"metadata":{},"sourceType":"script"}