{"ast":null,"code":"function generateCombinedName(logger, postfix, name, subNames) {\n  const crypto = require('crypto');\n\n  const limit = 30;\n  if (!Array.isArray(subNames)) subNames = subNames ? [subNames] : [];\n  const table = name.replace(/\\.|-/g, '_');\n  const subNamesPart = subNames.join('_');\n  let result = `${table}_${subNamesPart.length ? subNamesPart + '_' : ''}${postfix}`.toLowerCase();\n\n  if (result.length > limit) {\n    logger.warn(`Automatically generated name \"${result}\" exceeds ${limit} character ` + `limit for Oracle. Using base64 encoded sha1 of that name instead.`); // generates the sha1 of the name and encode it with base64\n\n    result = crypto.createHash('sha1').update(result).digest('base64').replace('=', '');\n  }\n\n  return result;\n}\n\nfunction wrapSqlWithCatch(sql, errorNumberToCatch) {\n  return `begin execute immediate '${sql.replace(/'/g, \"''\")}'; ` + `exception when others then if sqlcode != ${errorNumberToCatch} then raise; ` + `end if; ` + `end;`;\n}\n\nfunction ReturningHelper(columnName) {\n  this.columnName = columnName;\n}\n\nReturningHelper.prototype.toString = function () {\n  return `[object ReturningHelper:${this.columnName}]`;\n}; // If the error is any of these, we'll assume we need to\n// mark the connection as failed\n\n\nfunction isConnectionError(err) {\n  return ['ORA-03114', // not connected to ORACLE\n  'ORA-03113', // end-of-file on communication channel\n  'ORA-03135', // connection lost contact\n  'ORA-12514', // listener does not currently know of service requested in connect descriptor\n  'ORA-00022', // invalid session ID; access denied\n  'ORA-00028', // your session has been killed\n  'ORA-00031', // your session has been marked for kill\n  'ORA-00045', // your session has been terminated with no replay\n  'ORA-00378', // buffer pools cannot be created as specified\n  'ORA-00602', // internal programming exception\n  'ORA-00603', // ORACLE server session terminated by fatal error\n  'ORA-00609', // could not attach to incoming connection\n  'ORA-01012', // not logged on\n  'ORA-01041', // internal error. hostdef extension doesn't exist\n  'ORA-01043', // user side memory corruption\n  'ORA-01089', // immediate shutdown or close in progress\n  'ORA-01092', // ORACLE instance terminated. Disconnection forced\n  'ORA-02396', // exceeded maximum idle time, please connect again\n  'ORA-03122', // attempt to close ORACLE-side window on user side\n  'ORA-12153', // TNS'not connected\n  'ORA-12537', // TNS'connection closed\n  'ORA-12547', // TNS'lost contact\n  'ORA-12570', // TNS'packet reader failure\n  'ORA-12583', // TNS'no reader\n  'ORA-27146', // post/wait initialization failed\n  'ORA-28511', // lost RPC connection\n  'ORA-56600', // an illegal OCI function call was issued\n  'NJS-040', 'NJS-024', 'NJS-003'].some(function (prefix) {\n    return err.message.indexOf(prefix) === 0;\n  });\n}\n\nmodule.exports = {\n  generateCombinedName,\n  isConnectionError,\n  wrapSqlWithCatch,\n  ReturningHelper\n};","map":{"version":3,"sources":["/home/rosiane/Projeto-completo/back/node_modules/knex/lib/dialects/oracle/utils.js"],"names":["generateCombinedName","logger","postfix","name","subNames","crypto","require","limit","Array","isArray","table","replace","subNamesPart","join","result","length","toLowerCase","warn","createHash","update","digest","wrapSqlWithCatch","sql","errorNumberToCatch","ReturningHelper","columnName","prototype","toString","isConnectionError","err","some","prefix","message","indexOf","module","exports"],"mappings":"AAAA,SAASA,oBAAT,CAA8BC,MAA9B,EAAsCC,OAAtC,EAA+CC,IAA/C,EAAqDC,QAArD,EAA+D;AAC7D,QAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,QAAMC,KAAK,GAAG,EAAd;AACA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcL,QAAd,CAAL,EAA8BA,QAAQ,GAAGA,QAAQ,GAAG,CAACA,QAAD,CAAH,GAAgB,EAAnC;AAC9B,QAAMM,KAAK,GAAGP,IAAI,CAACQ,OAAL,CAAa,OAAb,EAAsB,GAAtB,CAAd;AACA,QAAMC,YAAY,GAAGR,QAAQ,CAACS,IAAT,CAAc,GAAd,CAArB;AACA,MAAIC,MAAM,GAAI,GAAEJ,KAAM,IACpBE,YAAY,CAACG,MAAb,GAAsBH,YAAY,GAAG,GAArC,GAA2C,EAC5C,GAAEV,OAAQ,EAFE,CAEAc,WAFA,EAAb;;AAGA,MAAIF,MAAM,CAACC,MAAP,GAAgBR,KAApB,EAA2B;AACzBN,IAAAA,MAAM,CAACgB,IAAP,CACG,iCAAgCH,MAAO,aAAYP,KAAM,aAA1D,GACG,mEAFL,EADyB,CAKzB;;AACAO,IAAAA,MAAM,GAAGT,MAAM,CACZa,UADM,CACK,MADL,EAENC,MAFM,CAECL,MAFD,EAGNM,MAHM,CAGC,QAHD,EAINT,OAJM,CAIE,GAJF,EAIO,EAJP,CAAT;AAKD;;AACD,SAAOG,MAAP;AACD;;AAED,SAASO,gBAAT,CAA0BC,GAA1B,EAA+BC,kBAA/B,EAAmD;AACjD,SACG,4BAA2BD,GAAG,CAACX,OAAJ,CAAY,IAAZ,EAAkB,IAAlB,CAAwB,KAApD,GACC,4CAA2CY,kBAAmB,eAD/D,GAEC,UAFD,GAGC,MAJH;AAMD;;AAED,SAASC,eAAT,CAAyBC,UAAzB,EAAqC;AACnC,OAAKA,UAAL,GAAkBA,UAAlB;AACD;;AAEDD,eAAe,CAACE,SAAhB,CAA0BC,QAA1B,GAAqC,YAAY;AAC/C,SAAQ,2BAA0B,KAAKF,UAAW,GAAlD;AACD,CAFD,C,CAIA;AACA;;;AACA,SAASG,iBAAT,CAA2BC,GAA3B,EAAgC;AAC9B,SAAO,CACL,WADK,EACQ;AACb,aAFK,EAEQ;AACb,aAHK,EAGQ;AACb,aAJK,EAIQ;AACb,aALK,EAKQ;AACb,aANK,EAMQ;AACb,aAPK,EAOQ;AACb,aARK,EAQQ;AACb,aATK,EASQ;AACb,aAVK,EAUQ;AACb,aAXK,EAWQ;AACb,aAZK,EAYQ;AACb,aAbK,EAaQ;AACb,aAdK,EAcQ;AACb,aAfK,EAeQ;AACb,aAhBK,EAgBQ;AACb,aAjBK,EAiBQ;AACb,aAlBK,EAkBQ;AACb,aAnBK,EAmBQ;AACb,aApBK,EAoBQ;AACb,aArBK,EAqBQ;AACb,aAtBK,EAsBQ;AACb,aAvBK,EAuBQ;AACb,aAxBK,EAwBQ;AACb,aAzBK,EAyBQ;AACb,aA1BK,EA0BQ;AACb,aA3BK,EA2BQ;AACb,WA5BK,EA6BL,SA7BK,EA8BL,SA9BK,EA+BLC,IA/BK,CA+BA,UAAUC,MAAV,EAAkB;AACvB,WAAOF,GAAG,CAACG,OAAJ,CAAYC,OAAZ,CAAoBF,MAApB,MAAgC,CAAvC;AACD,GAjCM,CAAP;AAkCD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AACfnC,EAAAA,oBADe;AAEf4B,EAAAA,iBAFe;AAGfP,EAAAA,gBAHe;AAIfG,EAAAA;AAJe,CAAjB","sourcesContent":["function generateCombinedName(logger, postfix, name, subNames) {\n  const crypto = require('crypto');\n  const limit = 30;\n  if (!Array.isArray(subNames)) subNames = subNames ? [subNames] : [];\n  const table = name.replace(/\\.|-/g, '_');\n  const subNamesPart = subNames.join('_');\n  let result = `${table}_${\n    subNamesPart.length ? subNamesPart + '_' : ''\n  }${postfix}`.toLowerCase();\n  if (result.length > limit) {\n    logger.warn(\n      `Automatically generated name \"${result}\" exceeds ${limit} character ` +\n        `limit for Oracle. Using base64 encoded sha1 of that name instead.`\n    );\n    // generates the sha1 of the name and encode it with base64\n    result = crypto\n      .createHash('sha1')\n      .update(result)\n      .digest('base64')\n      .replace('=', '');\n  }\n  return result;\n}\n\nfunction wrapSqlWithCatch(sql, errorNumberToCatch) {\n  return (\n    `begin execute immediate '${sql.replace(/'/g, \"''\")}'; ` +\n    `exception when others then if sqlcode != ${errorNumberToCatch} then raise; ` +\n    `end if; ` +\n    `end;`\n  );\n}\n\nfunction ReturningHelper(columnName) {\n  this.columnName = columnName;\n}\n\nReturningHelper.prototype.toString = function () {\n  return `[object ReturningHelper:${this.columnName}]`;\n};\n\n// If the error is any of these, we'll assume we need to\n// mark the connection as failed\nfunction isConnectionError(err) {\n  return [\n    'ORA-03114', // not connected to ORACLE\n    'ORA-03113', // end-of-file on communication channel\n    'ORA-03135', // connection lost contact\n    'ORA-12514', // listener does not currently know of service requested in connect descriptor\n    'ORA-00022', // invalid session ID; access denied\n    'ORA-00028', // your session has been killed\n    'ORA-00031', // your session has been marked for kill\n    'ORA-00045', // your session has been terminated with no replay\n    'ORA-00378', // buffer pools cannot be created as specified\n    'ORA-00602', // internal programming exception\n    'ORA-00603', // ORACLE server session terminated by fatal error\n    'ORA-00609', // could not attach to incoming connection\n    'ORA-01012', // not logged on\n    'ORA-01041', // internal error. hostdef extension doesn't exist\n    'ORA-01043', // user side memory corruption\n    'ORA-01089', // immediate shutdown or close in progress\n    'ORA-01092', // ORACLE instance terminated. Disconnection forced\n    'ORA-02396', // exceeded maximum idle time, please connect again\n    'ORA-03122', // attempt to close ORACLE-side window on user side\n    'ORA-12153', // TNS'not connected\n    'ORA-12537', // TNS'connection closed\n    'ORA-12547', // TNS'lost contact\n    'ORA-12570', // TNS'packet reader failure\n    'ORA-12583', // TNS'no reader\n    'ORA-27146', // post/wait initialization failed\n    'ORA-28511', // lost RPC connection\n    'ORA-56600', // an illegal OCI function call was issued\n    'NJS-040',\n    'NJS-024',\n    'NJS-003',\n  ].some(function (prefix) {\n    return err.message.indexOf(prefix) === 0;\n  });\n}\n\nmodule.exports = {\n  generateCombinedName,\n  isConnectionError,\n  wrapSqlWithCatch,\n  ReturningHelper,\n};\n"]},"metadata":{},"sourceType":"script"}